
projecto_reversi_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f34  0800f4f8  0800f4f8  0001f4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801342c  0801342c  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801342c  0801342c  0002342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013434  08013434  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013434  08013434  00023434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013438  08013438  00023438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0801343c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  200000e4  08013520  000300e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08013520  00030c40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295da  00000000  00000000  00030112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b90  00000000  00000000  000596ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe0  00000000  00000000  0005e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  00060260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003260b  00000000  00000000  00061fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c3e6  00000000  00000000  000945f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a5c1  00000000  00000000  000b09d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001daf9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a08  00000000  00000000  001db018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000e4 	.word	0x200000e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f4e0 	.word	0x0800f4e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e8 	.word	0x200000e8
 800023c:	0800f4e0 	.word	0x0800f4e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fd89 	bl	800113c <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000100 	.word	0x20000100

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fd70 	bl	800113c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fd8e 	bl	8001184 <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd69 	bl	8001184 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000104 	.word	0x20000104

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fd46 	bl	80011c0 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000104 	.word	0x20000104

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fcd8 	bl	8001150 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fcc4 	bl	8001150 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20000100 	.word	0x20000100

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fab3 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 faaf 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 faab 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 faa7 	bl	8001dd8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 faa3 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fa9f 	bl	8001dd8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fcae 	bl	80011fc <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fa98 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fa94 	bl	8001dd8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fca3 	bl	80011fc <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa8d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa89 	bl	8001dd8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa85 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa81 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa7d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa79 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa75 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa71 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa6d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa69 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa65 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa61 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa5d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa59 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa55 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa51 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa4d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa49 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa45 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa41 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa3d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa39 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa35 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa31 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa2d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa29 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa25 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fa21 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa1d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fa19 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa15 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 fa11 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa0d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa09 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa05 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fa01 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9fd 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 f9f9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9f5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 f9f1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9ed 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 f9e9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9e5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9e1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9dd 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 f9d9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9d5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 f9d1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9cd 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9c9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9c5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f9c1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9bd 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9b9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9b5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9b1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9ad 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f9a9 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9a5 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9a1 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f99d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f999 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f995 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f991 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f98d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f989 	bl	8001dd8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f985 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f981 	bl	8001dd8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f97d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f979 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f975 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f971 	bl	8001dd8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f96d 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f969 	bl	8001dd8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f965 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f961 	bl	8001dd8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f95d 	bl	8001dd8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f959 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f955 	bl	8001dd8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f951 	bl	8001dd8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f94d 	bl	8001dd8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f949 	bl	8001dd8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 fb58 	bl	80011fc <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f93b 	bl	8001dd8 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800f89c 	.word	0x0800f89c
 8000b68:	0800f754 	.word	0x0800f754
 8000b6c:	0800f8a0 	.word	0x0800f8a0
 8000b70:	0800f758 	.word	0x0800f758
 8000b74:	0800f8a4 	.word	0x0800f8a4
 8000b78:	0800f8a8 	.word	0x0800f8a8
 8000b7c:	0800f8ac 	.word	0x0800f8ac
 8000b80:	0800f8b0 	.word	0x0800f8b0
 8000b84:	0800f8b4 	.word	0x0800f8b4
 8000b88:	0800f8b8 	.word	0x0800f8b8
 8000b8c:	0800f8bc 	.word	0x0800f8bc
 8000b90:	0800f8c0 	.word	0x0800f8c0
 8000b94:	0800f8c4 	.word	0x0800f8c4
 8000b98:	0800f8c8 	.word	0x0800f8c8
 8000b9c:	0800f8cc 	.word	0x0800f8cc
 8000ba0:	0800f8d0 	.word	0x0800f8d0
 8000ba4:	0800f8d4 	.word	0x0800f8d4
 8000ba8:	0800f8d8 	.word	0x0800f8d8
 8000bac:	0800f8dc 	.word	0x0800f8dc
 8000bb0:	0800f8e0 	.word	0x0800f8e0
 8000bb4:	0800f8e4 	.word	0x0800f8e4
 8000bb8:	0800f784 	.word	0x0800f784
 8000bbc:	0800f8e8 	.word	0x0800f8e8
 8000bc0:	0800f8ec 	.word	0x0800f8ec
 8000bc4:	0800f8f0 	.word	0x0800f8f0
 8000bc8:	0800f8f4 	.word	0x0800f8f4
 8000bcc:	0800f8f8 	.word	0x0800f8f8
 8000bd0:	0800f8fc 	.word	0x0800f8fc
 8000bd4:	0800f900 	.word	0x0800f900
 8000bd8:	0800f904 	.word	0x0800f904
 8000bdc:	0800f908 	.word	0x0800f908
 8000be0:	0800f788 	.word	0x0800f788
 8000be4:	0800f78c 	.word	0x0800f78c
 8000be8:	0800f90c 	.word	0x0800f90c
 8000bec:	0800f794 	.word	0x0800f794
 8000bf0:	0800f910 	.word	0x0800f910
 8000bf4:	0800f7a4 	.word	0x0800f7a4
 8000bf8:	0800f914 	.word	0x0800f914
 8000bfc:	0800f7b4 	.word	0x0800f7b4
 8000c00:	0800f918 	.word	0x0800f918
 8000c04:	0800f950 	.word	0x0800f950
 8000c08:	0800f7c0 	.word	0x0800f7c0
 8000c0c:	0800f91c 	.word	0x0800f91c
 8000c10:	0800f7cc 	.word	0x0800f7cc
 8000c14:	0800f7dc 	.word	0x0800f7dc
 8000c18:	0800f7ec 	.word	0x0800f7ec
 8000c1c:	0800f7f8 	.word	0x0800f7f8
 8000c20:	0800f808 	.word	0x0800f808
 8000c24:	0800f920 	.word	0x0800f920
 8000c28:	0800f818 	.word	0x0800f818
 8000c2c:	0800f924 	.word	0x0800f924
 8000c30:	0800f824 	.word	0x0800f824
 8000c34:	0800f830 	.word	0x0800f830
 8000c38:	0800f83c 	.word	0x0800f83c
 8000c3c:	0800f84c 	.word	0x0800f84c
 8000c40:	0800f85c 	.word	0x0800f85c
 8000c44:	0800f868 	.word	0x0800f868
 8000c48:	0800f878 	.word	0x0800f878
 8000c4c:	0800f954 	.word	0x0800f954
 8000c50:	0800f958 	.word	0x0800f958
 8000c54:	0800f95c 	.word	0x0800f95c
 8000c58:	0800f960 	.word	0x0800f960
 8000c5c:	0800f964 	.word	0x0800f964
 8000c60:	0800f888 	.word	0x0800f888
 8000c64:	0800f75c 	.word	0x0800f75c
 8000c68:	0800f770 	.word	0x0800f770
 8000c6c:	0800f928 	.word	0x0800f928
 8000c70:	0800f92c 	.word	0x0800f92c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8ae 	bl	8001dd8 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f8a6 	bl	8001dd8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f8a2 	bl	8001dd8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f89e 	bl	8001dd8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f89a 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f896 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f892 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f88e 	bl	8001dd8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f88a 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f886 	bl	8001dd8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f882 	bl	8001dd8 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800f930 	.word	0x0800f930
 8000ce4:	0800f934 	.word	0x0800f934
 8000ce8:	0800f88c 	.word	0x0800f88c
 8000cec:	0800f894 	.word	0x0800f894
 8000cf0:	0800f938 	.word	0x0800f938
 8000cf4:	0800f93c 	.word	0x0800f93c
 8000cf8:	0800f940 	.word	0x0800f940
 8000cfc:	0800f944 	.word	0x0800f944
 8000d00:	0800f948 	.word	0x0800f948
 8000d04:	0800f89c 	.word	0x0800f89c
 8000d08:	0800f94c 	.word	0x0800f94c

08000d0c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <BSP_LED_Init+0x58>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <BSP_LED_Init+0x5c>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 ff2c 	bl	8004bb0 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	20000028 	.word	0x20000028
 8000d68:	20000030 	.word	0x20000030

08000d6c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <BSP_LED_Toggle+0x2c>)
 8000d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <BSP_LED_Toggle+0x30>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f004 f9f6 	bl	800517a <HAL_GPIO_TogglePin>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	20000028 	.word	0x20000028

08000da0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <BSP_PB_Init+0x9c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fedf 	bl	8004bb0 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d11d      	bne.n	8000e34 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <BSP_PB_Init+0xa4>)
 8000e06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <BSP_PB_Init+0xa0>)
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 feca 	bl	8004bb0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	210f      	movs	r1, #15
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f9b8 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 f9cf 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	20000038 	.word	0x20000038
 8000e44:	10110000 	.word	0x10110000

08000e48 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <BSP_PB_GetState+0x28>)
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 f95a 	bl	8005118 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000038 	.word	0x20000038

08000e74 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a58      	ldr	r2, [pc, #352]	; (8000fe0 <I2Cx_MspInit+0x16c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d15b      	bne.n	8000f3c <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e9c:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4845      	ldr	r0, [pc, #276]	; (8000fe8 <I2Cx_MspInit+0x174>)
 8000ed2:	f003 fe6d 	bl	8004bb0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000eda:	230b      	movs	r3, #11
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4841      	ldr	r0, [pc, #260]	; (8000fec <I2Cx_MspInit+0x178>)
 8000ee6:	f003 fe63 	bl	8004bb0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a37      	ldr	r2, [pc, #220]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f18:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	205f      	movs	r0, #95	; 0x5f
 8000f20:	f002 f93b 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f24:	205f      	movs	r0, #95	; 0x5f
 8000f26:	f002 f954 	bl	80031d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	2060      	movs	r0, #96	; 0x60
 8000f30:	f002 f933 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f34:	2060      	movs	r0, #96	; 0x60
 8000f36:	f002 f94c 	bl	80031d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000f3a:	e04d      	b.n	8000fd8 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f66:	2304      	movs	r3, #4
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <I2Cx_MspInit+0x178>)
 8000f72:	f003 fe1d 	bl	8004bb0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <I2Cx_MspInit+0x178>)
 8000f84:	f003 fe14 	bl	8004bb0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000faa:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <I2Cx_MspInit+0x170>)
 8000fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fb6:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210f      	movs	r1, #15
 8000fbc:	201f      	movs	r0, #31
 8000fbe:	f002 f8ec 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000fc2:	201f      	movs	r0, #31
 8000fc4:	f002 f905 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	210f      	movs	r1, #15
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f002 f8e4 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f002 f8fd 	bl	80031d2 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000108 	.word	0x20000108
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40020400 	.word	0x40020400

08000ff0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f004 fbf3 	bl	80057e4 <HAL_I2C_GetState>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d125      	bne.n	8001050 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <I2Cx_Init+0x68>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d103      	bne.n	8001014 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <I2Cx_Init+0x6c>)
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e002      	b.n	800101a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <I2Cx_Init+0x70>)
 8001018:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <I2Cx_Init+0x74>)
 800101e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff15 	bl	8000e74 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f004 f8c8 	bl	80051e0 <HAL_I2C_Init>
  }
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000108 	.word	0x20000108
 800105c:	40006000 	.word	0x40006000
 8001060:	40005400 	.word	0x40005400
 8001064:	40912732 	.word	0x40912732

08001068 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	72fb      	strb	r3, [r7, #11]
 800107a:	460b      	mov	r3, r1
 800107c:	813b      	strh	r3, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	b299      	uxth	r1, r3
 800108a:	88f8      	ldrh	r0, [r7, #6]
 800108c:	893a      	ldrh	r2, [r7, #8]
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f004 fa86 	bl	80055b0 <HAL_I2C_Mem_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f832 	bl	800111c <I2Cx_Error>
  }
  return status;
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b08a      	sub	sp, #40	; 0x28
 80010c6:	af04      	add	r7, sp, #16
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	72fb      	strb	r3, [r7, #11]
 80010d4:	460b      	mov	r3, r1
 80010d6:	813b      	strh	r3, [r7, #8]
 80010d8:	4613      	mov	r3, r2
 80010da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b299      	uxth	r1, r3
 80010e4:	88f8      	ldrh	r0, [r7, #6]
 80010e6:	893a      	ldrh	r2, [r7, #8]
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	4603      	mov	r3, r0
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f004 f945 	bl	8005388 <HAL_I2C_Mem_Write>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	4619      	mov	r1, r3
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f805 	bl	800111c <I2Cx_Error>
  }
  return status;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f004 f8e9 	bl	8005300 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff5e 	bl	8000ff0 <I2Cx_Init>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TS_IO_Init+0x10>)
 8001142:	f7ff ff55 	bl	8000ff0 <I2Cx_Init>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000108 	.word	0x20000108

08001150 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af02      	add	r7, sp, #8
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	b29a      	uxth	r2, r3
 8001166:	79f9      	ldrb	r1, [r7, #7]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1d7b      	adds	r3, r7, #5
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <TS_IO_Write+0x30>)
 8001174:	f7ff ffa5 	bl	80010c2 <I2Cx_WriteMultiple>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000108 	.word	0x20000108

08001184 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29a      	uxth	r2, r3
 800119c:	79f9      	ldrb	r1, [r7, #7]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 030f 	add.w	r3, r7, #15
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <TS_IO_Read+0x38>)
 80011ac:	f7ff ff5c 	bl	8001068 <I2Cx_ReadMultiple>

  return read_value;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000108 	.word	0x20000108

080011c0 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	603a      	str	r2, [r7, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	460b      	mov	r3, r1
 80011d0:	71bb      	strb	r3, [r7, #6]
 80011d2:	4613      	mov	r3, r2
 80011d4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	79f9      	ldrb	r1, [r7, #7]
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <TS_IO_ReadMultiple+0x38>)
 80011e8:	f7ff ff3e 	bl	8001068 <I2Cx_ReadMultiple>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000108 	.word	0x20000108

080011fc <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 fb8b 	bl	8002920 <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001216:	2001      	movs	r0, #1
 8001218:	f000 f804 	bl	8001224 <BSP_LCD_InitEx>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	; 0x40
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800122e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800123c:	f000 f936 	bl	80014ac <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001240:	f000 fdf4 	bl	8001e2c <LCD_IO_GetID>
 8001244:	4603      	mov	r3, r0
 8001246:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800124a:	2b11      	cmp	r3, #17
 800124c:	d001      	beq.n	8001252 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800124e:	2301      	movs	r3, #1
 8001250:	e113      	b.n	800147a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001252:	f000 fdf3 	bl	8001e3c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001256:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001258:	4a8b      	ldr	r2, [pc, #556]	; (8001488 <BSP_LCD_InitEx+0x264>)
 800125a:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 800125c:	4889      	ldr	r0, [pc, #548]	; (8001484 <BSP_LCD_InitEx+0x260>)
 800125e:	f002 fd99 	bl	8003d94 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001266:	2305      	movs	r3, #5
 8001268:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800126e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001272:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001274:	4b83      	ldr	r3, [pc, #524]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001276:	2201      	movs	r2, #1
 8001278:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	4a83      	ldr	r2, [pc, #524]	; (800148c <BSP_LCD_InitEx+0x268>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0a9b      	lsrs	r3, r3, #10
 8001286:	4a7f      	ldr	r2, [pc, #508]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001288:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	487c      	ldr	r0, [pc, #496]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001292:	f002 fc65 	bl	8003b60 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800129c:	4b7c      	ldr	r3, [pc, #496]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 800129e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012a2:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80012a4:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80012ae:	4b78      	ldr	r3, [pc, #480]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80012b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012b4:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012bc:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <BSP_LCD_InitEx+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80012ce:	230f      	movs	r3, #15
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80012d2:	2310      	movs	r3, #16
 80012d4:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80012d6:	2302      	movs	r3, #2
 80012d8:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80012da:	2322      	movs	r3, #34	; 0x22
 80012dc:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80012de:	2322      	movs	r3, #34	; 0x22
 80012e0:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001302:	2202      	movs	r2, #2
 8001304:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001308:	f640 72ff 	movw	r2, #4095	; 0xfff
 800130c:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001314:	4a60      	ldr	r2, [pc, #384]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131e:	fb02 f203 	mul.w	r2, r2, r3
 8001322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800132a:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001330:	fb02 f203 	mul.w	r2, r2, r3
 8001334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800133c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	441a      	add	r2, r3
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	441a      	add	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4413      	add	r3, r2
 800134c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800134e:	fb02 f203 	mul.w	r2, r2, r3
 8001352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001362:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001376:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800137a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800137e:	2210      	movs	r2, #16
 8001380:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001384:	2200      	movs	r2, #0
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <BSP_LCD_InitEx+0x274>)
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ae:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80013b8:	4937      	ldr	r1, [pc, #220]	; (8001498 <BSP_LCD_InitEx+0x274>)
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <BSP_LCD_InitEx+0x260>)
 80013bc:	f002 fe42 	bl	8004044 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a35      	ldr	r2, [pc, #212]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013c6:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4413      	add	r3, r2
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013d2:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	441a      	add	r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	4413      	add	r3, r2
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a2e      	ldr	r2, [pc, #184]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013e4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	441a      	add	r2, r3
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <BSP_LCD_InitEx+0x278>)
 80013fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <BSP_LCD_InitEx+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001402:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <BSP_LCD_InitEx+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <BSP_LCD_InitEx+0x278>)
 800140a:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 800140e:	2208      	movs	r2, #8
 8001410:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001414:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001418:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 800141c:	2207      	movs	r2, #7
 800141e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <BSP_LCD_InitEx+0x27c>)
 8001428:	f005 fb5a 	bl	8006ae0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <BSP_LCD_InitEx+0x278>)
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <BSP_LCD_InitEx+0x278>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <BSP_LCD_InitEx+0x278>)
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <BSP_LCD_InitEx+0x280>)
 800144e:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001450:	4911      	ldr	r1, [pc, #68]	; (8001498 <BSP_LCD_InitEx+0x274>)
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <BSP_LCD_InitEx+0x278>)
 8001454:	f004 fe98 	bl	8006188 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001458:	4810      	ldr	r0, [pc, #64]	; (800149c <BSP_LCD_InitEx+0x278>)
 800145a:	f004 fbed 	bl	8005c38 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <BSP_LCD_InitEx+0x260>)
 8001460:	f003 fa82 	bl	8004968 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001464:	f000 fe6a 	bl	800213c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <BSP_LCD_InitEx+0x284>)
 800146a:	f000 f901 	bl	8001670 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff f9f4 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3740      	adds	r7, #64	; 0x40
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000046c 	.word	0x2000046c
 8001488:	40016c00 	.word	0x40016c00
 800148c:	43215e57 	.word	0x43215e57
 8001490:	2000005c 	.word	0x2000005c
 8001494:	20000060 	.word	0x20000060
 8001498:	20000154 	.word	0x20000154
 800149c:	200003c4 	.word	0x200003c4
 80014a0:	200001dc 	.word	0x200001dc
 80014a4:	40016800 	.word	0x40016800
 80014a8:	2000003c 	.word	0x2000003c

080014ac <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <BSP_LCD_Reset+0x68>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <BSP_LCD_Reset+0x6c>)
 80014e2:	f003 fb65 	bl	8004bb0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <BSP_LCD_Reset+0x6c>)
 80014ee:	f003 fe2b 	bl	8005148 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014f2:	2014      	movs	r0, #20
 80014f4:	f001 fa14 	bl	8002920 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <BSP_LCD_Reset+0x6c>)
 8001500:	f003 fe22 	bl	8005148 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f001 fa0b 	bl	8002920 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40022400 	.word	0x40022400

0800151c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <BSP_LCD_GetXSize+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000005c 	.word	0x2000005c

08001534 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <BSP_LCD_GetYSize+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000060 	.word	0x20000060

0800154c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	; 0x40
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800155c:	f7ff ffde 	bl	800151c <BSP_LCD_GetXSize>
 8001560:	4603      	mov	r3, r0
 8001562:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001568:	f7ff ffe4 	bl	8001534 <BSP_LCD_GetYSize>
 800156c:	4603      	mov	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001578:	23ff      	movs	r3, #255	; 0xff
 800157a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001592:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001598:	2307      	movs	r3, #7
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800159c:	f7ff ffbe 	bl	800151c <BSP_LCD_GetXSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80015a4:	f7ff ffc6 	bl	8001534 <BSP_LCD_GetYSize>
 80015a8:	4603      	mov	r3, r0
 80015aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <BSP_LCD_LayerDefaultInit+0xb4>)
 80015b6:	f004 fc0f 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	4911      	ldr	r1, [pc, #68]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015d0:	88fa      	ldrh	r2, [r7, #6]
 80015d2:	490c      	ldr	r1, [pc, #48]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3308      	adds	r3, #8
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015e4:	88fa      	ldrh	r2, [r7, #6]
 80015e6:	4907      	ldr	r1, [pc, #28]	; (8001604 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3740      	adds	r7, #64	; 0x40
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200003c4 	.word	0x200003c4
 8001604:	200001c4 	.word	0x200001c4
 8001608:	2000003c 	.word	0x2000003c

0800160c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <BSP_LCD_SetTextColor+0x28>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <BSP_LCD_SetTextColor+0x2c>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	200001c0 	.word	0x200001c0
 8001638:	200001c4 	.word	0x200001c4

0800163c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <BSP_LCD_SetBackColor+0x2c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4908      	ldr	r1, [pc, #32]	; (800166c <BSP_LCD_SetBackColor+0x30>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3304      	adds	r3, #4
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200001c0 	.word	0x200001c0
 800166c:	200001c4 	.word	0x200001c4

08001670 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <BSP_LCD_SetFont+0x2c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4908      	ldr	r1, [pc, #32]	; (80016a0 <BSP_LCD_SetFont+0x30>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3308      	adds	r3, #8
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200001c0 	.word	0x200001c0
 80016a0:	200001c4 	.word	0x200001c4

080016a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <BSP_LCD_Clear+0x48>)
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <BSP_LCD_Clear+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <BSP_LCD_Clear+0x4c>)
 80016b6:	2134      	movs	r1, #52	; 0x34
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	335c      	adds	r3, #92	; 0x5c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461d      	mov	r5, r3
 80016c4:	f7ff ff2a 	bl	800151c <BSP_LCD_GetXSize>
 80016c8:	4606      	mov	r6, r0
 80016ca:	f7ff ff33 	bl	8001534 <BSP_LCD_GetYSize>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	4632      	mov	r2, r6
 80016dc:	4629      	mov	r1, r5
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 fcf4 	bl	80020cc <LL_FillBuffer>
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	200003c4 	.word	0x200003c4

080016f4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
 80016fe:	460b      	mov	r3, r1
 8001700:	80bb      	strh	r3, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	491b      	ldr	r1, [pc, #108]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3308      	adds	r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4c14      	ldr	r4, [pc, #80]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4423      	add	r3, r4
 8001732:	3308      	adds	r3, #8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001738:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <BSP_LCD_DisplayChar+0x80>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <BSP_LCD_DisplayChar+0x84>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4423      	add	r3, r4
 800174c:	3308      	adds	r3, #8
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	3307      	adds	r3, #7
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <BSP_LCD_DisplayChar+0x66>
 8001758:	3307      	adds	r3, #7
 800175a:	10db      	asrs	r3, r3, #3
 800175c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001760:	18ca      	adds	r2, r1, r3
 8001762:	88b9      	ldrh	r1, [r7, #4]
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fbf8 	bl	8001f5c <DrawChar>
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	200001c0 	.word	0x200001c0
 8001778:	200001c4 	.word	0x200001c4

0800177c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	460b      	mov	r3, r1
 800178c:	81bb      	strh	r3, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001792:	2301      	movs	r3, #1
 8001794:	83fb      	strh	r3, [r7, #30]
 8001796:	2300      	movs	r3, #0
 8001798:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80017a6:	e002      	b.n	80017ae <BSP_LCD_DisplayStringAt+0x32>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	617a      	str	r2, [r7, #20]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f6      	bne.n	80017a8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017ba:	f7ff feaf 	bl	800151c <BSP_LCD_GetXSize>
 80017be:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	494f      	ldr	r1, [pc, #316]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	889b      	ldrh	r3, [r3, #4]
 80017d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d8:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d01c      	beq.n	800181a <BSP_LCD_DisplayStringAt+0x9e>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <BSP_LCD_DisplayStringAt+0x98>
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d12e      	bne.n	8001846 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad1      	subs	r1, r2, r3
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4843      	ldr	r0, [pc, #268]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4403      	add	r3, r0
 80017fe:	3308      	adds	r3, #8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	889b      	ldrh	r3, [r3, #4]
 8001804:	fb03 f301 	mul.w	r3, r3, r1
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	4413      	add	r3, r2
 8001810:	83fb      	strh	r3, [r7, #30]
      break;
 8001812:	e01b      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	83fb      	strh	r3, [r7, #30]
      break;
 8001818:	e018      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4836      	ldr	r0, [pc, #216]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4403      	add	r3, r0
 8001832:	3308      	adds	r3, #8
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	fb11 f303 	smulbb	r3, r1, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	83fb      	strh	r3, [r7, #30]
      break;
 8001844:	e002      	b.n	800184c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	83fb      	strh	r3, [r7, #30]
      break;
 800184a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800184c:	8bfb      	ldrh	r3, [r7, #30]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <BSP_LCD_DisplayStringAt+0xde>
 8001852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da1d      	bge.n	8001896 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800185e:	e01a      	b.n	8001896 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	89b9      	ldrh	r1, [r7, #12]
 8001866:	8bfb      	ldrh	r3, [r7, #30]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff43 	bl	80016f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4923      	ldr	r1, [pc, #140]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	3308      	adds	r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	889a      	ldrh	r2, [r3, #4]
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	4413      	add	r3, r2
 8001888:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3301      	adds	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
    i++;
 8001890:	8bbb      	ldrh	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2dc      	uxtb	r4, r3
 80018a4:	f7ff fe3a 	bl	800151c <BSP_LCD_GetXSize>
 80018a8:	4605      	mov	r5, r0
 80018aa:	8bb9      	ldrh	r1, [r7, #28]
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4403      	add	r3, r0
 80018bc:	3308      	adds	r3, #8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	fb03 f301 	mul.w	r3, r3, r1
 80018c6:	1aeb      	subs	r3, r5, r3
 80018c8:	b299      	uxth	r1, r3
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <BSP_LCD_DisplayStringAt+0x180>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <BSP_LCD_DisplayStringAt+0x184>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4403      	add	r3, r0
 80018da:	3308      	adds	r3, #8
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	4299      	cmp	r1, r3
 80018e2:	bf2c      	ite	cs
 80018e4:	2301      	movcs	r3, #1
 80018e6:	2300      	movcc	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4023      	ands	r3, r4
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1b6      	bne.n	8001860 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001c0 	.word	0x200001c0
 8001900:	200001c4 	.word	0x200001c4

08001904 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <BSP_LCD_DrawHLine+0x74>)
 8001920:	2134      	movs	r1, #52	; 0x34
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	335c      	adds	r3, #92	; 0x5c
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	f7ff fdf6 	bl	800151c <BSP_LCD_GetXSize>
 8001930:	4602      	mov	r2, r0
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	fb03 f202 	mul.w	r2, r3, r2
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4423      	add	r3, r4
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	68fc      	ldr	r4, [r7, #12]
 8001948:	887d      	ldrh	r5, [r7, #2]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	490b      	ldr	r1, [pc, #44]	; (800197c <BSP_LCD_DrawHLine+0x78>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	462a      	mov	r2, r5
 8001966:	4621      	mov	r1, r4
 8001968:	f000 fbb0 	bl	80020cc <LL_FillBuffer>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	200001c0 	.word	0x200001c0
 8001978:	200003c4 	.word	0x200003c4
 800197c:	200001c4 	.word	0x200001c4

08001980 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <BSP_LCD_DrawVLine+0x7c>)
 800199c:	2134      	movs	r1, #52	; 0x34
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	335c      	adds	r3, #92	; 0x5c
 80019a6:	681c      	ldr	r4, [r3, #0]
 80019a8:	f7ff fdb8 	bl	800151c <BSP_LCD_GetXSize>
 80019ac:	4602      	mov	r2, r0
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4423      	add	r3, r4
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	68fd      	ldr	r5, [r7, #12]
 80019c4:	887e      	ldrh	r6, [r7, #2]
 80019c6:	f7ff fda9 	bl	800151c <BSP_LCD_GetXSize>
 80019ca:	4603      	mov	r3, r0
 80019cc:	1e59      	subs	r1, r3, #1
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <BSP_LCD_DrawVLine+0x80>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4403      	add	r3, r0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	4633      	mov	r3, r6
 80019e6:	2201      	movs	r2, #1
 80019e8:	4629      	mov	r1, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 fb6e 	bl	80020cc <LL_FillBuffer>
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f8:	200001c0 	.word	0x200001c0
 80019fc:	200003c4 	.word	0x200003c4
 8001a00:	200001c4 	.word	0x200001c4

08001a04 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	80bb      	strh	r3, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	f1c3 0303 	rsb	r3, r3, #3
 8001a1e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a28:	e0cf      	b.n	8001bca <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4413      	add	r3, r2
 8001a32:	b298      	uxth	r0, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b29c      	uxth	r4, r3
 8001a3e:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4967      	ldr	r1, [pc, #412]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4621      	mov	r1, r4
 8001a54:	f000 fa5c 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b298      	uxth	r0, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	88ba      	ldrh	r2, [r7, #4]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b29c      	uxth	r4, r3
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	495b      	ldr	r1, [pc, #364]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	f000 fa45 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b298      	uxth	r0, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29c      	uxth	r4, r3
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4950      	ldr	r1, [pc, #320]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4621      	mov	r1, r4
 8001ab0:	f000 fa2e 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b298      	uxth	r0, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	88ba      	ldrh	r2, [r7, #4]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b29c      	uxth	r4, r3
 8001ac8:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4944      	ldr	r1, [pc, #272]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4621      	mov	r1, r4
 8001ade:	f000 fa17 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b298      	uxth	r0, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	88bb      	ldrh	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	b29c      	uxth	r4, r3
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4939      	ldr	r1, [pc, #228]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	f000 fa00 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b298      	uxth	r0, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	b29c      	uxth	r4, r3
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	492d      	ldr	r1, [pc, #180]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f000 f9e9 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4413      	add	r3, r2
 8001b46:	b298      	uxth	r0, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29c      	uxth	r4, r3
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4922      	ldr	r1, [pc, #136]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4621      	mov	r1, r4
 8001b68:	f000 f9d2 	bl	8001f10 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b298      	uxth	r0, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <BSP_LCD_DrawCircle+0x1d8>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4916      	ldr	r1, [pc, #88]	; (8001be0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4621      	mov	r1, r4
 8001b96:	f000 f9bb 	bl	8001f10 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da06      	bge.n	8001bae <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3306      	adds	r3, #6
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4413      	add	r3, r2
 8001bba:	330a      	adds	r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]
      CurY--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	f67f af2b 	bls.w	8001a2a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	200001c0 	.word	0x200001c0
 8001be0:	200001c4 	.word	0x200001c4

08001be4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af02      	add	r7, sp, #8
 8001bec:	4604      	mov	r4, r0
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	80fb      	strh	r3, [r7, #6]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	80bb      	strh	r3, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <BSP_LCD_FillRect+0xa8>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4920      	ldr	r1, [pc, #128]	; (8001c90 <BSP_LCD_FillRect+0xac>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fcf6 	bl	800160c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <BSP_LCD_FillRect+0xa8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <BSP_LCD_FillRect+0xb0>)
 8001c26:	2134      	movs	r1, #52	; 0x34
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	335c      	adds	r3, #92	; 0x5c
 8001c30:	681c      	ldr	r4, [r3, #0]
 8001c32:	f7ff fc73 	bl	800151c <BSP_LCD_GetXSize>
 8001c36:	4602      	mov	r2, r0
 8001c38:	88bb      	ldrh	r3, [r7, #4]
 8001c3a:	fb03 f202 	mul.w	r2, r3, r2
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4423      	add	r3, r4
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <BSP_LCD_FillRect+0xa8>)
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	68fd      	ldr	r5, [r7, #12]
 8001c4e:	887e      	ldrh	r6, [r7, #2]
 8001c50:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c54:	f7ff fc62 	bl	800151c <BSP_LCD_GetXSize>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	1ad1      	subs	r1, r2, r3
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <BSP_LCD_FillRect+0xa8>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <BSP_LCD_FillRect+0xac>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4403      	add	r3, r0
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	9100      	str	r1, [sp, #0]
 8001c74:	4643      	mov	r3, r8
 8001c76:	4632      	mov	r2, r6
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f000 fa26 	bl	80020cc <LL_FillBuffer>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001c0 	.word	0x200001c0
 8001c90:	200001c4 	.word	0x200001c4
 8001c94:	200003c4 	.word	0x200003c4

08001c98 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	80bb      	strh	r3, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	f1c3 0303 	rsb	r3, r3, #3
 8001cb2:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <BSP_LCD_FillCircle+0x138>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4944      	ldr	r1, [pc, #272]	; (8001dd4 <BSP_LCD_FillCircle+0x13c>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fc9c 	bl	800160c <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001cd4:	e061      	b.n	8001d9a <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d021      	beq.n	8001d20 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	88bb      	ldrh	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f7ff fe03 	bl	8001904 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b298      	uxth	r0, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	88ba      	ldrh	r2, [r7, #4]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	b299      	uxth	r1, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7ff fdf2 	bl	8001904 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d021      	beq.n	8001d6a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	88ba      	ldrh	r2, [r7, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff fdde 	bl	8001904 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b298      	uxth	r0, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b299      	uxth	r1, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	f7ff fdcd 	bl	8001904 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da06      	bge.n	8001d7e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	009a      	lsls	r2, r3, #2
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4413      	add	r3, r2
 8001d78:	3306      	adds	r3, #6
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	4413      	add	r3, r2
 8001d8a:	330a      	adds	r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3301      	adds	r3, #1
 8001d98:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d999      	bls.n	8001cd6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <BSP_LCD_FillCircle+0x138>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <BSP_LCD_FillCircle+0x13c>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc29 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	88b9      	ldrh	r1, [r7, #4]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe1f 	bl	8001a04 <BSP_LCD_DrawCircle>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200001c0 	.word	0x200001c0
 8001dd4:	200001c4 	.word	0x200001c4

08001dd8 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d80d      	bhi.n	8001e04 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	2215      	movs	r2, #21
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	480a      	ldr	r0, [pc, #40]	; (8001e28 <DSI_IO_WriteCmd+0x50>)
 8001dfe:	f002 fdef 	bl	80049e0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e02:	e00d      	b.n	8001e20 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2239      	movs	r2, #57	; 0x39
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <DSI_IO_WriteCmd+0x50>)
 8001e1c:	f002 fe02 	bl	8004a24 <HAL_DSI_LongWrite>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000046c 	.word	0x2000046c

08001e2c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e30:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e42:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e70:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e94:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ea0:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ec0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ec4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <BSP_LCD_MspInit+0xd0>)
 8001ecc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ed0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	2058      	movs	r0, #88	; 0x58
 8001ed8:	f001 f95f 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001edc:	2058      	movs	r0, #88	; 0x58
 8001ede:	f001 f978 	bl	80031d2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	205a      	movs	r0, #90	; 0x5a
 8001ee8:	f001 f957 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001eec:	205a      	movs	r0, #90	; 0x5a
 8001eee:	f001 f970 	bl	80031d2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	2062      	movs	r0, #98	; 0x62
 8001ef8:	f001 f94f 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001efc:	2062      	movs	r0, #98	; 0x62
 8001efe:	f001 f968 	bl	80031d2 <HAL_NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	603a      	str	r2, [r7, #0]
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <BSP_LCD_DrawPixel+0x44>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <BSP_LCD_DrawPixel+0x48>)
 8001f26:	2134      	movs	r1, #52	; 0x34
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	335c      	adds	r3, #92	; 0x5c
 8001f30:	681c      	ldr	r4, [r3, #0]
 8001f32:	88bd      	ldrh	r5, [r7, #4]
 8001f34:	f7ff faf2 	bl	800151c <BSP_LCD_GetXSize>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	fb03 f205 	mul.w	r2, r3, r5
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4423      	add	r3, r4
 8001f46:	461a      	mov	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdb0      	pop	{r4, r5, r7, pc}
 8001f54:	200001c0 	.word	0x200001c0
 8001f58:	200003c4 	.word	0x200003c4

08001f5c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	603a      	str	r2, [r7, #0]
 8001f66:	80fb      	strh	r3, [r7, #6]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <DrawChar+0x168>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4953      	ldr	r1, [pc, #332]	; (80020c8 <DrawChar+0x16c>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3308      	adds	r3, #8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	88db      	ldrh	r3, [r3, #6]
 8001f8a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <DrawChar+0x168>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <DrawChar+0x16c>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	889b      	ldrh	r3, [r3, #4]
 8001fa2:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001fa4:	8a3b      	ldrh	r3, [r7, #16]
 8001fa6:	3307      	adds	r3, #7
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da00      	bge.n	8001fae <DrawChar+0x52>
 8001fac:	3307      	adds	r3, #7
 8001fae:	10db      	asrs	r3, r3, #3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8a3b      	ldrh	r3, [r7, #16]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e076      	b.n	80020b2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001fc4:	8a3b      	ldrh	r3, [r7, #16]
 8001fc6:	3307      	adds	r3, #7
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da00      	bge.n	8001fce <DrawChar+0x72>
 8001fcc:	3307      	adds	r3, #7
 8001fce:	10db      	asrs	r3, r3, #3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fb03 f302 	mul.w	r3, r3, r2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001fde:	8a3b      	ldrh	r3, [r7, #16]
 8001fe0:	3307      	adds	r3, #7
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da00      	bge.n	8001fe8 <DrawChar+0x8c>
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	10db      	asrs	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d002      	beq.n	8001ff4 <DrawChar+0x98>
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d004      	beq.n	8001ffc <DrawChar+0xa0>
 8001ff2:	e00c      	b.n	800200e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	e016      	b.n	800202a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	3201      	adds	r2, #1
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
      break;
 800200c:	e00d      	b.n	800202a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	041a      	lsls	r2, r3, #16
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3301      	adds	r3, #1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4313      	orrs	r3, r2
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	3202      	adds	r2, #2
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
      break;
 8002028:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e036      	b.n	800209e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002030:	8a3a      	ldrh	r2, [r7, #16]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad2      	subs	r2, r2, r3
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4413      	add	r3, r2
 800203a:	3b01      	subs	r3, #1
 800203c:	2201      	movs	r2, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	461a      	mov	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	b29a      	uxth	r2, r3
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	4413      	add	r3, r2
 8002054:	b298      	uxth	r0, r3
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <DrawChar+0x168>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <DrawChar+0x16c>)
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	4619      	mov	r1, r3
 800206c:	f7ff ff50 	bl	8001f10 <BSP_LCD_DrawPixel>
 8002070:	e012      	b.n	8002098 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	b29a      	uxth	r2, r3
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4413      	add	r3, r2
 800207a:	b298      	uxth	r0, r3
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <DrawChar+0x168>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4911      	ldr	r1, [pc, #68]	; (80020c8 <DrawChar+0x16c>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3304      	adds	r3, #4
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	4619      	mov	r1, r3
 8002094:	f7ff ff3c 	bl	8001f10 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	3301      	adds	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	8a3b      	ldrh	r3, [r7, #16]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3c4      	bcc.n	8002030 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80020a6:	88bb      	ldrh	r3, [r7, #4]
 80020a8:	3301      	adds	r3, #1
 80020aa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3301      	adds	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	8a7b      	ldrh	r3, [r7, #18]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d384      	bcc.n	8001fc4 <DrawChar+0x68>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200001c0 	.word	0x200001c0
 80020c8:	200001c4 	.word	0x200001c4

080020cc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <LL_FillBuffer+0x68>)
 80020dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020e0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <LL_FillBuffer+0x68>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80020e8:	4a12      	ldr	r2, [pc, #72]	; (8002134 <LL_FillBuffer+0x68>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <LL_FillBuffer+0x68>)
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <LL_FillBuffer+0x6c>)
 80020f2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80020f4:	480f      	ldr	r0, [pc, #60]	; (8002134 <LL_FillBuffer+0x68>)
 80020f6:	f001 fa43 	bl	8003580 <HAL_DMA2D_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d115      	bne.n	800212c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	480c      	ldr	r0, [pc, #48]	; (8002134 <LL_FillBuffer+0x68>)
 8002104:	f001 fbaa 	bl	800385c <HAL_DMA2D_ConfigLayer>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10e      	bne.n	800212c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69f9      	ldr	r1, [r7, #28]
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <LL_FillBuffer+0x68>)
 800211a:	f001 fa8b 	bl	8003634 <HAL_DMA2D_Start>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002124:	210a      	movs	r1, #10
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <LL_FillBuffer+0x68>)
 8002128:	f001 faaf 	bl	800368a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000036c 	.word	0x2000036c
 8002138:	4002b000 	.word	0x4002b000

0800213c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002142:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <BSP_SDRAM_Init+0xb0>)
 8002144:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 800214e:	2207      	movs	r2, #7
 8002150:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 8002154:	2204      	movs	r2, #4
 8002156:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 800215a:	2207      	movs	r2, #7
 800215c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 8002160:	2202      	movs	r2, #2
 8002162:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 8002166:	2202      	movs	r2, #2
 8002168:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 800216c:	2202      	movs	r2, #2
 800216e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 800217e:	2204      	movs	r2, #4
 8002180:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002184:	2220      	movs	r2, #32
 8002186:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002190:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002194:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 800219e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 80021a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80021b2:	2100      	movs	r1, #0
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 80021b6:	f000 f87f 	bl	80022b8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <BSP_SDRAM_Init+0xb4>)
 80021bc:	480a      	ldr	r0, [pc, #40]	; (80021e8 <BSP_SDRAM_Init+0xac>)
 80021be:	f006 fa34 	bl	800862a <HAL_SDRAM_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <BSP_SDRAM_Init+0xb8>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e002      	b.n	80021d6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <BSP_SDRAM_Init+0xb8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021d6:	f240 6003 	movw	r0, #1539	; 0x603
 80021da:	f000 f80d 	bl	80021f8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <BSP_SDRAM_Init+0xb8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000488 	.word	0x20000488
 80021ec:	a0000140 	.word	0xa0000140
 80021f0:	2000026c 	.word	0x2000026c
 80021f4:	20000064 	.word	0x20000064

080021f8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800220c:	2210      	movs	r2, #16
 800220e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002212:	2201      	movs	r2, #1
 8002214:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	4923      	ldr	r1, [pc, #140]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002222:	4824      	ldr	r0, [pc, #144]	; (80022b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002224:	f006 fa35 	bl	8008692 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002228:	2001      	movs	r0, #1
 800222a:	f000 fb79 	bl	8002920 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002236:	2210      	movs	r2, #16
 8002238:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223c:	2201      	movs	r2, #1
 800223e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	4919      	ldr	r1, [pc, #100]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224c:	4819      	ldr	r0, [pc, #100]	; (80022b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800224e:	f006 fa20 	bl	8008692 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002254:	2203      	movs	r2, #3
 8002256:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225a:	2210      	movs	r2, #16
 800225c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002260:	2208      	movs	r2, #8
 8002262:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800226a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226e:	4910      	ldr	r1, [pc, #64]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002272:	f006 fa0e 	bl	8008692 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002276:	f44f 730c 	mov.w	r3, #560	; 0x230
 800227a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227e:	2204      	movs	r2, #4
 8002280:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002284:	2210      	movs	r2, #16
 8002286:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228a:	2201      	movs	r2, #1
 800228c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002292:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002298:	4905      	ldr	r1, [pc, #20]	; (80022b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800229c:	f006 f9f9 	bl	8008692 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4804      	ldr	r0, [pc, #16]	; (80022b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022a4:	f006 fa20 	bl	80086e8 <HAL_SDRAM_ProgramRefreshRate>
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000288 	.word	0x20000288
 80022b4:	20000488 	.word	0x20000488

080022b8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b090      	sub	sp, #64	; 0x40
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022c2:	4b71      	ldr	r3, [pc, #452]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a70      	ldr	r2, [pc, #448]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6393      	str	r3, [r2, #56]	; 0x38
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80022da:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b68      	ldr	r3, [pc, #416]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a64      	ldr	r2, [pc, #400]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002310:	f043 0310 	orr.w	r3, r3, #16
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	4b59      	ldr	r3, [pc, #356]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a58      	ldr	r2, [pc, #352]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233a:	4b53      	ldr	r3, [pc, #332]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a52      	ldr	r2, [pc, #328]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b50      	ldr	r3, [pc, #320]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002352:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <BSP_SDRAM_MspInit+0x1d0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002386:	2301      	movs	r3, #1
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800238e:	230c      	movs	r3, #12
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002392:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239c:	4619      	mov	r1, r3
 800239e:	483b      	ldr	r0, [pc, #236]	; (800248c <BSP_SDRAM_MspInit+0x1d4>)
 80023a0:	f002 fc06 	bl	8004bb0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	4619      	mov	r1, r3
 80023b0:	4837      	ldr	r0, [pc, #220]	; (8002490 <BSP_SDRAM_MspInit+0x1d8>)
 80023b2:	f002 fbfd 	bl	8004bb0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4834      	ldr	r0, [pc, #208]	; (8002494 <BSP_SDRAM_MspInit+0x1dc>)
 80023c4:	f002 fbf4 	bl	8004bb0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80023c8:	f248 1337 	movw	r3, #33079	; 0x8137
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d2:	4619      	mov	r1, r3
 80023d4:	4830      	ldr	r0, [pc, #192]	; (8002498 <BSP_SDRAM_MspInit+0x1e0>)
 80023d6:	f002 fbeb 	bl	8004bb0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80023da:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80023e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e4:	4619      	mov	r1, r3
 80023e6:	482d      	ldr	r0, [pc, #180]	; (800249c <BSP_SDRAM_MspInit+0x1e4>)
 80023e8:	f002 fbe2 	bl	8004bb0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80023ec:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80023f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f6:	4619      	mov	r1, r3
 80023f8:	4829      	ldr	r0, [pc, #164]	; (80024a0 <BSP_SDRAM_MspInit+0x1e8>)
 80023fa:	f002 fbd9 	bl	8004bb0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800240c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002410:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002418:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800241c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002420:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002428:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002436:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002440:	2203      	movs	r2, #3
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002446:	2200      	movs	r2, #0
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <BSP_SDRAM_MspInit+0x1f0>)
 8002454:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002462:	4810      	ldr	r0, [pc, #64]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 8002464:	f000 ff7e 	bl	8003364 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002468:	480e      	ldr	r0, [pc, #56]	; (80024a4 <BSP_SDRAM_MspInit+0x1ec>)
 800246a:	f000 fecd 	bl	8003208 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	210f      	movs	r1, #15
 8002472:	2038      	movs	r0, #56	; 0x38
 8002474:	f000 fe91 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002478:	2038      	movs	r0, #56	; 0x38
 800247a:	f000 feaa 	bl	80031d2 <HAL_NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3740      	adds	r7, #64	; 0x40
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40021c00 	.word	0x40021c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	20000298 	.word	0x20000298
 80024a8:	40026410 	.word	0x40026410

080024ac <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	460a      	mov	r2, r1
 80024b6:	80fb      	strh	r3, [r7, #6]
 80024b8:	4613      	mov	r3, r2
 80024ba:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <BSP_TS_Init+0xb0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a25      	ldr	r2, [pc, #148]	; (8002560 <BSP_TS_Init+0xb4>)
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	b292      	uxth	r2, r2
 80024ce:	4610      	mov	r0, r2
 80024d0:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <BSP_TS_Init+0xb0>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2054      	movs	r0, #84	; 0x54
 80024d8:	4798      	blx	r3
 80024da:	4603      	mov	r3, r0
 80024dc:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	2b11      	cmp	r3, #17
 80024e2:	d009      	beq.n	80024f8 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <BSP_TS_Init+0xb0>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2070      	movs	r0, #112	; 0x70
 80024ea:	4798      	blx	r3
 80024ec:	4603      	mov	r3, r0
 80024ee:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <BSP_TS_Init+0xb4>)
 80024f2:	2270      	movs	r2, #112	; 0x70
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e002      	b.n	80024fe <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <BSP_TS_Init+0xb4>)
 80024fa:	2254      	movs	r2, #84	; 0x54
 80024fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	2b11      	cmp	r3, #17
 8002502:	d002      	beq.n	800250a <BSP_TS_Init+0x5e>
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	2b11      	cmp	r3, #17
 8002508:	d121      	bne.n	800254e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <BSP_TS_Init+0xb8>)
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <BSP_TS_Init+0xb0>)
 800250e:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d203      	bcs.n	8002520 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <BSP_TS_Init+0xbc>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e002      	b.n	8002526 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <BSP_TS_Init+0xbc>)
 8002522:	220c      	movs	r2, #12
 8002524:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d112      	bne.n	8002552 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <BSP_TS_Init+0xb8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <BSP_TS_Init+0xb4>)
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	b292      	uxth	r2, r2
 8002538:	4610      	mov	r0, r2
 800253a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <BSP_TS_Init+0xb8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <BSP_TS_Init+0xb4>)
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	b292      	uxth	r2, r2
 8002548:	4610      	mov	r0, r2
 800254a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800254c:	e001      	b.n	8002552 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000000 	.word	0x20000000
 8002560:	200002fd 	.word	0x200002fd
 8002564:	200002f8 	.word	0x200002f8
 8002568:	200002fc 	.word	0x200002fc

0800256c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8002576:	f000 f94f 	bl	8002818 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800257a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257e:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002580:	2301      	movs	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002584:	2302      	movs	r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <BSP_TS_ITConfig+0x54>)
 800258a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800258c:	463b      	mov	r3, r7
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <BSP_TS_ITConfig+0x58>)
 8002592:	f002 fb0d 	bl	8004bb0 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	2028      	movs	r0, #40	; 0x28
 800259c:	f000 fdfd 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80025a0:	2028      	movs	r0, #40	; 0x28
 80025a2:	f000 fe16 	bl	80031d2 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <BSP_TS_ITConfig+0x5c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <BSP_TS_ITConfig+0x60>)
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	4610      	mov	r0, r2
 80025b4:	4798      	blx	r3

  return (ts_status);
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	10210000 	.word	0x10210000
 80025c4:	40022000 	.word	0x40022000
 80025c8:	200002f8 	.word	0x200002f8
 80025cc:	200002fd 	.word	0x200002fd

080025d0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80025dc:	4b89      	ldr	r3, [pc, #548]	; (8002804 <BSP_TS_GetState+0x234>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a89      	ldr	r2, [pc, #548]	; (8002808 <BSP_TS_GetState+0x238>)
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	b292      	uxth	r2, r2
 80025e8:	4610      	mov	r0, r2
 80025ea:	4798      	blx	r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80fe 	beq.w	80027fa <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e0f3      	b.n	80027ec <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002604:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <BSP_TS_GetState+0x234>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <BSP_TS_GetState+0x238>)
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	b290      	uxth	r0, r2
 8002610:	f107 0110 	add.w	r1, r7, #16
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	0052      	lsls	r2, r2, #1
 8002618:	188c      	adds	r4, r1, r2
 800261a:	f107 010c 	add.w	r1, r7, #12
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	0052      	lsls	r2, r2, #1
 8002622:	440a      	add	r2, r1
 8002624:	4621      	mov	r1, r4
 8002626:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002628:	4b78      	ldr	r3, [pc, #480]	; (800280c <BSP_TS_GetState+0x23c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01d      	beq.n	8002670 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	f107 0220 	add.w	r2, r7, #32
 800263c:	4413      	add	r3, r2
 800263e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002642:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	f107 0220 	add.w	r2, r7, #32
 800264c:	4413      	add	r3, r2
 800264e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	f107 0120 	add.w	r1, r7, #32
 800265a:	440b      	add	r3, r1
 800265c:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	f107 0220 	add.w	r2, r7, #32
 8002668:	4413      	add	r3, r2
 800266a:	8b3a      	ldrh	r2, [r7, #24]
 800266c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002670:	4b66      	ldr	r3, [pc, #408]	; (800280c <BSP_TS_GetState+0x23c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d011      	beq.n	80026a0 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	f107 0220 	add.w	r2, r7, #32
 8002684:	4413      	add	r3, r2
 8002686:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800268a:	f240 331f 	movw	r3, #799	; 0x31f
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	b29a      	uxth	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	f107 0120 	add.w	r1, r7, #32
 800269a:	440b      	add	r3, r1
 800269c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <BSP_TS_GetState+0x23c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d011      	beq.n	80026d0 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	f107 0220 	add.w	r2, r7, #32
 80026b4:	4413      	add	r3, r2
 80026b6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026ba:	f240 13df 	movw	r3, #479	; 0x1df
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	f107 0120 	add.w	r1, r7, #32
 80026ca:	440b      	add	r3, r1
 80026cc:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	f107 0220 	add.w	r2, r7, #32
 80026d8:	4413      	add	r3, r2
 80026da:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026de:	4619      	mov	r1, r3
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <BSP_TS_GetState+0x240>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	4299      	cmp	r1, r3
 80026ea:	d90e      	bls.n	800270a <BSP_TS_GetState+0x13a>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	f107 0220 	add.w	r2, r7, #32
 80026f4:	4413      	add	r3, r2
 80026f6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026fa:	4945      	ldr	r1, [pc, #276]	; (8002810 <BSP_TS_GetState+0x240>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002702:	b29b      	uxth	r3, r3
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	e00d      	b.n	8002726 <BSP_TS_GetState+0x156>
 800270a:	4a41      	ldr	r2, [pc, #260]	; (8002810 <BSP_TS_GetState+0x240>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	b29a      	uxth	r2, r3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f107 0120 	add.w	r1, r7, #32
 800271c:	440b      	add	r3, r1
 800271e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	f107 0220 	add.w	r2, r7, #32
 8002730:	4413      	add	r3, r2
 8002732:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002736:	4619      	mov	r1, r3
 8002738:	4a36      	ldr	r2, [pc, #216]	; (8002814 <BSP_TS_GetState+0x244>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	4299      	cmp	r1, r3
 8002742:	d90e      	bls.n	8002762 <BSP_TS_GetState+0x192>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	f107 0220 	add.w	r2, r7, #32
 800274c:	4413      	add	r3, r2
 800274e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002752:	4930      	ldr	r1, [pc, #192]	; (8002814 <BSP_TS_GetState+0x244>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800275a:	b29b      	uxth	r3, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	e00d      	b.n	800277e <BSP_TS_GetState+0x1ae>
 8002762:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <BSP_TS_GetState+0x244>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	b29a      	uxth	r2, r3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f107 0120 	add.w	r1, r7, #32
 8002774:	440b      	add	r3, r1
 8002776:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002780:	8afa      	ldrh	r2, [r7, #22]
 8002782:	8abb      	ldrh	r3, [r7, #20]
 8002784:	4413      	add	r3, r2
 8002786:	2b05      	cmp	r3, #5
 8002788:	dd17      	ble.n	80027ba <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	f107 0220 	add.w	r2, r7, #32
 8002792:	4413      	add	r3, r2
 8002794:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002798:	4619      	mov	r1, r3
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <BSP_TS_GetState+0x240>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	f107 0220 	add.w	r2, r7, #32
 80027aa:	4413      	add	r3, r2
 80027ac:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <BSP_TS_GetState+0x244>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <BSP_TS_GetState+0x240>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	b299      	uxth	r1, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	460a      	mov	r2, r1
 80027ce:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <BSP_TS_GetState+0x244>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	b299      	uxth	r1, r3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	460a      	mov	r2, r1
 80027e4:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f4ff af05 	bcc.w	8002604 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80027fa:	7efb      	ldrb	r3, [r7, #27]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	200002f8 	.word	0x200002f8
 8002808:	200002fd 	.word	0x200002fd
 800280c:	200002fc 	.word	0x200002fc
 8002810:	20000300 	.word	0x20000300
 8002814:	20000308 	.word	0x20000308

08002818 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <BSP_TS_INT_MspInit+0x44>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a0e      	ldr	r2, [pc, #56]	; (800285c <BSP_TS_INT_MspInit+0x44>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <BSP_TS_INT_MspInit+0x44>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8002836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283a:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002840:	2301      	movs	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <BSP_TS_INT_MspInit+0x48>)
 800284e:	f002 f9af 	bl	8004bb0 <HAL_GPIO_Init>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 fc8b 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	2000      	movs	r0, #0
 8002870:	f000 f806 	bl	8002880 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f00b fef6 	bl	800e664 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x54>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x58>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fca5 	bl	80031ee <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 fc6d 	bl	800319a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_InitTick+0x5c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000007c 	.word	0x2000007c
 80028d8:	2000006c 	.word	0x2000006c
 80028dc:	20000068 	.word	0x20000068

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	2000006c 	.word	0x2000006c
 8002904:	200004bc 	.word	0x200004bc

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	200004bc 	.word	0x200004bc

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff ffee 	bl	8002908 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_Delay+0x40>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffde 	bl	8002908 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000006c 	.word	0x2000006c

08002964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e031      	b.n	80029de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f00b fe92 	bl	800e6ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_ADC_Init+0x84>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa1c 	bl	8002df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	ffffeefd 	.word	0xffffeefd

080029ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_Start+0x1a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0a0      	b.n	8002b48 <HAL_ADC_Start+0x15c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d018      	beq.n	8002a4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_ADC_Start+0x168>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_ADC_Start+0x16c>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0c9a      	lsrs	r2, r3, #18
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a40:	e002      	b.n	8002a48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f9      	bne.n	8002a42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d174      	bne.n	8002b46 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a60:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_ADC_Start+0x170>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f023 0206 	bic.w	r2, r3, #6
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002abc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_ADC_Start+0x174>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d136      	bne.n	8002b46 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e02d      	b.n	8002b46 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_ADC_Start+0x178>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10e      	bne.n	8002b12 <HAL_ADC_Start+0x126>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b10:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_ADC_Start+0x174>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_ADC_Start+0x17c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10e      	bne.n	8002b46 <HAL_ADC_Start+0x15a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b44:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	2000007c 	.word	0x2000007c
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	fffff8fe 	.word	0xfffff8fe
 8002b60:	40012300 	.word	0x40012300
 8002b64:	40012000 	.word	0x40012000
 8002b68:	40012200 	.word	0x40012200

08002b6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e115      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x248>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d935      	bls.n	8002c20 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68d9      	ldr	r1, [r3, #12]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_ADC_ConfigChannel+0x254>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10a      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	061a      	lsls	r2, r3, #24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	e035      	b.n	8002c66 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68d9      	ldr	r1, [r3, #12]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4403      	add	r3, r0
 8002c12:	3b1e      	subs	r3, #30
 8002c14:	409a      	lsls	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	e022      	b.n	8002c66 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6919      	ldr	r1, [r3, #16]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	2207      	movs	r2, #7
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	400a      	ands	r2, r1
 8002c42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6919      	ldr	r1, [r3, #16]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4618      	mov	r0, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4403      	add	r3, r0
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d824      	bhi.n	8002cb8 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b05      	subs	r3, #5
 8002c80:	221f      	movs	r2, #31
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb6:	e04c      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d824      	bhi.n	8002d0a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b23      	subs	r3, #35	; 0x23
 8002cd2:	221f      	movs	r2, #31
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	400a      	ands	r2, r1
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b23      	subs	r3, #35	; 0x23
 8002cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
 8002d08:	e023      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b41      	subs	r3, #65	; 0x41
 8002d1c:	221f      	movs	r2, #31
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	400a      	ands	r2, r1
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	3b41      	subs	r3, #65	; 0x41
 8002d46:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_ADC_ConfigChannel+0x258>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d109      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1e8>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b12      	cmp	r3, #18
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d6e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_ADC_ConfigChannel+0x258>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d125      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23e>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_ADC_ConfigChannel+0x254>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x204>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d11c      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d96:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_ADC_ConfigChannel+0x254>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d111      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_ADC_ConfigChannel+0x260>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_ADC_ConfigChannel+0x264>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	0c9a      	lsrs	r2, r3, #18
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	10000012 	.word	0x10000012
 8002de0:	40012000 	.word	0x40012000
 8002de4:	40012300 	.word	0x40012300
 8002de8:	2000007c 	.word	0x2000007c
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002df8:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <ADC_Init+0x1ec>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a77      	ldr	r2, [pc, #476]	; (8002fdc <ADC_Init+0x1ec>)
 8002dfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e04:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <ADC_Init+0x1ec>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4973      	ldr	r1, [pc, #460]	; (8002fdc <ADC_Init+0x1ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <ADC_Init+0x1f0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e00f      	b.n	8002eea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0202 	bic.w	r2, r2, #2
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	005a      	lsls	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	3b01      	subs	r3, #1
 8002f44:	035a      	lsls	r2, r3, #13
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	051a      	lsls	r2, r3, #20
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fa2:	025a      	lsls	r2, r3, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	029a      	lsls	r2, r3, #10
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	0f000001 	.word	0x0f000001

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	05fa0000 	.word	0x05fa0000

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	; (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ac:	f7ff ff3e 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff ff8e 	bl	80030d8 <NVIC_EncodePriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff5d 	bl	8003084 <__NVIC_SetPriority>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff31 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffa2 	bl	8003140 <SysTick_Config>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff fb78 	bl	8002908 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e099      	b.n	8003358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003244:	e00f      	b.n	8003266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003246:	f7ff fb5f 	bl	8002908 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d908      	bls.n	8003266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e078      	b.n	8003358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e8      	bne.n	8003246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4b38      	ldr	r3, [pc, #224]	; (8003360 <HAL_DMA_Init+0x158>)
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4313      	orrs	r3, r2
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0307 	bic.w	r3, r3, #7
 80032e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d117      	bne.n	800332a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8bd 	bl	800348c <DMA_CheckFifoParam>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2240      	movs	r2, #64	; 0x40
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003326:	2301      	movs	r3, #1
 8003328:	e016      	b.n	8003358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f874 	bl	8003420 <DMA_CalcBaseAndBitshift>
 8003338:	4603      	mov	r3, r0
 800333a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	223f      	movs	r2, #63	; 0x3f
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	e010803f 	.word	0xe010803f

08003364 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e050      	b.n	8003418 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d101      	bne.n	8003386 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	e048      	b.n	8003418 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f82a 	bl	8003420 <DMA_CalcBaseAndBitshift>
 80033cc:	4603      	mov	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3b10      	subs	r3, #16
 8003430:	4a13      	ldr	r2, [pc, #76]	; (8003480 <DMA_CalcBaseAndBitshift+0x60>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <DMA_CalcBaseAndBitshift+0x64>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d908      	bls.n	8003460 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <DMA_CalcBaseAndBitshift+0x68>)
 8003456:	4013      	ands	r3, r2
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	659a      	str	r2, [r3, #88]	; 0x58
 800345e:	e006      	b.n	800346e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <DMA_CalcBaseAndBitshift+0x68>)
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	aaaaaaab 	.word	0xaaaaaaab
 8003484:	0801334c 	.word	0x0801334c
 8003488:	fffffc00 	.word	0xfffffc00

0800348c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11f      	bne.n	80034e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d855      	bhi.n	8003558 <DMA_CheckFifoParam+0xcc>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <DMA_CheckFifoParam+0x28>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034c5 	.word	0x080034c5
 80034c0:	08003559 	.word	0x08003559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d045      	beq.n	800355c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d4:	e042      	b.n	800355c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034de:	d13f      	bne.n	8003560 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e03c      	b.n	8003560 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ee:	d121      	bne.n	8003534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d836      	bhi.n	8003564 <DMA_CheckFifoParam+0xd8>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <DMA_CheckFifoParam+0x70>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	08003513 	.word	0x08003513
 8003504:	0800350d 	.word	0x0800350d
 8003508:	08003525 	.word	0x08003525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e02f      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003522:	e021      	b.n	8003568 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800352c:	d11e      	bne.n	800356c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003532:	e01b      	b.n	800356c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <DMA_CheckFifoParam+0xb4>
 800353a:	2b03      	cmp	r3, #3
 800353c:	d003      	beq.n	8003546 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800353e:	e018      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e015      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      break;
 8003556:	e00b      	b.n	8003570 <DMA_CheckFifoParam+0xe4>
      break;
 8003558:	bf00      	nop
 800355a:	e00a      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 800355c:	bf00      	nop
 800355e:	e008      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 8003560:	bf00      	nop
 8003562:	e006      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;   
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <DMA_CheckFifoParam+0xe6>
      break;
 8003570:	bf00      	nop
    }
  } 
  
  return status; 
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e049      	b.n	8003626 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f00b f8a0 	bl	800e6ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	f023 0107 	bic.w	r1, r3, #7
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_DMA2D_Init+0xb0>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68d1      	ldr	r1, [r2, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	430b      	orrs	r3, r1
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	051a      	lsls	r2, r3, #20
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	055b      	lsls	r3, r3, #21
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	ffffc000 	.word	0xffffc000

08003634 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA2D_Start+0x1c>
 800364c:	2302      	movs	r3, #2
 800364e:	e018      	b.n	8003682 <HAL_DMA2D_Start+0x4e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f994 	bl	8003998 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d056      	beq.n	8003754 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80036a6:	f7ff f92f 	bl	8002908 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036ac:	e04b      	b.n	8003746 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0202 	orr.w	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2221      	movs	r2, #33	; 0x21
 80036f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2204      	movs	r2, #4
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0a5      	b.n	8003854 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d01a      	beq.n	8003746 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003710:	f7ff f8fa 	bl	8002908 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <HAL_DMA2D_PollForTransfer+0x9c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e086      	b.n	8003854 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ac      	beq.n	80036ae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d061      	beq.n	800383a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003776:	f7ff f8c7 	bl	8002908 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800377c:	e056      	b.n	800382c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02e      	beq.n	80037ee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0202 	orr.w	r2, r3, #2
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2229      	movs	r2, #41	; 0x29
 80037d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e032      	b.n	8003854 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d01a      	beq.n	800382c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80037f6:	f7ff f887 	bl	8002908 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <HAL_DMA2D_PollForTransfer+0x182>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10f      	bne.n	800382c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e013      	b.n	8003854 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0a1      	beq.n	800377e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2212      	movs	r2, #18
 8003840:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_DMA2D_ConfigLayer+0x20>
 8003878:	2302      	movs	r3, #2
 800387a:	e084      	b.n	8003986 <HAL_DMA2D_ConfigLayer+0x12a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	3320      	adds	r3, #32
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80038b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80038bc:	4b35      	ldr	r3, [pc, #212]	; (8003994 <HAL_DMA2D_ConfigLayer+0x138>)
 80038be:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b0a      	cmp	r3, #10
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA2D_ConfigLayer+0x74>
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d107      	bne.n	80038e0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e005      	b.n	80038ec <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d120      	bne.n	8003934 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	ea02 0103 	and.w	r1, r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	430a      	orrs	r2, r1
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b0a      	cmp	r3, #10
 800391a:	d003      	beq.n	8003924 <HAL_DMA2D_ConfigLayer+0xc8>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d127      	bne.n	8003974 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
 8003932:	e01f      	b.n	8003974 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	ea02 0103 	and.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	430a      	orrs	r2, r1
 800394a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b0a      	cmp	r3, #10
 800395c:	d003      	beq.n	8003966 <HAL_DMA2D_ConfigLayer+0x10a>
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b09      	cmp	r3, #9
 8003964:	d106      	bne.n	8003974 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003972:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	ff33000f 	.word	0xff33000f

08003998 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003998:	b480      	push	{r7}
 800399a:	b08b      	sub	sp, #44	; 0x2c
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	041a      	lsls	r2, r3, #16
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d0:	d174      	bne.n	8003abc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	e053      	b.n	8003ab2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d106      	bne.n	8003a20 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e048      	b.n	8003ab2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d111      	bne.n	8003a4c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	0cdb      	lsrs	r3, r3, #19
 8003a2c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	0a9b      	lsrs	r3, r3, #10
 8003a32:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	08db      	lsrs	r3, r3, #3
 8003a38:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	02db      	lsls	r3, r3, #11
 8003a42:	4313      	orrs	r3, r2
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e032      	b.n	8003ab2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d117      	bne.n	8003a84 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	0fdb      	lsrs	r3, r3, #31
 8003a58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	0cdb      	lsrs	r3, r3, #19
 8003a5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	029b      	lsls	r3, r3, #10
 8003a74:	431a      	orrs	r2, r3
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	03db      	lsls	r3, r3, #15
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e016      	b.n	8003ab2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	0b1b      	lsrs	r3, r3, #12
 8003a94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	011a      	lsls	r2, r3, #4
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	031b      	lsls	r3, r3, #12
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003aba:	e003      	b.n	8003ac4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	372c      	adds	r7, #44	; 0x2c
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	019a      	lsls	r2, r3, #6
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	431a      	orrs	r2, r3
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b10:	f7fe fefa 	bl	8002908 <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b16:	e009      	b.n	8003b2c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003b18:	f7fe fef6 	bl	8002908 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b26:	d901      	bls.n	8003b2c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e015      	b.n	8003b58 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	019a      	lsls	r2, r3, #6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	041a      	lsls	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e106      	b.n	8003d82 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7c5b      	ldrb	r3, [r3, #17]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f00a fdd4 	bl	800e72c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2203      	movs	r2, #3
 8003b88:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb2:	f7fe fea9 	bl	8002908 <HAL_GetTick>
 8003bb6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bb8:	e009      	b.n	8003bce <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003bba:	f7fe fea5 	bl	8002908 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc8:	d901      	bls.n	8003bce <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0d9      	b.n	8003d82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ed      	beq.n	8003bba <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_DSI_Init+0x22c>)
 8003bec:	400b      	ands	r3, r1
 8003bee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	02db      	lsls	r3, r3, #11
 8003c06:	431a      	orrs	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c42:	f7fe fe61 	bl	8002908 <HAL_GetTick>
 8003c46:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c48:	e009      	b.n	8003c5e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fe5d 	bl	8002908 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c58:	d901      	bls.n	8003c5e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e091      	b.n	8003d82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ed      	beq.n	8003c4a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0206 	orr.w	r2, r2, #6
 8003c7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0203 	bic.w	r2, r2, #3
 8003c92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0203 	bic.w	r2, r2, #3
 8003cc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_DSI_Init+0x1aa>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	e000      	b.n	8003d0c <HAL_DSI_Init+0x1ac>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_DSI_Init+0x230>)
 8003d12:	fb02 f203 	mul.w	r2, r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	fffc8603 	.word	0xfffc8603
 8003d90:	003d0900 	.word	0x003d0900

08003d94 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e066      	b.n	8003e74 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0208 	bic.w	r2, r2, #8
 8003dc0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0206 	bic.w	r2, r2, #6
 8003e06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f00a fcaa 	bl	800e7b4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7c1b      	ldrb	r3, [r3, #16]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0aa      	b.n	8003fe8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003eec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0202 	orr.w	r2, r2, #2
 8003f28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 020c 	orr.w	r2, r2, #12
 8003f46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0210 	orr.w	r2, r2, #16
 8003f64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7c1b      	ldrb	r3, [r3, #16]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_DSI_SetGenericVCID+0x16>
 8004006:	2302      	movs	r3, #2
 8004008:	e016      	b.n	8004038 <HAL_DSI_SetGenericVCID+0x44>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0203 	bic.w	r2, r2, #3
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7c1b      	ldrb	r3, [r3, #16]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_DSI_ConfigVideoMode+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e1ee      	b.n	8004438 <HAL_DSI_ConfigVideoMode+0x3f4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0203 	bic.w	r2, r2, #3
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b84      	ldr	r3, [pc, #528]	; (80042e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80040d4:	400b      	ands	r3, r1
 80040d6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b7b      	ldr	r3, [pc, #492]	; (80042e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80040f6:	400b      	ands	r3, r1
 80040f8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0203 	bic.w	r2, r2, #3
 800411a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68d9      	ldr	r1, [r3, #12]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0207 	bic.w	r2, r2, #7
 800413c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6959      	ldr	r1, [r3, #20]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	431a      	orrs	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020f 	bic.w	r2, r2, #15
 800416a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6919      	ldr	r1, [r3, #16]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 020e 	bic.w	r2, r2, #14
 800418e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d110      	bne.n	80041d4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6919      	ldr	r1, [r3, #16]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80041e0:	400b      	ands	r3, r1
 80041e2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004202:	400b      	ands	r3, r1
 8004204:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b32      	ldr	r3, [pc, #200]	; (80042ec <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004224:	400b      	ands	r3, r1
 8004226:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004246:	400b      	ands	r3, r1
 8004248:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004268:	400b      	ands	r3, r1
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800428a:	400b      	ands	r3, r1
 800428c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80042ac:	400b      	ands	r3, r1
 80042ae:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042dc:	e00a      	b.n	80042f4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80042de:	bf00      	nop
 80042e0:	ffffc000 	.word	0xffffc000
 80042e4:	ffffe000 	.word	0xffffe000
 80042e8:	fffff000 	.word	0xfffff000
 80042ec:	ffff8000 	.word	0xffff8000
 80042f0:	fffffc00 	.word	0xfffffc00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800430a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	041a      	lsls	r2, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800432e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7c1b      	ldrb	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004456:	2302      	movs	r3, #2
 8004458:	e0c5      	b.n	80045e6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0203 	bic.w	r2, r2, #3
 80044a6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0207 	bic.w	r2, r2, #7
 80044c8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6959      	ldr	r1, [r3, #20]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	431a      	orrs	r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020f 	bic.w	r2, r2, #15
 80044f6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 020e 	bic.w	r2, r2, #14
 800451a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	005a      	lsls	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8004542:	400b      	ands	r3, r1
 8004544:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004568:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0202 	orr.w	r2, r2, #2
 80045da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	ffff0000 	.word	0xffff0000

080045f8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7c1b      	ldrb	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_DSI_ConfigCommand+0x16>
 800460a:	2302      	movs	r3, #2
 800460c:	e049      	b.n	80046a2 <HAL_DSI_ConfigCommand+0xaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_DSI_ConfigCommand+0xb8>)
 8004620:	400b      	ands	r3, r1
 8004622:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004632:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004638:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800463e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004644:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800464a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004650:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004656:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800465c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004662:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004668:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800466e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0202 	bic.w	r2, r2, #2
 8004686:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	fef080ff 	.word	0xfef080ff

080046b4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7c1b      	ldrb	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_DSI_ConfigFlowControl+0x16>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e016      	b.n	80046f8 <HAL_DSI_ConfigFlowControl+0x44>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 021f 	bic.w	r2, r2, #31
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7c1b      	ldrb	r3, [r3, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_DSI_ConfigPhyTimer+0x16>
 8004716:	2302      	movs	r3, #2
 8004718:	e058      	b.n	80047cc <HAL_DSI_ConfigPhyTimer+0xc8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4293      	cmp	r3, r2
 800472a:	bf38      	it	cc
 800472c:	4613      	movcc	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	041a      	lsls	r2, r3, #16
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800476e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80047a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7c1b      	ldrb	r3, [r3, #16]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_DSI_ConfigHostTimeouts+0x16>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0b4      	b.n	8004958 <HAL_DSI_ConfigHostTimeouts+0x180>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004802:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b292      	uxth	r2, r2
 8004824:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	041a      	lsls	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004846:	400b      	ands	r3, r1
 8004848:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004868:	400b      	ands	r3, r1
 800486a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b36      	ldr	r3, [pc, #216]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800488c:	400b      	ands	r3, r1
 800488e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80048b6:	400b      	ands	r3, r1
 80048b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80048e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800490a:	400b      	ands	r3, r1
 800490c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004934:	400b      	ands	r3, r1
 8004936:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	ffff0000 	.word	0xffff0000

08004968 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7c1b      	ldrb	r3, [r3, #16]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_DSI_Start+0x14>
 8004978:	2302      	movs	r3, #2
 800497a:	e02b      	b.n	80049d4 <HAL_DSI_Start+0x6c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0208 	orr.w	r2, r2, #8
 80049b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	7c1b      	ldrb	r3, [r3, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_DSI_ShortWrite+0x1a>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e010      	b.n	8004a1c <HAL_DSI_ShortWrite+0x3c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff f879 	bl	8003b02 <DSI_ShortWrite>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	741a      	strb	r2, [r3, #16]

  return status;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	7c1b      	ldrb	r3, [r3, #16]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_DSI_LongWrite+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e084      	b.n	8004b4c <HAL_DSI_LongWrite+0x128>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a48:	f7fd ff5e 	bl	8002908 <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a4e:	e00c      	b.n	8004a6a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a50:	f7fd ff5a 	bl	8002908 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5e:	d904      	bls.n	8004a6a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e070      	b.n	8004b4c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0eb      	beq.n	8004a50 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	bf28      	it	cs
 8004a82:	2303      	movcs	r3, #3
 8004a84:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	e00f      	b.n	8004aac <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d3eb      	bcc.n	8004a8c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004acc:	e028      	b.n	8004b20 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	bf28      	it	cs
 8004ad4:	2304      	movcs	r3, #4
 8004ad6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	e00e      	b.n	8004b00 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	3301      	adds	r3, #1
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3ec      	bcc.n	8004ae2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1d3      	bne.n	8004ace <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b2e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	f7fe ffc6 	bl	8003ad0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7c1b      	ldrb	r3, [r3, #16]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e01b      	b.n	8004ba2 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004b80:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	065a      	lsls	r2, r3, #25
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e175      	b.n	8004ebc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4013      	ands	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	f040 8164 	bne.w	8004eb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x4e>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b12      	cmp	r3, #18
 8004bfc:	d123      	bne.n	8004c46 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	08da      	lsrs	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3208      	adds	r2, #8
 8004c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	220f      	movs	r2, #15
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	08da      	lsrs	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3208      	adds	r2, #8
 8004c40:	69b9      	ldr	r1, [r7, #24]
 8004c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f003 0203 	and.w	r2, r3, #3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00b      	beq.n	8004c9a <HAL_GPIO_Init+0xea>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d007      	beq.n	8004c9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c8e:	2b11      	cmp	r3, #17
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b12      	cmp	r3, #18
 8004c98:	d130      	bne.n	8004cfc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 0201 	and.w	r2, r3, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80be 	beq.w	8004eb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3a:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <HAL_GPIO_Init+0x320>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	4a64      	ldr	r2, [pc, #400]	; (8004ed0 <HAL_GPIO_Init+0x320>)
 8004d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d44:	6453      	str	r3, [r2, #68]	; 0x44
 8004d46:	4b62      	ldr	r3, [pc, #392]	; (8004ed0 <HAL_GPIO_Init+0x320>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d52:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_GPIO_Init+0x324>)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	3302      	adds	r3, #2
 8004d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	220f      	movs	r2, #15
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a57      	ldr	r2, [pc, #348]	; (8004ed8 <HAL_GPIO_Init+0x328>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d037      	beq.n	8004dee <HAL_GPIO_Init+0x23e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a56      	ldr	r2, [pc, #344]	; (8004edc <HAL_GPIO_Init+0x32c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d031      	beq.n	8004dea <HAL_GPIO_Init+0x23a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a55      	ldr	r2, [pc, #340]	; (8004ee0 <HAL_GPIO_Init+0x330>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02b      	beq.n	8004de6 <HAL_GPIO_Init+0x236>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_GPIO_Init+0x334>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d025      	beq.n	8004de2 <HAL_GPIO_Init+0x232>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a53      	ldr	r2, [pc, #332]	; (8004ee8 <HAL_GPIO_Init+0x338>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <HAL_GPIO_Init+0x22e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a52      	ldr	r2, [pc, #328]	; (8004eec <HAL_GPIO_Init+0x33c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d019      	beq.n	8004dda <HAL_GPIO_Init+0x22a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a51      	ldr	r2, [pc, #324]	; (8004ef0 <HAL_GPIO_Init+0x340>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_GPIO_Init+0x226>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a50      	ldr	r2, [pc, #320]	; (8004ef4 <HAL_GPIO_Init+0x344>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00d      	beq.n	8004dd2 <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a4f      	ldr	r2, [pc, #316]	; (8004ef8 <HAL_GPIO_Init+0x348>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a4e      	ldr	r2, [pc, #312]	; (8004efc <HAL_GPIO_Init+0x34c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_GPIO_Init+0x21a>
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	e012      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dca:	230a      	movs	r3, #10
 8004dcc:	e010      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	e00e      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dd2:	2307      	movs	r3, #7
 8004dd4:	e00c      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dd6:	2306      	movs	r3, #6
 8004dd8:	e00a      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dda:	2305      	movs	r3, #5
 8004ddc:	e008      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dde:	2304      	movs	r3, #4
 8004de0:	e006      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e004      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e002      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_GPIO_Init+0x240>
 8004dee:	2300      	movs	r3, #0
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	f002 0203 	and.w	r2, r2, #3
 8004df6:	0092      	lsls	r2, r2, #2
 8004df8:	4093      	lsls	r3, r2
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e00:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <HAL_GPIO_Init+0x324>)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	3302      	adds	r3, #2
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e0e:	4b3c      	ldr	r3, [pc, #240]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e32:	4a33      	ldr	r2, [pc, #204]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e38:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e62:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <HAL_GPIO_Init+0x350>)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	f67f ae86 	bls.w	8004bd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3724      	adds	r7, #36	; 0x24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40013800 	.word	0x40013800
 8004ed8:	40020000 	.word	0x40020000
 8004edc:	40020400 	.word	0x40020400
 8004ee0:	40020800 	.word	0x40020800
 8004ee4:	40020c00 	.word	0x40020c00
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40021400 	.word	0x40021400
 8004ef0:	40021800 	.word	0x40021800
 8004ef4:	40021c00 	.word	0x40021c00
 8004ef8:	40022000 	.word	0x40022000
 8004efc:	40022400 	.word	0x40022400
 8004f00:	40013c00 	.word	0x40013c00

08004f04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e0d9      	b.n	80050d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f20:	2201      	movs	r2, #1
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f040 80c9 	bne.w	80050ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f3c:	4a6a      	ldr	r2, [pc, #424]	; (80050e8 <HAL_GPIO_DeInit+0x1e4>)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	220f      	movs	r2, #15
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a62      	ldr	r2, [pc, #392]	; (80050ec <HAL_GPIO_DeInit+0x1e8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d037      	beq.n	8004fd6 <HAL_GPIO_DeInit+0xd2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a61      	ldr	r2, [pc, #388]	; (80050f0 <HAL_GPIO_DeInit+0x1ec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d031      	beq.n	8004fd2 <HAL_GPIO_DeInit+0xce>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a60      	ldr	r2, [pc, #384]	; (80050f4 <HAL_GPIO_DeInit+0x1f0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02b      	beq.n	8004fce <HAL_GPIO_DeInit+0xca>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a5f      	ldr	r2, [pc, #380]	; (80050f8 <HAL_GPIO_DeInit+0x1f4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d025      	beq.n	8004fca <HAL_GPIO_DeInit+0xc6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_GPIO_DeInit+0x1f8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01f      	beq.n	8004fc6 <HAL_GPIO_DeInit+0xc2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a5d      	ldr	r2, [pc, #372]	; (8005100 <HAL_GPIO_DeInit+0x1fc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d019      	beq.n	8004fc2 <HAL_GPIO_DeInit+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a5c      	ldr	r2, [pc, #368]	; (8005104 <HAL_GPIO_DeInit+0x200>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_GPIO_DeInit+0xba>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a5b      	ldr	r2, [pc, #364]	; (8005108 <HAL_GPIO_DeInit+0x204>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00d      	beq.n	8004fba <HAL_GPIO_DeInit+0xb6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a5a      	ldr	r2, [pc, #360]	; (800510c <HAL_GPIO_DeInit+0x208>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <HAL_GPIO_DeInit+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a59      	ldr	r2, [pc, #356]	; (8005110 <HAL_GPIO_DeInit+0x20c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_GPIO_DeInit+0xae>
 8004fae:	2309      	movs	r3, #9
 8004fb0:	e012      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	e010      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	e00e      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fba:	2307      	movs	r3, #7
 8004fbc:	e00c      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	e00a      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	e008      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e006      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e004      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_GPIO_DeInit+0xd4>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	f002 0203 	and.w	r2, r2, #3
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	4093      	lsls	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d132      	bne.n	800504e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	220f      	movs	r2, #15
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004ff8:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <HAL_GPIO_DeInit+0x1e4>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	43da      	mvns	r2, r3
 8005008:	4837      	ldr	r0, [pc, #220]	; (80050e8 <HAL_GPIO_DeInit+0x1e4>)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	400a      	ands	r2, r1
 8005010:	3302      	adds	r3, #2
 8005012:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005016:	4b3f      	ldr	r3, [pc, #252]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	43db      	mvns	r3, r3
 800501e:	493d      	ldr	r1, [pc, #244]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 8005020:	4013      	ands	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005024:	4b3b      	ldr	r3, [pc, #236]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	43db      	mvns	r3, r3
 800502c:	4939      	ldr	r1, [pc, #228]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 800502e:	4013      	ands	r3, r2
 8005030:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	43db      	mvns	r3, r3
 800503a:	4936      	ldr	r1, [pc, #216]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 800503c:	4013      	ands	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005040:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43db      	mvns	r3, r3
 8005048:	4932      	ldr	r1, [pc, #200]	; (8005114 <HAL_GPIO_DeInit+0x210>)
 800504a:	4013      	ands	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2103      	movs	r1, #3
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	401a      	ands	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3208      	adds	r2, #8
 800506c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	220f      	movs	r2, #15
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	08d2      	lsrs	r2, r2, #3
 8005084:	4019      	ands	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3208      	adds	r2, #8
 800508a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	2103      	movs	r1, #3
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	2101      	movs	r1, #1
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2103      	movs	r1, #3
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	401a      	ands	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3301      	adds	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	f67f af22 	bls.w	8004f20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40020400 	.word	0x40020400
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020c00 	.word	0x40020c00
 80050fc:	40021000 	.word	0x40021000
 8005100:	40021400 	.word	0x40021400
 8005104:	40021800 	.word	0x40021800
 8005108:	40021c00 	.word	0x40021c00
 800510c:	40022000 	.word	0x40022000
 8005110:	40022400 	.word	0x40022400
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e001      	b.n	800513a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
 8005154:	4613      	mov	r3, r2
 8005156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005158:	787b      	ldrb	r3, [r7, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005164:	e003      	b.n	800516e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	041a      	lsls	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	619a      	str	r2, [r3, #24]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	401a      	ands	r2, r3
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	429a      	cmp	r2, r3
 8005192:	d104      	bne.n	800519e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	041a      	lsls	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800519c:	e002      	b.n	80051a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f006 fec0 	bl	800bf54 <HAL_GPIO_EXTI_Callback>
  }
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40013c00 	.word	0x40013c00

080051e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07f      	b.n	80052f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8a9 	bl	800535e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2224      	movs	r2, #36	; 0x24
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	e006      	b.n	8005268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d104      	bne.n	800527a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005278:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_I2C_Init+0x11c>)
 8005286:	430b      	orrs	r3, r1
 8005288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	ea42 0103 	orr.w	r1, r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69d9      	ldr	r1, [r3, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	02008000 	.word	0x02008000

08005300 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e021      	b.n	8005356 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2224      	movs	r2, #36	; 0x24
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f821 	bl	8005372 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	461a      	mov	r2, r3
 8005396:	4603      	mov	r3, r0
 8005398:	817b      	strh	r3, [r7, #10]
 800539a:	460b      	mov	r3, r1
 800539c:	813b      	strh	r3, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	f040 80f9 	bne.w	80055a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_I2C_Mem_Write+0x34>
 80053b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0ed      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_I2C_Mem_Write+0x4e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0e6      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053de:	f7fd fa93 	bl	8002908 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2319      	movs	r3, #25
 80053ea:	2201      	movs	r2, #1
 80053ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fad1 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0d1      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2221      	movs	r2, #33	; 0x21
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005428:	88f8      	ldrh	r0, [r7, #6]
 800542a:	893a      	ldrh	r2, [r7, #8]
 800542c:	8979      	ldrh	r1, [r7, #10]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4603      	mov	r3, r0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f9e1 	bl	8005800 <I2C_RequestMemoryWrite>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0a9      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d90e      	bls.n	8005478 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fbb3 	bl	8005bdc <I2C_TransferConfig>
 8005476:	e00f      	b.n	8005498 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	8979      	ldrh	r1, [r7, #10]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fba2 	bl	8005bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fabb 	bl	8005a18 <I2C_WaitOnTXISFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e07b      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d034      	beq.n	8005550 <HAL_I2C_Mem_Write+0x1c8>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d130      	bne.n	8005550 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fa4d 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e04d      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2bff      	cmp	r3, #255	; 0xff
 8005510:	d90e      	bls.n	8005530 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	8979      	ldrh	r1, [r7, #10]
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fb57 	bl	8005bdc <I2C_TransferConfig>
 800552e:	e00f      	b.n	8005550 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	8979      	ldrh	r1, [r7, #10]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fb46 	bl	8005bdc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d19e      	bne.n	8005498 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fa9a 	bl	8005a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e01a      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2220      	movs	r2, #32
 8005574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_I2C_Mem_Write+0x224>)
 8005582:	400b      	ands	r3, r1
 8005584:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	fe00e800 	.word	0xfe00e800

080055b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	4603      	mov	r3, r0
 80055c0:	817b      	strh	r3, [r7, #10]
 80055c2:	460b      	mov	r3, r1
 80055c4:	813b      	strh	r3, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	f040 80fd 	bne.w	80057d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_I2C_Mem_Read+0x34>
 80055de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0f1      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_I2C_Mem_Read+0x4e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ea      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005606:	f7fd f97f 	bl	8002908 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2319      	movs	r3, #25
 8005612:	2201      	movs	r2, #1
 8005614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f9bd 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0d5      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2222      	movs	r2, #34	; 0x22
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005650:	88f8      	ldrh	r0, [r7, #6]
 8005652:	893a      	ldrh	r2, [r7, #8]
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4603      	mov	r3, r0
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f921 	bl	80058a8 <I2C_RequestMemoryRead>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0ad      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	d90e      	bls.n	80056a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	b2da      	uxtb	r2, r3
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	4b52      	ldr	r3, [pc, #328]	; (80057dc <HAL_I2C_Mem_Read+0x22c>)
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fa9f 	bl	8005bdc <I2C_TransferConfig>
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	8979      	ldrh	r1, [r7, #10]
 80056b2:	4b4a      	ldr	r3, [pc, #296]	; (80057dc <HAL_I2C_Mem_Read+0x22c>)
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fa8e 	bl	8005bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2200      	movs	r2, #0
 80056c8:	2104      	movs	r1, #4
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f964 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e07c      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d034      	beq.n	8005780 <HAL_I2C_Mem_Read+0x1d0>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d130      	bne.n	8005780 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f935 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e04d      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2bff      	cmp	r3, #255	; 0xff
 8005740:	d90e      	bls.n	8005760 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	b2da      	uxtb	r2, r3
 800574e:	8979      	ldrh	r1, [r7, #10]
 8005750:	2300      	movs	r3, #0
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fa3f 	bl	8005bdc <I2C_TransferConfig>
 800575e:	e00f      	b.n	8005780 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576e:	b2da      	uxtb	r2, r3
 8005770:	8979      	ldrh	r1, [r7, #10]
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fa2e 	bl	8005bdc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d19a      	bne.n	80056c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f982 	bl	8005a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e01a      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2220      	movs	r2, #32
 80057a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_I2C_Mem_Read+0x230>)
 80057b2:	400b      	ands	r3, r1
 80057b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e000      	b.n	80057d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	80002400 	.word	0x80002400
 80057e0:	fe00e800 	.word	0xfe00e800

080057e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f2:	b2db      	uxtb	r3, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	461a      	mov	r2, r3
 800580e:	4603      	mov	r3, r0
 8005810:	817b      	strh	r3, [r7, #10]
 8005812:	460b      	mov	r3, r1
 8005814:	813b      	strh	r3, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	8979      	ldrh	r1, [r7, #10]
 8005820:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <I2C_RequestMemoryWrite+0xa4>)
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f9d7 	bl	8005bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f8f0 	bl	8005a18 <I2C_WaitOnTXISFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e02c      	b.n	800589c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d105      	bne.n	8005854 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005848:	893b      	ldrh	r3, [r7, #8]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
 8005852:	e015      	b.n	8005880 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	b29b      	uxth	r3, r3
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f8d6 	bl	8005a18 <I2C_WaitOnTXISFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e012      	b.n	800589c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005876:	893b      	ldrh	r3, [r7, #8]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f884 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	80002000 	.word	0x80002000

080058a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	8979      	ldrh	r1, [r7, #10]
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <I2C_RequestMemoryRead+0xa4>)
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f984 	bl	8005bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f89d 	bl	8005a18 <I2C_WaitOnTXISFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e02c      	b.n	8005942 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d105      	bne.n	80058fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ee:	893b      	ldrh	r3, [r7, #8]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
 80058f8:	e015      	b.n	8005926 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	b29b      	uxth	r3, r3
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f883 	bl	8005a18 <I2C_WaitOnTXISFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e012      	b.n	8005942 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800591c:	893b      	ldrh	r3, [r7, #8]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2200      	movs	r2, #0
 800592e:	2140      	movs	r1, #64	; 0x40
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f831 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	80002000 	.word	0x80002000

08005950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b02      	cmp	r3, #2
 8005964:	d103      	bne.n	800596e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d007      	beq.n	800598c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	619a      	str	r2, [r3, #24]
  }
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a8:	e022      	b.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d01e      	beq.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fc ffa9 	bl	8002908 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d113      	bne.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e00f      	b.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d0cd      	beq.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a24:	e02c      	b.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f870 	bl	8005b10 <I2C_IsAcknowledgeFailed>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e02a      	b.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d01e      	beq.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fc ff61 	bl	8002908 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d113      	bne.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e007      	b.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d1cb      	bne.n	8005a26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa4:	e028      	b.n	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f830 	bl	8005b10 <I2C_IsAcknowledgeFailed>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e026      	b.n	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aba:	f7fc ff25 	bl	8002908 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d302      	bcc.n	8005ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d113      	bne.n	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e007      	b.n	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d1cf      	bne.n	8005aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d151      	bne.n	8005bce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b2a:	e022      	b.n	8005b72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d01e      	beq.n	8005b72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b34:	f7fc fee8 	bl	8002908 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <I2C_IsAcknowledgeFailed+0x3a>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e02e      	b.n	8005bd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d1d5      	bne.n	8005b2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2210      	movs	r2, #16
 8005b86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff fedd 	bl	8005950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	fe00e800 	.word	0xfe00e800

08005bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	817b      	strh	r3, [r7, #10]
 8005bea:	4613      	mov	r3, r2
 8005bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	0d5b      	lsrs	r3, r3, #21
 8005bf8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <I2C_TransferConfig+0x58>)
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	43db      	mvns	r3, r3
 8005c02:	ea02 0103 	and.w	r1, r2, r3
 8005c06:	897b      	ldrh	r3, [r7, #10]
 8005c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c0c:	7a7b      	ldrb	r3, [r7, #9]
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	03ff63ff 	.word	0x03ff63ff

08005c38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0bf      	b.n	8005dca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f008 fdc6 	bl	800e7f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005cac:	400b      	ands	r3, r1
 8005cae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68d9      	ldr	r1, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005d08:	400b      	ands	r3, r1
 8005d0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6919      	ldr	r1, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6959      	ldr	r1, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0206 	orr.w	r2, r2, #6
 8005da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	f000f800 	.word	0xf000f800

08005dd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_LTDC_ConfigLayer+0x1a>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e02c      	b.n	8005e4c <HAL_LTDC_ConfigLayer+0x74>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2134      	movs	r1, #52	; 0x34
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f811 	bl	8005e54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bdb0      	pop	{r4, r5, r7, pc}

08005e54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e70:	4413      	add	r3, r2
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	01d2      	lsls	r2, r2, #7
 8005e90:	440a      	add	r2, r1
 8005e92:	3284      	adds	r2, #132	; 0x84
 8005e94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eaa:	4413      	add	r3, r2
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	01db      	lsls	r3, r3, #7
 8005eb8:	440b      	add	r3, r1
 8005eba:	3384      	adds	r3, #132	; 0x84
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed2:	4413      	add	r3, r2
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	01db      	lsls	r3, r3, #7
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3384      	adds	r3, #132	; 0x84
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	4611      	mov	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	01d2      	lsls	r2, r2, #7
 8005ef2:	440a      	add	r2, r1
 8005ef4:	3284      	adds	r2, #132	; 0x84
 8005ef6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005efa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0a:	4413      	add	r3, r2
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	440b      	add	r3, r1
 8005f1a:	3384      	adds	r3, #132	; 0x84
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	01db      	lsls	r3, r3, #7
 8005f2e:	4413      	add	r3, r2
 8005f30:	3384      	adds	r3, #132	; 0x84
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	01d2      	lsls	r2, r2, #7
 8005f3e:	440a      	add	r2, r1
 8005f40:	3284      	adds	r2, #132	; 0x84
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	01db      	lsls	r3, r3, #7
 8005f52:	4413      	add	r3, r2
 8005f54:	3384      	adds	r3, #132	; 0x84
 8005f56:	461a      	mov	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	061b      	lsls	r3, r3, #24
 8005f78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	4413      	add	r3, r2
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	01db      	lsls	r3, r3, #7
 8005f94:	4413      	add	r3, r2
 8005f96:	3384      	adds	r3, #132	; 0x84
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	01db      	lsls	r3, r3, #7
 8005fb8:	440b      	add	r3, r1
 8005fba:	3384      	adds	r3, #132	; 0x84
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	01db      	lsls	r3, r3, #7
 8005fce:	4413      	add	r3, r2
 8005fd0:	3384      	adds	r3, #132	; 0x84
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	01d2      	lsls	r2, r2, #7
 8005fde:	440a      	add	r2, r1
 8005fe0:	3284      	adds	r2, #132	; 0x84
 8005fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fe6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	01db      	lsls	r3, r3, #7
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3384      	adds	r3, #132	; 0x84
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	4413      	add	r3, r2
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	440b      	add	r3, r1
 800601a:	3384      	adds	r3, #132	; 0x84
 800601c:	4619      	mov	r1, r3
 800601e:	4b58      	ldr	r3, [pc, #352]	; (8006180 <LTDC_SetConfig+0x32c>)
 8006020:	4013      	ands	r3, r2
 8006022:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	6809      	ldr	r1, [r1, #0]
 8006030:	4608      	mov	r0, r1
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	01c9      	lsls	r1, r1, #7
 8006036:	4401      	add	r1, r0
 8006038:	3184      	adds	r1, #132	; 0x84
 800603a:	4313      	orrs	r3, r2
 800603c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	4413      	add	r3, r2
 800604a:	3384      	adds	r3, #132	; 0x84
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	4413      	add	r3, r2
 800605a:	3384      	adds	r3, #132	; 0x84
 800605c:	461a      	mov	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	01db      	lsls	r3, r3, #7
 800606c:	4413      	add	r3, r2
 800606e:	3384      	adds	r3, #132	; 0x84
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006080:	2304      	movs	r3, #4
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e01b      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800608e:	2303      	movs	r3, #3
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e014      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d00b      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d007      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d003      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	d102      	bne.n	80060ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060b4:	2302      	movs	r3, #2
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e001      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4413      	add	r3, r2
 80060ca:	3384      	adds	r3, #132	; 0x84
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	4611      	mov	r1, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	01d2      	lsls	r2, r2, #7
 80060d8:	440a      	add	r2, r1
 80060da:	3284      	adds	r2, #132	; 0x84
 80060dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	041a      	lsls	r2, r3, #16
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	1acb      	subs	r3, r1, r3
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	3303      	adds	r3, #3
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	4608      	mov	r0, r1
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	01c9      	lsls	r1, r1, #7
 800610a:	4401      	add	r1, r0
 800610c:	3184      	adds	r1, #132	; 0x84
 800610e:	4313      	orrs	r3, r2
 8006110:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	4413      	add	r3, r2
 800611e:	3384      	adds	r3, #132	; 0x84
 8006120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4619      	mov	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	01db      	lsls	r3, r3, #7
 800612c:	440b      	add	r3, r1
 800612e:	3384      	adds	r3, #132	; 0x84
 8006130:	4619      	mov	r1, r3
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <LTDC_SetConfig+0x330>)
 8006134:	4013      	ands	r3, r2
 8006136:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	01db      	lsls	r3, r3, #7
 8006142:	4413      	add	r3, r2
 8006144:	3384      	adds	r3, #132	; 0x84
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	4413      	add	r3, r2
 800615a:	3384      	adds	r3, #132	; 0x84
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	4611      	mov	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	01d2      	lsls	r2, r2, #7
 8006168:	440a      	add	r2, r1
 800616a:	3284      	adds	r2, #132	; 0x84
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	fffff8f8 	.word	0xfffff8f8
 8006184:	fffff800 	.word	0xfffff800

08006188 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800619a:	2200      	movs	r2, #0
 800619c:	e001      	b.n	80061a2 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800619e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80061ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061b2:	e000      	b.n	80061b6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80061b4:	2200      	movs	r2, #0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80061c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c6:	e000      	b.n	80061ca <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80061c8:	2200      	movs	r2, #0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	4413      	add	r3, r2
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	441a      	add	r2, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	4413      	add	r3, r2
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	441a      	add	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	441a      	add	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	4413      	add	r3, r2
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006232:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623c:	6413      	str	r3, [r2, #64]	; 0x40
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800624a:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006256:	f7fc fb57 	bl	8002908 <HAL_GetTick>
 800625a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800625c:	e009      	b.n	8006272 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800625e:	f7fc fb53 	bl	8002908 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626c:	d901      	bls.n	8006272 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e022      	b.n	80062b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006272:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627e:	d1ee      	bne.n	800625e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0f      	ldr	r2, [pc, #60]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800628a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800628c:	f7fc fb3c 	bl	8002908 <HAL_GetTick>
 8006290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006292:	e009      	b.n	80062a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006294:	f7fc fb38 	bl	8002908 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a2:	d901      	bls.n	80062a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e007      	b.n	80062b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062b4:	d1ee      	bne.n	8006294 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40007000 	.word	0x40007000

080062c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e25e      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8087 	beq.w	80063fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062ec:	4b96      	ldr	r3, [pc, #600]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d00c      	beq.n	8006312 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062f8:	4b93      	ldr	r3, [pc, #588]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 030c 	and.w	r3, r3, #12
 8006300:	2b08      	cmp	r3, #8
 8006302:	d112      	bne.n	800632a <HAL_RCC_OscConfig+0x62>
 8006304:	4b90      	ldr	r3, [pc, #576]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006310:	d10b      	bne.n	800632a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006312:	4b8d      	ldr	r3, [pc, #564]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d06c      	beq.n	80063f8 <HAL_RCC_OscConfig+0x130>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d168      	bne.n	80063f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e238      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006332:	d106      	bne.n	8006342 <HAL_RCC_OscConfig+0x7a>
 8006334:	4b84      	ldr	r3, [pc, #528]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a83      	ldr	r2, [pc, #524]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800633a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	e02e      	b.n	80063a0 <HAL_RCC_OscConfig+0xd8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0x9c>
 800634a:	4b7f      	ldr	r3, [pc, #508]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a7e      	ldr	r2, [pc, #504]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b7c      	ldr	r3, [pc, #496]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a7b      	ldr	r2, [pc, #492]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800635c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e01d      	b.n	80063a0 <HAL_RCC_OscConfig+0xd8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800636c:	d10c      	bne.n	8006388 <HAL_RCC_OscConfig+0xc0>
 800636e:	4b76      	ldr	r3, [pc, #472]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a75      	ldr	r2, [pc, #468]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4b73      	ldr	r3, [pc, #460]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a72      	ldr	r2, [pc, #456]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e00b      	b.n	80063a0 <HAL_RCC_OscConfig+0xd8>
 8006388:	4b6f      	ldr	r3, [pc, #444]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a6e      	ldr	r2, [pc, #440]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800638e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	4b6c      	ldr	r3, [pc, #432]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6b      	ldr	r2, [pc, #428]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800639a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800639e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d013      	beq.n	80063d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fc faae 	bl	8002908 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b0:	f7fc faaa 	bl	8002908 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b64      	cmp	r3, #100	; 0x64
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1ec      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c2:	4b61      	ldr	r3, [pc, #388]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0xe8>
 80063ce:	e014      	b.n	80063fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fc fa9a 	bl	8002908 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d8:	f7fc fa96 	bl	8002908 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b64      	cmp	r3, #100	; 0x64
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e1d8      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ea:	4b57      	ldr	r3, [pc, #348]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x110>
 80063f6:	e000      	b.n	80063fa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d069      	beq.n	80064da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006406:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006412:	4b4d      	ldr	r3, [pc, #308]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	2b08      	cmp	r3, #8
 800641c:	d11c      	bne.n	8006458 <HAL_RCC_OscConfig+0x190>
 800641e:	4b4a      	ldr	r3, [pc, #296]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d116      	bne.n	8006458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_RCC_OscConfig+0x17a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d001      	beq.n	8006442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e1ac      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006442:	4b41      	ldr	r3, [pc, #260]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	493d      	ldr	r1, [pc, #244]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006456:	e040      	b.n	80064da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d023      	beq.n	80064a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006460:	4b39      	ldr	r3, [pc, #228]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a38      	ldr	r2, [pc, #224]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fc fa4c 	bl	8002908 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006474:	f7fc fa48 	bl	8002908 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e18a      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006492:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4929      	ldr	r1, [pc, #164]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
 80064a6:	e018      	b.n	80064da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a8:	4b27      	ldr	r3, [pc, #156]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a26      	ldr	r2, [pc, #152]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fc fa28 	bl	8002908 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064bc:	f7fc fa24 	bl	8002908 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e166      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d038      	beq.n	8006558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d019      	beq.n	8006522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fa:	f7fc fa05 	bl	8002908 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006502:	f7fc fa01 	bl	8002908 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e143      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x23a>
 8006520:	e01a      	b.n	8006558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_RCC_OscConfig+0x280>)
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652e:	f7fc f9eb 	bl	8002908 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006536:	f7fc f9e7 	bl	8002908 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d903      	bls.n	800654c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e129      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
 8006548:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800654c:	4b95      	ldr	r3, [pc, #596]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800654e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a4 	beq.w	80066ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006566:	4b8f      	ldr	r3, [pc, #572]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006572:	4b8c      	ldr	r3, [pc, #560]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	4a8b      	ldr	r2, [pc, #556]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657c:	6413      	str	r3, [r2, #64]	; 0x40
 800657e:	4b89      	ldr	r3, [pc, #548]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800658e:	4b86      	ldr	r3, [pc, #536]	; (80067a8 <HAL_RCC_OscConfig+0x4e0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d118      	bne.n	80065cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800659a:	4b83      	ldr	r3, [pc, #524]	; (80067a8 <HAL_RCC_OscConfig+0x4e0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a82      	ldr	r2, [pc, #520]	; (80067a8 <HAL_RCC_OscConfig+0x4e0>)
 80065a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a6:	f7fc f9af 	bl	8002908 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065ae:	f7fc f9ab 	bl	8002908 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b64      	cmp	r3, #100	; 0x64
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e0ed      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065c0:	4b79      	ldr	r3, [pc, #484]	; (80067a8 <HAL_RCC_OscConfig+0x4e0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_OscConfig+0x31a>
 80065d4:	4b73      	ldr	r3, [pc, #460]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a72      	ldr	r2, [pc, #456]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	6713      	str	r3, [r2, #112]	; 0x70
 80065e0:	e02d      	b.n	800663e <HAL_RCC_OscConfig+0x376>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x33c>
 80065ea:	4b6e      	ldr	r3, [pc, #440]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	4a6d      	ldr	r2, [pc, #436]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	6713      	str	r3, [r2, #112]	; 0x70
 80065f6:	4b6b      	ldr	r3, [pc, #428]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a6a      	ldr	r2, [pc, #424]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80065fc:	f023 0304 	bic.w	r3, r3, #4
 8006600:	6713      	str	r3, [r2, #112]	; 0x70
 8006602:	e01c      	b.n	800663e <HAL_RCC_OscConfig+0x376>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b05      	cmp	r3, #5
 800660a:	d10c      	bne.n	8006626 <HAL_RCC_OscConfig+0x35e>
 800660c:	4b65      	ldr	r3, [pc, #404]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	4a64      	ldr	r2, [pc, #400]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006612:	f043 0304 	orr.w	r3, r3, #4
 8006616:	6713      	str	r3, [r2, #112]	; 0x70
 8006618:	4b62      	ldr	r3, [pc, #392]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661c:	4a61      	ldr	r2, [pc, #388]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	; 0x70
 8006624:	e00b      	b.n	800663e <HAL_RCC_OscConfig+0x376>
 8006626:	4b5f      	ldr	r3, [pc, #380]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a5e      	ldr	r2, [pc, #376]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b5c      	ldr	r3, [pc, #368]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d015      	beq.n	8006672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fc f95f 	bl	8002908 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664c:	e00a      	b.n	8006664 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fc f95b 	bl	8002908 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	; 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e09b      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006664:	4b4f      	ldr	r3, [pc, #316]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0ee      	beq.n	800664e <HAL_RCC_OscConfig+0x386>
 8006670:	e014      	b.n	800669c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006672:	f7fc f949 	bl	8002908 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006678:	e00a      	b.n	8006690 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fc f945 	bl	8002908 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	; 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e085      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006690:	4b44      	ldr	r3, [pc, #272]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ee      	bne.n	800667a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d105      	bne.n	80066ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a2:	4b40      	ldr	r3, [pc, #256]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	4a3f      	ldr	r2, [pc, #252]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d071      	beq.n	800679a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066b6:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d069      	beq.n	8006796 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d14b      	bne.n	8006762 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ca:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d6:	f7fc f917 	bl	8002908 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066de:	f7fc f913 	bl	8002908 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e055      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f0:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	019b      	lsls	r3, r3, #6
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	3b01      	subs	r3, #1
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	061b      	lsls	r3, r3, #24
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	071b      	lsls	r3, r3, #28
 8006728:	491e      	ldr	r1, [pc, #120]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800672e:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673a:	f7fc f8e5 	bl	8002908 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006742:	f7fc f8e1 	bl	8002908 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e023      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCC_OscConfig+0x47a>
 8006760:	e01b      	b.n	800679a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a0f      	ldr	r2, [pc, #60]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 8006768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800676c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fc f8cb 	bl	8002908 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006776:	f7fc f8c7 	bl	8002908 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e009      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_OscConfig+0x4dc>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f0      	bne.n	8006776 <HAL_RCC_OscConfig+0x4ae>
 8006794:	e001      	b.n	800679a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000

080067ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0ce      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c4:	4b69      	ldr	r3, [pc, #420]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d910      	bls.n	80067f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b66      	ldr	r3, [pc, #408]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 020f 	bic.w	r2, r3, #15
 80067da:	4964      	ldr	r1, [pc, #400]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4313      	orrs	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e2:	4b62      	ldr	r3, [pc, #392]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d001      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0b6      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d020      	beq.n	8006842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800680c:	4b58      	ldr	r3, [pc, #352]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4a57      	ldr	r2, [pc, #348]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006824:	4b52      	ldr	r3, [pc, #328]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4a51      	ldr	r2, [pc, #324]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800682a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800682e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006830:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	494c      	ldr	r1, [pc, #304]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d040      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d115      	bne.n	800688e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e07d      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d107      	bne.n	800687e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686e:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e071      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800687e:	4b3c      	ldr	r3, [pc, #240]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e069      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800688e:	4b38      	ldr	r3, [pc, #224]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f023 0203 	bic.w	r2, r3, #3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4935      	ldr	r1, [pc, #212]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800689c:	4313      	orrs	r3, r2
 800689e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a0:	f7fc f832 	bl	8002908 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	e00a      	b.n	80068be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a8:	f7fc f82e 	bl	8002908 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e051      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068be:	4b2c      	ldr	r3, [pc, #176]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 020c 	and.w	r2, r3, #12
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d1eb      	bne.n	80068a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d0:	4b26      	ldr	r3, [pc, #152]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d210      	bcs.n	8006900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b23      	ldr	r3, [pc, #140]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 020f 	bic.w	r2, r3, #15
 80068e6:	4921      	ldr	r1, [pc, #132]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b1f      	ldr	r3, [pc, #124]	; (800696c <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e030      	b.n	8006962 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	4915      	ldr	r1, [pc, #84]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800692a:	4b11      	ldr	r3, [pc, #68]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	490d      	ldr	r1, [pc, #52]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800693e:	f000 f81d 	bl	800697c <HAL_RCC_GetSysClockFreq>
 8006942:	4601      	mov	r1, r0
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_RCC_ClockConfig+0x1c4>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <HAL_RCC_ClockConfig+0x1c8>)
 8006950:	5cd3      	ldrb	r3, [r2, r3]
 8006952:	fa21 f303 	lsr.w	r3, r1, r3
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <HAL_RCC_ClockConfig+0x1cc>)
 8006958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800695a:	2000      	movs	r0, #0
 800695c:	f7fb ff90 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023c00 	.word	0x40023c00
 8006970:	40023800 	.word	0x40023800
 8006974:	080133e8 	.word	0x080133e8
 8006978:	2000007c 	.word	0x2000007c

0800697c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	2300      	movs	r3, #0
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006992:	4b50      	ldr	r3, [pc, #320]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b04      	cmp	r3, #4
 800699c:	d007      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x32>
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d008      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x38>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 808d 	bne.w	8006ac2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069a8:	4b4b      	ldr	r3, [pc, #300]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80069aa:	60bb      	str	r3, [r7, #8]
       break;
 80069ac:	e08c      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ae:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069b0:	60bb      	str	r3, [r7, #8]
      break;
 80069b2:	e089      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b4:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80069be:	4b45      	ldr	r3, [pc, #276]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d023      	beq.n	8006a12 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	f04f 0400 	mov.w	r4, #0
 80069d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	ea03 0501 	and.w	r5, r3, r1
 80069e0:	ea04 0602 	and.w	r6, r4, r2
 80069e4:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069e6:	fb02 f106 	mul.w	r1, r2, r6
 80069ea:	2200      	movs	r2, #0
 80069ec:	fb02 f205 	mul.w	r2, r2, r5
 80069f0:	440a      	add	r2, r1
 80069f2:	493a      	ldr	r1, [pc, #232]	; (8006adc <HAL_RCC_GetSysClockFreq+0x160>)
 80069f4:	fba5 0101 	umull	r0, r1, r5, r1
 80069f8:	1853      	adds	r3, r2, r1
 80069fa:	4619      	mov	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f04f 0400 	mov.w	r4, #0
 8006a02:	461a      	mov	r2, r3
 8006a04:	4623      	mov	r3, r4
 8006a06:	f7f9 fc73 	bl	80002f0 <__aeabi_uldivmod>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e049      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a12:	4b30      	ldr	r3, [pc, #192]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	f04f 0400 	mov.w	r4, #0
 8006a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	ea03 0501 	and.w	r5, r3, r1
 8006a28:	ea04 0602 	and.w	r6, r4, r2
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4632      	mov	r2, r6
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	0154      	lsls	r4, r2, #5
 8006a3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a3e:	014b      	lsls	r3, r1, #5
 8006a40:	4619      	mov	r1, r3
 8006a42:	4622      	mov	r2, r4
 8006a44:	1b49      	subs	r1, r1, r5
 8006a46:	eb62 0206 	sbc.w	r2, r2, r6
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	f04f 0400 	mov.w	r4, #0
 8006a52:	0194      	lsls	r4, r2, #6
 8006a54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a58:	018b      	lsls	r3, r1, #6
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	eb64 0402 	sbc.w	r4, r4, r2
 8006a60:	f04f 0100 	mov.w	r1, #0
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	00e2      	lsls	r2, r4, #3
 8006a6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a6e:	00d9      	lsls	r1, r3, #3
 8006a70:	460b      	mov	r3, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	195b      	adds	r3, r3, r5
 8006a76:	eb44 0406 	adc.w	r4, r4, r6
 8006a7a:	f04f 0100 	mov.w	r1, #0
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	02a2      	lsls	r2, r4, #10
 8006a84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a88:	0299      	lsls	r1, r3, #10
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	4621      	mov	r1, r4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f04f 0400 	mov.w	r4, #0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	f7f9 fc28 	bl	80002f0 <__aeabi_uldivmod>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	60bb      	str	r3, [r7, #8]
      break;
 8006ac0:	e002      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ac4:	60bb      	str	r3, [r7, #8]
      break;
 8006ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	00f42400 	.word	0x00f42400
 8006adc:	017d7840 	.word	0x017d7840

08006ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d012      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b08:	4b69      	ldr	r3, [pc, #420]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a68      	ldr	r2, [pc, #416]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b12:	6093      	str	r3, [r2, #8]
 8006b14:	4b66      	ldr	r3, [pc, #408]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1c:	4964      	ldr	r1, [pc, #400]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d017      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b3a:	4b5d      	ldr	r3, [pc, #372]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	4959      	ldr	r1, [pc, #356]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b58:	d101      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b66:	2301      	movs	r3, #1
 8006b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d017      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b76:	4b4e      	ldr	r3, [pc, #312]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	494a      	ldr	r1, [pc, #296]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b94:	d101      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b96:	2301      	movs	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 808b 	beq.w	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bc4:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	4a39      	ldr	r2, [pc, #228]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd0:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bdc:	4b35      	ldr	r3, [pc, #212]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a34      	ldr	r2, [pc, #208]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be8:	f7fb fe8e 	bl	8002908 <HAL_GetTick>
 8006bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf0:	f7fb fe8a 	bl	8002908 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b64      	cmp	r3, #100	; 0x64
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e38d      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c0e:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d035      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d02e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c36:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c42:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c4e:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d114      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fb fe52 	bl	8002908 <HAL_GetTick>
 8006c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c66:	e00a      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c68:	f7fb fe4e 	bl	8002908 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e34f      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0ee      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c96:	d111      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ca6:	400b      	ands	r3, r1
 8006ca8:	4901      	ldr	r1, [pc, #4]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	608b      	str	r3, [r1, #8]
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40007000 	.word	0x40007000
 8006cb8:	0ffffcff 	.word	0x0ffffcff
 8006cbc:	4bb3      	ldr	r3, [pc, #716]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4ab2      	ldr	r2, [pc, #712]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cc6:	6093      	str	r3, [r2, #8]
 8006cc8:	4bb0      	ldr	r3, [pc, #704]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd4:	49ad      	ldr	r1, [pc, #692]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ce6:	4ba9      	ldr	r3, [pc, #676]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cec:	4aa7      	ldr	r2, [pc, #668]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cf6:	4ba5      	ldr	r3, [pc, #660]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	49a2      	ldr	r1, [pc, #648]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d14:	4b9d      	ldr	r3, [pc, #628]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d22:	499a      	ldr	r1, [pc, #616]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d36:	4b95      	ldr	r3, [pc, #596]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d44:	4991      	ldr	r1, [pc, #580]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d58:	4b8c      	ldr	r3, [pc, #560]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d66:	4989      	ldr	r1, [pc, #548]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d7a:	4b84      	ldr	r3, [pc, #528]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	4980      	ldr	r1, [pc, #512]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d9c:	4b7b      	ldr	r3, [pc, #492]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	4978      	ldr	r1, [pc, #480]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dbe:	4b73      	ldr	r3, [pc, #460]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f023 020c 	bic.w	r2, r3, #12
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dcc:	496f      	ldr	r1, [pc, #444]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006de0:	4b6a      	ldr	r3, [pc, #424]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	4967      	ldr	r1, [pc, #412]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e02:	4b62      	ldr	r3, [pc, #392]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	495e      	ldr	r1, [pc, #376]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	4956      	ldr	r1, [pc, #344]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e46:	4b51      	ldr	r3, [pc, #324]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	494d      	ldr	r1, [pc, #308]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e68:	4b48      	ldr	r3, [pc, #288]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	4945      	ldr	r1, [pc, #276]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e98:	493c      	ldr	r1, [pc, #240]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006eac:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eba:	4934      	ldr	r1, [pc, #208]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d011      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006edc:	492b      	ldr	r1, [pc, #172]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1c:	491b      	ldr	r1, [pc, #108]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f30:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f40:	4912      	ldr	r1, [pc, #72]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f64:	4909      	ldr	r1, [pc, #36]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	4985      	ldr	r1, [pc, #532]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006fa4:	4b80      	ldr	r3, [pc, #512]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb4:	497c      	ldr	r1, [pc, #496]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d005      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fca:	f040 80d6 	bne.w	800717a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fce:	4b76      	ldr	r3, [pc, #472]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a75      	ldr	r2, [pc, #468]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fda:	f7fb fc95 	bl	8002908 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fb fc91 	bl	8002908 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b64      	cmp	r3, #100	; 0x64
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e194      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ff4:	4b6c      	ldr	r3, [pc, #432]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d021      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d11d      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007014:	4b64      	ldr	r3, [pc, #400]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007022:	4b61      	ldr	r3, [pc, #388]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	019a      	lsls	r2, r3, #6
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	061b      	lsls	r3, r3, #24
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	071b      	lsls	r3, r3, #28
 8007048:	4957      	ldr	r1, [pc, #348]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007064:	d00a      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800706e:	2b00      	cmp	r3, #0
 8007070:	d02e      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800707a:	d129      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800707c:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800707e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800708a:	4b47      	ldr	r3, [pc, #284]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007090:	0f1b      	lsrs	r3, r3, #28
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	019a      	lsls	r2, r3, #6
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	041b      	lsls	r3, r3, #16
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	071b      	lsls	r3, r3, #28
 80070b0:	493d      	ldr	r1, [pc, #244]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070b8:	4b3b      	ldr	r3, [pc, #236]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070be:	f023 021f 	bic.w	r2, r3, #31
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	3b01      	subs	r3, #1
 80070c8:	4937      	ldr	r1, [pc, #220]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01d      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070dc:	4b32      	ldr	r3, [pc, #200]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	019a      	lsls	r2, r3, #6
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	431a      	orrs	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	431a      	orrs	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	071b      	lsls	r3, r3, #28
 8007110:	4925      	ldr	r1, [pc, #148]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d011      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	019a      	lsls	r2, r3, #6
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	061b      	lsls	r3, r3, #24
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	071b      	lsls	r3, r3, #28
 8007140:	4919      	ldr	r1, [pc, #100]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007148:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a16      	ldr	r2, [pc, #88]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007154:	f7fb fbd8 	bl	8002908 <HAL_GetTick>
 8007158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800715c:	f7fb fbd4 	bl	8002908 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	; 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e0d7      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b01      	cmp	r3, #1
 800717e:	f040 80cd 	bne.w	800731c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800718c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718e:	f7fb fbbb 	bl	8002908 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007194:	e00a      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007196:	f7fb fbb7 	bl	8002908 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b64      	cmp	r3, #100	; 0x64
 80071a2:	d903      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e0ba      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80071a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071ac:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b8:	d0ed      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d02e      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d12a      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071e2:	4b51      	ldr	r3, [pc, #324]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071f0:	4b4d      	ldr	r3, [pc, #308]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f6:	0f1b      	lsrs	r3, r3, #28
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	019a      	lsls	r2, r3, #6
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	071b      	lsls	r3, r3, #28
 8007216:	4944      	ldr	r1, [pc, #272]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800721e:	4b42      	ldr	r3, [pc, #264]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007224:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	3b01      	subs	r3, #1
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	493d      	ldr	r1, [pc, #244]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d022      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724c:	d11d      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800724e:	4b36      	ldr	r3, [pc, #216]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800725c:	4b32      	ldr	r3, [pc, #200]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007262:	0f1b      	lsrs	r3, r3, #28
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	019a      	lsls	r2, r3, #6
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	431a      	orrs	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	071b      	lsls	r3, r3, #28
 8007282:	4929      	ldr	r1, [pc, #164]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d028      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072a4:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	019a      	lsls	r2, r3, #6
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	431a      	orrs	r2, r3
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	071b      	lsls	r3, r3, #28
 80072ca:	4917      	ldr	r1, [pc, #92]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072d2:	4b15      	ldr	r3, [pc, #84]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	4911      	ldr	r1, [pc, #68]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072e8:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f4:	f7fb fb08 	bl	8002908 <HAL_GetTick>
 80072f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072fc:	f7fb fb04 	bl	8002908 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	; 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e007      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731a:	d1ef      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800

0800732c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e01d      	b.n	800737a <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f007 fa6d 	bl	800e830 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2203      	movs	r2, #3
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f80f 	bl	8007382 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007382:	b5b0      	push	{r4, r5, r7, lr}
 8007384:	b08e      	sub	sp, #56	; 0x38
 8007386:	af04      	add	r7, sp, #16
 8007388:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800738a:	2300      	movs	r3, #0
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80073a2:	2376      	movs	r3, #118	; 0x76
 80073a4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	466c      	mov	r4, sp
 80073ac:	f107 0318 	add.w	r3, r7, #24
 80073b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073be:	4628      	mov	r0, r5
 80073c0:	f001 fd90 	bl	8008ee4 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073d2:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fdcd 	bl	8008f78 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ec:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80073ee:	2002      	movs	r0, #2
 80073f0:	f7fb fa96 	bl	8002920 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fee3 	bl	80081c0 <SD_PowerON>
 80073fa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e013      	b.n	8007442 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fe07 	bl	800802e <SD_InitCard>
 8007420:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3728      	adds	r7, #40	; 0x28
 8007446:	46bd      	mov	sp, r7
 8007448:	bdb0      	pop	{r4, r5, r7, pc}

0800744a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800744a:	b590      	push	{r4, r7, lr}
 800744c:	b08f      	sub	sp, #60	; 0x3c
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800745c:	f7fb fa54 	bl	8002908 <HAL_GetTick>
 8007460:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8007462:	2300      	movs	r3, #0
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d107      	bne.n	8007480 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e176      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 8169 	bne.w	8007760 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	441a      	add	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749e:	429a      	cmp	r2, r3
 80074a0:	d907      	bls.n	80074b2 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e15d      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d002      	beq.n	80074d0 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	025b      	lsls	r3, r3, #9
 80074ce:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fde1 	bl	80090a0 <SDMMC_CmdBlockLength>
 80074de:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d010      	beq.n	8007508 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	431a      	orrs	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e132      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	025b      	lsls	r3, r3, #9
 8007512:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007514:	2390      	movs	r3, #144	; 0x90
 8007516:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007518:	2302      	movs	r3, #2
 800751a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007520:	2301      	movs	r3, #1
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f107 0210 	add.w	r2, r7, #16
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fd8a 	bl	8009048 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d90a      	bls.n	8007550 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2202      	movs	r2, #2
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fdf2 	bl	8009130 <SDMMC_CmdReadMultiBlock>
 800754c:	6378      	str	r0, [r7, #52]	; 0x34
 800754e:	e009      	b.n	8007564 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fdc3 	bl	80090e8 <SDMMC_CmdReadSingleBlock>
 8007562:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	2b00      	cmp	r3, #0
 8007568:	d04a      	beq.n	8007600 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	431a      	orrs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0f0      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d016      	beq.n	80075c8 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800759a:	2300      	movs	r3, #0
 800759c:	633b      	str	r3, [r7, #48]	; 0x30
 800759e:	e00d      	b.n	80075bc <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6819      	ldr	r1, [r3, #0]
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075aa:	18d4      	adds	r4, r2, r3
 80075ac:	4608      	mov	r0, r1
 80075ae:	f001 fcc5 	bl	8008f3c <SDMMC_ReadFIFO>
 80075b2:	4603      	mov	r3, r0
 80075b4:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	3301      	adds	r3, #1
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2b07      	cmp	r3, #7
 80075c0:	d9ee      	bls.n	80075a0 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	3320      	adds	r3, #32
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80075c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_SD_ReadBlocks+0x194>
 80075ce:	f7fb f99b 	bl	8002908 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075da:	429a      	cmp	r2, r3
 80075dc:	d810      	bhi.n	8007600 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e0b6      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0be      	beq.n	800758c <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d020      	beq.n	800765e <HAL_SD_ReadBlocks+0x214>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d91d      	bls.n	800765e <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	2b03      	cmp	r3, #3
 8007628:	d019      	beq.n	800765e <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fdea 	bl	8009208 <SDMMC_CmdStopTransfer>
 8007634:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007644:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e087      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d010      	beq.n	800768e <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	f043 0208 	orr.w	r2, r3, #8
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e06f      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f043 0202 	orr.w	r2, r3, #2
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e057      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d037      	beq.n	800773c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e03f      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fc22 	bl	8008f3c <SDMMC_ReadFIFO>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	3304      	adds	r3, #4
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <HAL_SD_ReadBlocks+0x2d0>
 800770a:	f7fb f8fd 	bl	8002908 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007716:	429a      	cmp	r2, r3
 8007718:	d810      	bhi.n	800773c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e018      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1d1      	bne.n	80076ee <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007752:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e006      	b.n	800776e <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	373c      	adds	r7, #60	; 0x3c
 8007772:	46bd      	mov	sp, r7
 8007774:	bd90      	pop	{r4, r7, pc}

08007776 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b08e      	sub	sp, #56	; 0x38
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007788:	f7fb f8be 	bl	8002908 <HAL_GetTick>
 800778c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d107      	bne.n	80077ac <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e147      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	f040 813a 	bne.w	8007a2e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	441a      	add	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d907      	bls.n	80077de <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e12e      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2203      	movs	r2, #3
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d002      	beq.n	80077fc <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	025b      	lsls	r3, r3, #9
 80077fa:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fc4b 	bl	80090a0 <SDMMC_CmdBlockLength>
 800780a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	2b00      	cmp	r3, #0
 8007810:	d010      	beq.n	8007834 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	431a      	orrs	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e103      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d90a      	bls.n	8007850 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fcba 	bl	80091c0 <SDMMC_CmdWriteMultiBlock>
 800784c:	6378      	str	r0, [r7, #52]	; 0x34
 800784e:	e009      	b.n	8007864 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2210      	movs	r2, #16
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fc8b 	bl	8009178 <SDMMC_CmdWriteSingleBlock>
 8007862:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0d7      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800788c:	f04f 33ff 	mov.w	r3, #4294967295
 8007890:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	025b      	lsls	r3, r3, #9
 8007896:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007898:	2390      	movs	r3, #144	; 0x90
 800789a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f107 0210 	add.w	r2, r7, #16
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 fbc8 	bl	8009048 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80078b8:	e037      	b.n	800792a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d014      	beq.n	80078f2 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	633b      	str	r3, [r7, #48]	; 0x30
 80078cc:	e00b      	b.n	80078e6 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d8:	4413      	add	r3, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	f001 fb3b 	bl	8008f56 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	3301      	adds	r3, #1
 80078e4:	633b      	str	r3, [r7, #48]	; 0x30
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2b07      	cmp	r3, #7
 80078ea:	d9f0      	bls.n	80078ce <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	3320      	adds	r3, #32
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80078f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <HAL_SD_WriteBlocks+0x192>
 80078f8:	f7fb f806 	bl	8002908 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007904:	429a      	cmp	r2, r3
 8007906:	d810      	bhi.n	800792a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	431a      	orrs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e088      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0c0      	beq.n	80078ba <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d020      	beq.n	8007988 <HAL_SD_WriteBlocks+0x212>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d91d      	bls.n	8007988 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007950:	2b03      	cmp	r3, #3
 8007952:	d019      	beq.n	8007988 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fc55 	bl	8009208 <SDMMC_CmdStopTransfer>
 800795e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e059      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d010      	beq.n	80079b8 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	f043 0208 	orr.w	r2, r3, #8
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e041      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d010      	beq.n	80079e8 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	f043 0202 	orr.w	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e029      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d010      	beq.n	8007a18 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	f043 0210 	orr.w	r2, r3, #16
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e011      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e006      	b.n	8007a3c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
  }
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3738      	adds	r7, #56	; 0x38
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a56:	0e1b      	lsrs	r3, r3, #24
 8007a58:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	099b      	lsrs	r3, r3, #6
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	88db      	ldrh	r3, [r3, #6]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	091b      	lsrs	r3, r3, #4
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	09db      	lsrs	r3, r3, #7
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	099b      	lsrs	r3, r3, #6
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	091b      	lsrs	r3, r3, #4
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 8086 	bne.w	8007c68 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	029b      	lsls	r3, r3, #10
 8007b60:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b82:	0e1b      	lsrs	r3, r3, #24
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	099b      	lsrs	r3, r3, #6
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	431a      	orrs	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	08db      	lsrs	r3, r3, #3
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	089b      	lsrs	r3, r3, #2
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f003 0306 	and.w	r3, r3, #6
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	7e1b      	ldrb	r3, [r3, #24]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	09db      	lsrs	r3, r3, #7
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	7e1b      	ldrb	r3, [r3, #24]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	3302      	adds	r3, #2
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	409a      	lsls	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	fb02 f203 	mul.w	r2, r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	7a1b      	ldrb	r3, [r3, #8]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	2301      	movs	r3, #1
 8007c44:	4093      	lsls	r3, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007c54:	0a52      	lsrs	r2, r2, #9
 8007c56:	fb02 f203 	mul.w	r2, r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c64:	661a      	str	r2, [r3, #96]	; 0x60
 8007c66:	e04d      	b.n	8007d04 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d138      	bne.n	8007ce2 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	0e1b      	lsrs	r3, r3, #24
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	431a      	orrs	r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	029a      	lsls	r2, r3, #10
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	661a      	str	r2, [r3, #96]	; 0x60
 8007ce0:	e010      	b.n	8007d04 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0c1      	b.n	8007e88 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	099b      	lsrs	r3, r3, #6
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	7e9b      	ldrb	r3, [r3, #26]
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	09db      	lsrs	r3, r3, #7
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	4313      	orrs	r3, r2
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	0e1b      	lsrs	r3, r3, #24
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	09db      	lsrs	r3, r3, #7
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	7fdb      	ldrb	r3, [r3, #31]
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	099b      	lsrs	r3, r3, #6
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	095b      	lsrs	r3, r3, #5
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	09db      	lsrs	r3, r3, #7
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	099b      	lsrs	r3, r3, #6
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	089b      	lsrs	r3, r3, #2
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007eec:	b5b0      	push	{r4, r5, r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d02e      	beq.n	8007f68 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f10:	d106      	bne.n	8007f20 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f1e:	e029      	b.n	8007f74 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f26:	d10a      	bne.n	8007f3e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa1b 	bl	8008364 <SD_WideBus_Enable>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f3c:	e01a      	b.n	8007f74 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa5a 	bl	80083fe <SD_WideBus_Disable>
 8007f4a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
 8007f58:	e00c      	b.n	8007f74 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
 8007f66:	e005      	b.n	8007f74 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e024      	b.n	8007fdc <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681d      	ldr	r5, [r3, #0]
 8007fb8:	466c      	mov	r4, sp
 8007fba:	f107 0318 	add.w	r3, r7, #24
 8007fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f000 ff89 	bl	8008ee4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3728      	adds	r7, #40	; 0x28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bdb0      	pop	{r4, r5, r7, pc}

08007fe4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8007fec:	2304      	movs	r3, #4
 8007fee:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8007ff8:	f107 030c 	add.w	r3, r7, #12
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f986 	bl	8008310 <SD_SendStatus>
 8008004:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d005      	beq.n	8008018 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0a5b      	lsrs	r3, r3, #9
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800802e:	b5b0      	push	{r4, r5, r7, lr}
 8008030:	b094      	sub	sp, #80	; 0x50
 8008032:	af04      	add	r7, sp, #16
 8008034:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800803a:	2301      	movs	r3, #1
 800803c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 ffa6 	bl	8008f94 <SDMMC_GetPowerState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800804e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008052:	e0b1      	b.n	80081b8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008058:	2b03      	cmp	r3, #3
 800805a:	d02f      	beq.n	80080bc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f9ec 	bl	800943e <SDMMC_CmdSendCID>
 8008066:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <SD_InitCard+0x44>
    {
      return errorstate;
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	e0a2      	b.n	80081b8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f000 ffd0 	bl	800901e <SDMMC_GetResponse>
 800807e:	4602      	mov	r2, r0
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2104      	movs	r1, #4
 800808a:	4618      	mov	r0, r3
 800808c:	f000 ffc7 	bl	800901e <SDMMC_GetResponse>
 8008090:	4602      	mov	r2, r0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2108      	movs	r1, #8
 800809c:	4618      	mov	r0, r3
 800809e:	f000 ffbe 	bl	800901e <SDMMC_GetResponse>
 80080a2:	4602      	mov	r2, r0
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	210c      	movs	r1, #12
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 ffb5 	bl	800901e <SDMMC_GetResponse>
 80080b4:	4602      	mov	r2, r0
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d00d      	beq.n	80080e0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f107 020e 	add.w	r2, r7, #14
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 f9f6 	bl	80094c0 <SDMMC_CmdSetRelAdd>
 80080d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80080dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080de:	e06b      	b.n	80081b8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d036      	beq.n	8008156 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f001 f9be 	bl	800947e <SDMMC_CmdSendCSD>
 8008102:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <SD_InitCard+0xe0>
    {
      return errorstate;
 800810a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810c:	e054      	b.n	80081b8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f000 ff82 	bl	800901e <SDMMC_GetResponse>
 800811a:	4602      	mov	r2, r0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2104      	movs	r1, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f000 ff79 	bl	800901e <SDMMC_GetResponse>
 800812c:	4602      	mov	r2, r0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2108      	movs	r1, #8
 8008138:	4618      	mov	r0, r3
 800813a:	f000 ff70 	bl	800901e <SDMMC_GetResponse>
 800813e:	4602      	mov	r2, r0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	210c      	movs	r1, #12
 800814a:	4618      	mov	r0, r3
 800814c:	f000 ff67 	bl	800901e <SDMMC_GetResponse>
 8008150:	4602      	mov	r2, r0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2104      	movs	r1, #4
 800815c:	4618      	mov	r0, r3
 800815e:	f000 ff5e 	bl	800901e <SDMMC_GetResponse>
 8008162:	4603      	mov	r3, r0
 8008164:	0d1a      	lsrs	r2, r3, #20
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800816a:	f107 0310 	add.w	r3, r7, #16
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fc67 	bl	8007a44 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	f04f 0400 	mov.w	r4, #0
 8008184:	461a      	mov	r2, r3
 8008186:	4623      	mov	r3, r4
 8008188:	4608      	mov	r0, r1
 800818a:	f001 f861 	bl	8009250 <SDMMC_CmdSelDesel>
 800818e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <SD_InitCard+0x16c>
  {
    return errorstate;
 8008196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008198:	e00e      	b.n	80081b8 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681d      	ldr	r5, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	466c      	mov	r4, sp
 80081a2:	f103 0210 	add.w	r2, r3, #16
 80081a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80081a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081ac:	3304      	adds	r3, #4
 80081ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 fe97 	bl	8008ee4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3740      	adds	r7, #64	; 0x40
 80081bc:	46bd      	mov	sp, r7
 80081be:	bdb0      	pop	{r4, r5, r7, pc}

080081c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 f85c 	bl	800929a <SDMMC_CmdGoIdleState>
 80081e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <SD_PowerON+0x2e>
  {
    return errorstate;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	e08c      	b.n	8008308 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f001 f871 	bl	80092da <SDMMC_CmdOperCond>
 80081f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03d      	beq.n	800827c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008206:	e032      	b.n	800826e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	60ba      	str	r2, [r7, #8]
 800820e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008212:	4293      	cmp	r3, r2
 8008214:	d102      	bne.n	800821c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800821a:	e075      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f001 f87a 	bl	800931c <SDMMC_CmdAppCommand>
 8008228:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008234:	e068      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f001 f891 	bl	8009364 <SDMMC_CmdAppOperCommand>
 8008242:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800824a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800824e:	e05b      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fee1 	bl	800901e <SDMMC_GetResponse>
 800825c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	0fdb      	lsrs	r3, r3, #31
 8008262:	2b01      	cmp	r3, #1
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0c9      	beq.n	8008208 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
 800827a:	e044      	b.n	8008306 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008282:	e031      	b.n	80082e8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	60ba      	str	r2, [r7, #8]
 800828a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800828e:	4293      	cmp	r3, r2
 8008290:	d102      	bne.n	8008298 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008296:	e037      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f83c 	bl	800931c <SDMMC_CmdAppCommand>
 80082a4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <SD_PowerON+0xf0>
      {
        return errorstate;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	e02b      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 f853 	bl	8009364 <SDMMC_CmdAppOperCommand>
 80082be:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <SD_PowerON+0x10a>
      {
        return errorstate;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	e01e      	b.n	8008308 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2100      	movs	r1, #0
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fea4 	bl	800901e <SDMMC_GetResponse>
 80082d6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	0fdb      	lsrs	r3, r3, #31
 80082dc:	2b01      	cmp	r3, #1
 80082de:	bf0c      	ite	eq
 80082e0:	2301      	moveq	r3, #1
 80082e2:	2300      	movne	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ca      	beq.n	8008284 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44
 80082fe:	e002      	b.n	8008306 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008328:	e018      	b.n	800835c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f001 f8e5 	bl	8009506 <SDMMC_CmdSendStatus>
 800833c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <SD_SendStatus+0x38>
  {
    return errorstate;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	e009      	b.n	800835c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fe65 	bl	800901e <SDMMC_GetResponse>
 8008354:	4602      	mov	r2, r0
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	2300      	movs	r3, #0
 8008372:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fe4d 	bl	800901e <SDMMC_GetResponse>
 8008384:	4603      	mov	r3, r0
 8008386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800838e:	d102      	bne.n	8008396 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008394:	e02f      	b.n	80083f6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f87b 	bl	8008498 <SD_FindSCR>
 80083a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	e023      	b.n	80083f6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01c      	beq.n	80083f2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f000 ffa9 	bl	800931c <SDMMC_CmdAppCommand>
 80083ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	e00f      	b.n	80083f6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2102      	movs	r1, #2
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 ffe7 	bl	80093b0 <SDMMC_CmdBusWidth>
 80083e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	e003      	b.n	80083f6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e001      	b.n	80083f6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	2300      	movs	r3, #0
 800840c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fe00 	bl	800901e <SDMMC_GetResponse>
 800841e:	4603      	mov	r3, r0
 8008420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008428:	d102      	bne.n	8008430 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800842a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800842e:	e02f      	b.n	8008490 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008430:	f107 030c 	add.w	r3, r7, #12
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f82e 	bl	8008498 <SD_FindSCR>
 800843c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	e023      	b.n	8008490 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01c      	beq.n	800848c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f000 ff5c 	bl	800931c <SDMMC_CmdAppCommand>
 8008464:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	e00f      	b.n	8008490 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2100      	movs	r1, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f000 ff9a 	bl	80093b0 <SDMMC_CmdBusWidth>
 800847c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	e003      	b.n	8008490 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008488:	2300      	movs	r3, #0
 800848a:	e001      	b.n	8008490 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800848c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008498:	b590      	push	{r4, r7, lr}
 800849a:	b08f      	sub	sp, #60	; 0x3c
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80084a6:	f7fa fa2f 	bl	8002908 <HAL_GetTick>
 80084aa:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2108      	movs	r1, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fdee 	bl	80090a0 <SDMMC_CmdBlockLength>
 80084c4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	e0a8      	b.n	8008622 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f000 ff1d 	bl	800931c <SDMMC_CmdAppCommand>
 80084e2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	e099      	b.n	8008622 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295
 80084f2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80084f4:	2308      	movs	r3, #8
 80084f6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80084f8:	2330      	movs	r3, #48	; 0x30
 80084fa:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084fc:	2302      	movs	r3, #2
 80084fe:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008500:	2300      	movs	r3, #0
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008504:	2301      	movs	r3, #1
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f107 0214 	add.w	r2, r7, #20
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fd98 	bl	8009048 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 ff6b 	bl	80093f8 <SDMMC_CmdSendSCR>
 8008522:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2b00      	cmp	r3, #0
 8008528:	d022      	beq.n	8008570 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	e079      	b.n	8008622 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	f107 020c 	add.w	r2, r7, #12
 8008548:	18d4      	adds	r4, r2, r3
 800854a:	4608      	mov	r0, r1
 800854c:	f000 fcf6 	bl	8008f3c <SDMMC_ReadFIFO>
 8008550:	4603      	mov	r3, r0
 8008552:	6023      	str	r3, [r4, #0]
      index++;
 8008554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008556:	3301      	adds	r3, #1
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800855a:	f7fa f9d5 	bl	8002908 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008568:	d102      	bne.n	8008570 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800856a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800856e:	e058      	b.n	8008622 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008576:	f240 432a 	movw	r3, #1066	; 0x42a
 800857a:	4013      	ands	r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0d6      	beq.n	800852e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2208      	movs	r2, #8
 8008594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008596:	2308      	movs	r3, #8
 8008598:	e043      	b.n	8008622 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2202      	movs	r2, #2
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085b0:	2302      	movs	r3, #2
 80085b2:	e036      	b.n	8008622 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2220      	movs	r2, #32
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80085ca:	2320      	movs	r3, #32
 80085cc:	e029      	b.n	8008622 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	061a      	lsls	r2, r3, #24
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085e4:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085ee:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80085fa:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085fc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	061a      	lsls	r2, r3, #24
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800860a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008614:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	0e1b      	lsrs	r3, r3, #24
 800861a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	373c      	adds	r7, #60	; 0x3c
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}

0800862a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e025      	b.n	800868a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d106      	bne.n	8008658 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f006 fa36 	bl	800eac4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3304      	adds	r3, #4
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f000 fb14 	bl	8008c98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	461a      	mov	r2, r3
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	f000 fb7e 	bl	8008d7c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d101      	bne.n	80086ae <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80086aa:	2302      	movs	r3, #2
 80086ac:	e018      	b.n	80086e0 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fbdc 	bl	8008e7c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d104      	bne.n	80086d6 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2205      	movs	r2, #5
 80086d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80086d4:	e003      	b.n	80086de <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d101      	bne.n	8008702 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80086fe:	2302      	movs	r3, #2
 8008700:	e00e      	b.n	8008720 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fbd4 	bl	8008ebe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e01d      	b.n	8008776 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f006 f8ee 	bl	800e930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f000 f97c 	bl	8008a64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <HAL_TIM_Base_Start_IT+0x50>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b06      	cmp	r3, #6
 80087a8:	d00b      	beq.n	80087c2 <HAL_TIM_Base_Start_IT+0x42>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b0:	d007      	beq.n	80087c2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0201 	orr.w	r2, r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	00010007 	.word	0x00010007

080087d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d122      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d11b      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0202 	mvn.w	r2, #2
 8008800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f905 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f8f7 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f908 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b04      	cmp	r3, #4
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0204 	mvn.w	r2, #4
 8008854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8db 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8cd 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8de 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b08      	cmp	r3, #8
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0208 	mvn.w	r2, #8
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2204      	movs	r2, #4
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f8b1 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8a3 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f8b4 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0210 	mvn.w	r2, #16
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2208      	movs	r2, #8
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f887 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f879 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f88a 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10e      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d107      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0201 	mvn.w	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 fb18 	bl	800bf88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f976 	bl	8008c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008992:	d10e      	bne.n	80089b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	d107      	bne.n	80089b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f969 	bl	8008c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d10e      	bne.n	80089de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d107      	bne.n	80089de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f838 	bl	8008a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d10e      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d107      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f06f 0220 	mvn.w	r2, #32
 8008a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f929 	bl	8008c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a40      	ldr	r2, [pc, #256]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d013      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a82:	d00f      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a3d      	ldr	r2, [pc, #244]	; (8008b7c <TIM_Base_SetConfig+0x118>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00b      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a3c      	ldr	r2, [pc, #240]	; (8008b80 <TIM_Base_SetConfig+0x11c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d007      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a3b      	ldr	r2, [pc, #236]	; (8008b84 <TIM_Base_SetConfig+0x120>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a3a      	ldr	r2, [pc, #232]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d108      	bne.n	8008ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac4:	d027      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a2c      	ldr	r2, [pc, #176]	; (8008b7c <TIM_Base_SetConfig+0x118>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d023      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2b      	ldr	r2, [pc, #172]	; (8008b80 <TIM_Base_SetConfig+0x11c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d01f      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a2a      	ldr	r2, [pc, #168]	; (8008b84 <TIM_Base_SetConfig+0x120>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a29      	ldr	r2, [pc, #164]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d017      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a28      	ldr	r2, [pc, #160]	; (8008b8c <TIM_Base_SetConfig+0x128>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a27      	ldr	r2, [pc, #156]	; (8008b90 <TIM_Base_SetConfig+0x12c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00f      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a26      	ldr	r2, [pc, #152]	; (8008b94 <TIM_Base_SetConfig+0x130>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a25      	ldr	r2, [pc, #148]	; (8008b98 <TIM_Base_SetConfig+0x134>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d007      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a24      	ldr	r2, [pc, #144]	; (8008b9c <TIM_Base_SetConfig+0x138>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a23      	ldr	r2, [pc, #140]	; (8008ba0 <TIM_Base_SetConfig+0x13c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d108      	bne.n	8008b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a0a      	ldr	r2, [pc, #40]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_Base_SetConfig+0xf8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d103      	bne.n	8008b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	615a      	str	r2, [r3, #20]
}
 8008b6a:	bf00      	nop
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40010400 	.word	0x40010400
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400
 8008b94:	40014800 	.word	0x40014800
 8008b98:	40001800 	.word	0x40001800
 8008b9c:	40001c00 	.word	0x40001c00
 8008ba0:	40002000 	.word	0x40002000

08008ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e045      	b.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d004      	beq.n	8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1b      	ldr	r2, [pc, #108]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d108      	bne.n	8008c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40010400 	.word	0x40010400

08008c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d027      	beq.n	8008d02 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <FMC_SDRAM_Init+0xe0>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cc8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008cce:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008cd4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008cda:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008ce0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008ce6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008cec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008cf2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e032      	b.n	8008d68 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d0e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008d1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <FMC_SDRAM_Init+0xe0>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d3c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008d42:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008d48:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008d4e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008d54:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	ffff8000 	.word	0xffff8000

08008d7c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d02e      	beq.n	8008df4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008da2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008db2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008dbc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008dc6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008dd0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008dda:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008de4:	4313      	orrs	r3, r2
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	609a      	str	r2, [r3, #8]
 8008df2:	e039      	b.n	8008e68 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <FMC_SDRAM_Timing_Init+0xfc>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008e12:	4313      	orrs	r3, r2
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e26:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e36:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008e40:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008e4a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008e54:	4313      	orrs	r3, r2
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	ff0f0fff 	.word	0xff0f0fff

08008e7c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008e94:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008e9e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	695a      	ldr	r2, [r3, #20]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	f107 001c 	add.w	r0, r7, #28
 8008ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008efa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008efc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008efe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008f02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008f06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008f0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008f0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <SDMMC_Init+0x54>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	b004      	add	sp, #16
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	ffff8100 	.word	0xffff8100

08008f3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2203      	movs	r2, #3
 8008f84:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0303 	and.w	r3, r3, #3
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008fd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008fda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	4b06      	ldr	r3, [pc, #24]	; (8009000 <SDMMC_SendCommand+0x50>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	fffff000 	.word	0xfffff000

08009004 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	b2db      	uxtb	r3, r3
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3314      	adds	r3, #20
 8009030:	461a      	mov	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	4413      	add	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
}  
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800906e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009074:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800907a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009092:	2300      	movs	r3, #0

}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80090b2:	2310      	movs	r3, #16
 80090b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c4:	f107 0308 	add.w	r3, r7, #8
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff ff70 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80090d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d4:	2110      	movs	r1, #16
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa64 	bl	80095a4 <SDMMC_GetCmdResp1>
 80090dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090de:	69fb      	ldr	r3, [r7, #28]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090fa:	2311      	movs	r3, #17
 80090fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090fe:	2340      	movs	r3, #64	; 0x40
 8009100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800910c:	f107 0308 	add.w	r3, r7, #8
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff ff4c 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009118:	f241 3288 	movw	r2, #5000	; 0x1388
 800911c:	2111      	movs	r1, #17
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fa40 	bl	80095a4 <SDMMC_GetCmdResp1>
 8009124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009126:	69fb      	ldr	r3, [r7, #28]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009142:	2312      	movs	r3, #18
 8009144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009146:	2340      	movs	r3, #64	; 0x40
 8009148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009152:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ff28 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009160:	f241 3288 	movw	r2, #5000	; 0x1388
 8009164:	2112      	movs	r1, #18
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa1c 	bl	80095a4 <SDMMC_GetCmdResp1>
 800916c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916e:	69fb      	ldr	r3, [r7, #28]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800918a:	2318      	movs	r3, #24
 800918c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800919c:	f107 0308 	add.w	r3, r7, #8
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff ff04 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80091a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ac:	2118      	movs	r1, #24
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f9f8 	bl	80095a4 <SDMMC_GetCmdResp1>
 80091b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b6:	69fb      	ldr	r3, [r7, #28]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091d2:	2319      	movs	r3, #25
 80091d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fee0 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	2119      	movs	r1, #25
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f9d4 	bl	80095a4 <SDMMC_GetCmdResp1>
 80091fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091fe:	69fb      	ldr	r3, [r7, #28]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3720      	adds	r7, #32
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009210:	2300      	movs	r3, #0
 8009212:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009218:	230c      	movs	r3, #12
 800921a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009228:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff febd 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009236:	4a05      	ldr	r2, [pc, #20]	; (800924c <SDMMC_CmdStopTransfer+0x44>)
 8009238:	210c      	movs	r1, #12
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9b2 	bl	80095a4 <SDMMC_GetCmdResp1>
 8009240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009242:	69fb      	ldr	r3, [r7, #28]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	05f5e100 	.word	0x05f5e100

08009250 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	; 0x28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800925c:	2300      	movs	r3, #0
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009264:	2307      	movs	r3, #7
 8009266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009268:	2340      	movs	r3, #64	; 0x40
 800926a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009274:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009276:	f107 0310 	add.w	r3, r7, #16
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff fe97 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009282:	f241 3288 	movw	r2, #5000	; 0x1388
 8009286:	2107      	movs	r1, #7
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f98b 	bl	80095a4 <SDMMC_GetCmdResp1>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009292:	4618      	mov	r0, r3
 8009294:	3728      	adds	r7, #40	; 0x28
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b088      	sub	sp, #32
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092b2:	2300      	movs	r3, #0
 80092b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092bc:	f107 0308 	add.w	r3, r7, #8
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fe74 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f941 	bl	8009550 <SDMMC_GetCmdError>
 80092ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d0:	69fb      	ldr	r3, [r7, #28]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b088      	sub	sp, #32
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092ec:	2308      	movs	r3, #8
 80092ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f0:	2340      	movs	r3, #64	; 0x40
 80092f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff fe53 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fb12 	bl	8009934 <SDMMC_GetCmdResp7>
 8009310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009312:	69fb      	ldr	r3, [r7, #28]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800932e:	2337      	movs	r3, #55	; 0x37
 8009330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009332:	2340      	movs	r3, #64	; 0x40
 8009334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800933a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009340:	f107 0308 	add.w	r3, r7, #8
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff fe32 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800934c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009350:	2137      	movs	r1, #55	; 0x37
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f926 	bl	80095a4 <SDMMC_GetCmdResp1>
 8009358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935a:	69fb      	ldr	r3, [r7, #28]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <SDMMC_CmdAppOperCommand+0x48>)
 8009376:	4313      	orrs	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800937a:	2329      	movs	r3, #41	; 0x29
 800937c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800937e:	2340      	movs	r3, #64	; 0x40
 8009380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff fe0c 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fa29 	bl	80097f0 <SDMMC_GetCmdResp3>
 800939e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a0:	69fb      	ldr	r3, [r7, #28]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	80100000 	.word	0x80100000

080093b0 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80093c2:	2306      	movs	r3, #6
 80093c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c6:	2340      	movs	r3, #64	; 0x40
 80093c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fde8 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80093e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e4:	2106      	movs	r1, #6
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f8dc 	bl	80095a4 <SDMMC_GetCmdResp1>
 80093ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ee:	69fb      	ldr	r3, [r7, #28]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009400:	2300      	movs	r3, #0
 8009402:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009408:	2333      	movs	r3, #51	; 0x33
 800940a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009418:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800941a:	f107 0308 	add.w	r3, r7, #8
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fdc5 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009426:	f241 3288 	movw	r2, #5000	; 0x1388
 800942a:	2133      	movs	r1, #51	; 0x33
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f8b9 	bl	80095a4 <SDMMC_GetCmdResp1>
 8009432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009434:	69fb      	ldr	r3, [r7, #28]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b088      	sub	sp, #32
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800944e:	2302      	movs	r3, #2
 8009450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009452:	23c0      	movs	r3, #192	; 0xc0
 8009454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800945a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fda2 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f97f 	bl	8009770 <SDMMC_GetCmdResp2>
 8009472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009474:	69fb      	ldr	r3, [r7, #28]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b088      	sub	sp, #32
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009488:	2300      	movs	r3, #0
 800948a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009490:	2309      	movs	r3, #9
 8009492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009494:	23c0      	movs	r3, #192	; 0xc0
 8009496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a2:	f107 0308 	add.w	r3, r7, #8
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff fd81 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f95e 	bl	8009770 <SDMMC_GetCmdResp2>
 80094b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b6:	69fb      	ldr	r3, [r7, #28]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80094d2:	2303      	movs	r3, #3
 80094d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fd60 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	2103      	movs	r1, #3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f9af 	bl	8009858 <SDMMC_GetCmdResp6>
 80094fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094fc:	69fb      	ldr	r3, [r7, #28]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3720      	adds	r7, #32
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b088      	sub	sp, #32
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009518:	230d      	movs	r3, #13
 800951a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009520:	2300      	movs	r3, #0
 8009522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009528:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800952a:	f107 0308 	add.w	r3, r7, #8
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fd3d 	bl	8008fb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009536:	f241 3288 	movw	r2, #5000	; 0x1388
 800953a:	210d      	movs	r1, #13
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f831 	bl	80095a4 <SDMMC_GetCmdResp1>
 8009542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009544:	69fb      	ldr	r3, [r7, #28]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009550:	b490      	push	{r4, r7}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009558:	4b10      	ldr	r3, [pc, #64]	; (800959c <SDMMC_GetCmdError+0x4c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a10      	ldr	r2, [pc, #64]	; (80095a0 <SDMMC_GetCmdError+0x50>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0a5b      	lsrs	r3, r3, #9
 8009564:	f241 3288 	movw	r2, #5000	; 0x1388
 8009568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800956c:	4623      	mov	r3, r4
 800956e:	1e5c      	subs	r4, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009578:	e00a      	b.n	8009590 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f2      	beq.n	800956c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800958c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bc90      	pop	{r4, r7}
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	2000007c 	.word	0x2000007c
 80095a0:	10624dd3 	.word	0x10624dd3

080095a4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	460b      	mov	r3, r1
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80095b2:	4b6c      	ldr	r3, [pc, #432]	; (8009764 <SDMMC_GetCmdResp1+0x1c0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a6c      	ldr	r2, [pc, #432]	; (8009768 <SDMMC_GetCmdResp1+0x1c4>)
 80095b8:	fba2 2303 	umull	r2, r3, r2, r3
 80095bc:	0a5b      	lsrs	r3, r3, #9
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80095c4:	4623      	mov	r3, r4
 80095c6:	1e5c      	subs	r4, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d0:	e0c3      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0f2      	beq.n	80095c4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2204      	movs	r2, #4
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f0:	2304      	movs	r3, #4
 80095f2:	e0b2      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009606:	2301      	movs	r3, #1
 8009608:	e0a7      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fcfa 	bl	8009004 <SDMMC_GetCommandResponse>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	4293      	cmp	r3, r2
 8009618:	d001      	beq.n	800961e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961a:	2301      	movs	r3, #1
 800961c:	e09d      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009624:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009626:	2100      	movs	r1, #0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff fcf8 	bl	800901e <SDMMC_GetResponse>
 800962e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	4b4e      	ldr	r3, [pc, #312]	; (800976c <SDMMC_GetCmdResp1+0x1c8>)
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
 800963c:	e08d      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	da02      	bge.n	800964a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009648:	e087      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	e080      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009662:	2380      	movs	r3, #128	; 0x80
 8009664:	e079      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009674:	e071      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009684:	e069      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009694:	e061      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096a4:	e059      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b4:	e051      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096c4:	e049      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096d4:	e041      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80096e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e4:	e039      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096f4:	e031      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009700:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009704:	e029      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009714:	e021      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009724:	e019      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009734:	e011      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009744:	e009      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009750:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009754:	e001      	b.n	800975a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd90      	pop	{r4, r7, pc}
 8009762:	bf00      	nop
 8009764:	2000007c 	.word	0x2000007c
 8009768:	10624dd3 	.word	0x10624dd3
 800976c:	fdffe008 	.word	0xfdffe008

08009770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009770:	b490      	push	{r4, r7}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <SDMMC_GetCmdResp2+0x78>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <SDMMC_GetCmdResp2+0x7c>)
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	0a5b      	lsrs	r3, r3, #9
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
 8009788:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800978c:	4623      	mov	r3, r4
 800978e:	1e5c      	subs	r4, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009798:	e020      	b.n	80097dc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0f2      	beq.n	800978c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2204      	movs	r2, #4
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097b8:	2304      	movs	r3, #4
 80097ba:	e00f      	b.n	80097dc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e004      	b.n	80097dc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc90      	pop	{r4, r7}
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	2000007c 	.word	0x2000007c
 80097ec:	10624dd3 	.word	0x10624dd3

080097f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80097f0:	b490      	push	{r4, r7}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80097f8:	4b15      	ldr	r3, [pc, #84]	; (8009850 <SDMMC_GetCmdResp3+0x60>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a15      	ldr	r2, [pc, #84]	; (8009854 <SDMMC_GetCmdResp3+0x64>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	0a5b      	lsrs	r3, r3, #9
 8009804:	f241 3288 	movw	r2, #5000	; 0x1388
 8009808:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800980c:	4623      	mov	r3, r4
 800980e:	1e5c      	subs	r4, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d102      	bne.n	800981a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009818:	e015      	b.n	8009846 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0f2      	beq.n	800980c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2204      	movs	r2, #4
 8009836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009838:	2304      	movs	r3, #4
 800983a:	e004      	b.n	8009846 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009842:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bc90      	pop	{r4, r7}
 800984e:	4770      	bx	lr
 8009850:	2000007c 	.word	0x2000007c
 8009854:	10624dd3 	.word	0x10624dd3

08009858 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	460b      	mov	r3, r1
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009866:	4b31      	ldr	r3, [pc, #196]	; (800992c <SDMMC_GetCmdResp6+0xd4>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a31      	ldr	r2, [pc, #196]	; (8009930 <SDMMC_GetCmdResp6+0xd8>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	0a5b      	lsrs	r3, r3, #9
 8009872:	f241 3288 	movw	r2, #5000	; 0x1388
 8009876:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800987a:	4623      	mov	r3, r4
 800987c:	1e5c      	subs	r4, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009882:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009886:	e04c      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f2      	beq.n	800987a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2204      	movs	r2, #4
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098a6:	2304      	movs	r3, #4
 80098a8:	e03b      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098bc:	2301      	movs	r3, #1
 80098be:	e030      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fb9f 	bl	8009004 <SDMMC_GetCommandResponse>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d001      	beq.n	80098d4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e026      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098dc:	2100      	movs	r1, #0
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7ff fb9d 	bl	800901e <SDMMC_GetResponse>
 80098e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	0c1b      	lsrs	r3, r3, #16
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e011      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800990c:	e009      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800991c:	e001      	b.n	8009922 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800991e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}
 800992a:	bf00      	nop
 800992c:	2000007c 	.word	0x2000007c
 8009930:	10624dd3 	.word	0x10624dd3

08009934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009934:	b490      	push	{r4, r7}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800993c:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <SDMMC_GetCmdResp7+0x6c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a18      	ldr	r2, [pc, #96]	; (80099a4 <SDMMC_GetCmdResp7+0x70>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	0a5b      	lsrs	r3, r3, #9
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009950:	4623      	mov	r3, r4
 8009952:	1e5c      	subs	r4, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800995c:	e01a      	b.n	8009994 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009962:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0f2      	beq.n	8009950 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2240      	movs	r2, #64	; 0x40
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800997c:	2304      	movs	r3, #4
 800997e:	e009      	b.n	8009994 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2240      	movs	r2, #64	; 0x40
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009992:	2300      	movs	r3, #0
  
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bc90      	pop	{r4, r7}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	2000007c 	.word	0x2000007c
 80099a4:	10624dd3 	.word	0x10624dd3

080099a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	4a08      	ldr	r2, [pc, #32]	; (80099d8 <disk_status+0x30>)
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	79fa      	ldrb	r2, [r7, #7]
 80099c0:	4905      	ldr	r1, [pc, #20]	; (80099d8 <disk_status+0x30>)
 80099c2:	440a      	add	r2, r1
 80099c4:	7a12      	ldrb	r2, [r2, #8]
 80099c6:	4610      	mov	r0, r2
 80099c8:	4798      	blx	r3
 80099ca:	4603      	mov	r3, r0
 80099cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20000338 	.word	0x20000338

080099dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	4a0d      	ldr	r2, [pc, #52]	; (8009a24 <disk_initialize+0x48>)
 80099ee:	5cd3      	ldrb	r3, [r2, r3]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d111      	bne.n	8009a18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	4a0b      	ldr	r2, [pc, #44]	; (8009a24 <disk_initialize+0x48>)
 80099f8:	2101      	movs	r1, #1
 80099fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	4a09      	ldr	r2, [pc, #36]	; (8009a24 <disk_initialize+0x48>)
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	79fa      	ldrb	r2, [r7, #7]
 8009a0a:	4906      	ldr	r1, [pc, #24]	; (8009a24 <disk_initialize+0x48>)
 8009a0c:	440a      	add	r2, r1
 8009a0e:	7a12      	ldrb	r2, [r2, #8]
 8009a10:	4610      	mov	r0, r2
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000338 	.word	0x20000338

08009a28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4a0a      	ldr	r2, [pc, #40]	; (8009a64 <disk_read+0x3c>)
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	689c      	ldr	r4, [r3, #8]
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	4a07      	ldr	r2, [pc, #28]	; (8009a64 <disk_read+0x3c>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	7a18      	ldrb	r0, [r3, #8]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	47a0      	blx	r4
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd90      	pop	{r4, r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000338 	.word	0x20000338

08009a68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	603b      	str	r3, [r7, #0]
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	; (8009aa4 <disk_write+0x3c>)
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68dc      	ldr	r4, [r3, #12]
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4a07      	ldr	r2, [pc, #28]	; (8009aa4 <disk_write+0x3c>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	7a18      	ldrb	r0, [r3, #8]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	47a0      	blx	r4
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000338 	.word	0x20000338

08009aa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	603a      	str	r2, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <disk_ioctl+0x38>)
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	79fa      	ldrb	r2, [r7, #7]
 8009ac6:	4906      	ldr	r1, [pc, #24]	; (8009ae0 <disk_ioctl+0x38>)
 8009ac8:	440a      	add	r2, r1
 8009aca:	7a10      	ldrb	r0, [r2, #8]
 8009acc:	79b9      	ldrb	r1, [r7, #6]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4798      	blx	r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  return res;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000338 	.word	0x20000338

08009ae4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3301      	adds	r3, #1
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009af4:	89fb      	ldrh	r3, [r7, #14]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	b21a      	sxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	b21b      	sxth	r3, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009b06:	89fb      	ldrh	r3, [r7, #14]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	3202      	adds	r2, #2
 8009b2c:	7812      	ldrb	r2, [r2, #0]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	3201      	adds	r2, #1
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	887a      	ldrh	r2, [r7, #2]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	887b      	ldrh	r3, [r7, #2]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	887a      	ldrh	r2, [r7, #2]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	0a1b      	lsrs	r3, r3, #8
 8009bbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	0a1b      	lsrs	r3, r3, #8
 8009bce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	701a      	strb	r2, [r3, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00d      	beq.n	8009c1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	1c53      	adds	r3, r2, #1
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	1c59      	adds	r1, r3, #1
 8009c0c:	6179      	str	r1, [r7, #20]
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f1      	bne.n	8009c02 <mem_cpy+0x1a>
	}
}
 8009c1e:	bf00      	nop
 8009c20:	371c      	adds	r7, #28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c2a:	b480      	push	{r7}
 8009c2c:	b087      	sub	sp, #28
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	617a      	str	r2, [r7, #20]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	607b      	str	r3, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f3      	bne.n	8009c3a <mem_set+0x10>
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c5e:	b480      	push	{r7}
 8009c60:	b089      	sub	sp, #36	; 0x24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	61fa      	str	r2, [r7, #28]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	61ba      	str	r2, [r7, #24]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	1acb      	subs	r3, r1, r3
 8009c8a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <mem_cmp+0x40>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0eb      	beq.n	8009c76 <mem_cmp+0x18>

	return r;
 8009c9e:	697b      	ldr	r3, [r7, #20]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3724      	adds	r7, #36	; 0x24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009cb6:	e002      	b.n	8009cbe <chk_chr+0x12>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	607b      	str	r3, [r7, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <chk_chr+0x26>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d1f2      	bne.n	8009cb8 <chk_chr+0xc>
	return *str;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
	...

08009ce4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e029      	b.n	8009d4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009cf8:	4a27      	ldr	r2, [pc, #156]	; (8009d98 <chk_lock+0xb4>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	4413      	add	r3, r2
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d01d      	beq.n	8009d42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d06:	4a24      	ldr	r2, [pc, #144]	; (8009d98 <chk_lock+0xb4>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d116      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009d18:	4a1f      	ldr	r2, [pc, #124]	; (8009d98 <chk_lock+0xb4>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	4413      	add	r3, r2
 8009d20:	3304      	adds	r3, #4
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d10c      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d2c:	4a1a      	ldr	r2, [pc, #104]	; (8009d98 <chk_lock+0xb4>)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	4413      	add	r3, r2
 8009d34:	3308      	adds	r3, #8
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d102      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d40:	e007      	b.n	8009d52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009d42:	2301      	movs	r3, #1
 8009d44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d9d2      	bls.n	8009cf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d109      	bne.n	8009d6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <chk_lock+0x80>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d101      	bne.n	8009d68 <chk_lock+0x84>
 8009d64:	2300      	movs	r3, #0
 8009d66:	e010      	b.n	8009d8a <chk_lock+0xa6>
 8009d68:	2312      	movs	r3, #18
 8009d6a:	e00e      	b.n	8009d8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d108      	bne.n	8009d84 <chk_lock+0xa0>
 8009d72:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <chk_lock+0xb4>)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	4413      	add	r3, r2
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d82:	d101      	bne.n	8009d88 <chk_lock+0xa4>
 8009d84:	2310      	movs	r3, #16
 8009d86:	e000      	b.n	8009d8a <chk_lock+0xa6>
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000318 	.word	0x20000318

08009d9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009da2:	2300      	movs	r3, #0
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	e002      	b.n	8009dae <enq_lock+0x12>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3301      	adds	r3, #1
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d806      	bhi.n	8009dc2 <enq_lock+0x26>
 8009db4:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <enq_lock+0x40>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	4413      	add	r3, r2
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f2      	bne.n	8009da8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	bf14      	ite	ne
 8009dc8:	2301      	movne	r3, #1
 8009dca:	2300      	moveq	r3, #0
 8009dcc:	b2db      	uxtb	r3, r3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000318 	.word	0x20000318

08009de0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e01f      	b.n	8009e30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009df0:	4a41      	ldr	r2, [pc, #260]	; (8009ef8 <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d113      	bne.n	8009e2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009e02:	4a3d      	ldr	r2, [pc, #244]	; (8009ef8 <inc_lock+0x118>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	4413      	add	r3, r2
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d109      	bne.n	8009e2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009e16:	4a38      	ldr	r2, [pc, #224]	; (8009ef8 <inc_lock+0x118>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3308      	adds	r3, #8
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d006      	beq.n	8009e38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d9dc      	bls.n	8009df0 <inc_lock+0x10>
 8009e36:	e000      	b.n	8009e3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009e38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d132      	bne.n	8009ea6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e002      	b.n	8009e4c <inc_lock+0x6c>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d806      	bhi.n	8009e60 <inc_lock+0x80>
 8009e52:	4a29      	ldr	r2, [pc, #164]	; (8009ef8 <inc_lock+0x118>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	4413      	add	r3, r2
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1f2      	bne.n	8009e46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d101      	bne.n	8009e6a <inc_lock+0x8a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	e040      	b.n	8009eec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4922      	ldr	r1, [pc, #136]	; (8009ef8 <inc_lock+0x118>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	440b      	add	r3, r1
 8009e76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	491e      	ldr	r1, [pc, #120]	; (8009ef8 <inc_lock+0x118>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	440b      	add	r3, r1
 8009e84:	3304      	adds	r3, #4
 8009e86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	695a      	ldr	r2, [r3, #20]
 8009e8c:	491a      	ldr	r1, [pc, #104]	; (8009ef8 <inc_lock+0x118>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	440b      	add	r3, r1
 8009e94:	3308      	adds	r3, #8
 8009e96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e98:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <inc_lock+0x118>)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	4413      	add	r3, r2
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d009      	beq.n	8009ec0 <inc_lock+0xe0>
 8009eac:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <inc_lock+0x118>)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <inc_lock+0xe0>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e015      	b.n	8009eec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d108      	bne.n	8009ed8 <inc_lock+0xf8>
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <inc_lock+0x118>)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	4413      	add	r3, r2
 8009ece:	330c      	adds	r3, #12
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	e001      	b.n	8009edc <inc_lock+0xfc>
 8009ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009edc:	4906      	ldr	r1, [pc, #24]	; (8009ef8 <inc_lock+0x118>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	440b      	add	r3, r1
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	20000318 	.word	0x20000318

08009efc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d825      	bhi.n	8009f5c <dec_lock+0x60>
		n = Files[i].ctr;
 8009f10:	4a17      	ldr	r2, [pc, #92]	; (8009f70 <dec_lock+0x74>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	4413      	add	r3, r2
 8009f18:	330c      	adds	r3, #12
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f1e:	89fb      	ldrh	r3, [r7, #14]
 8009f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f24:	d101      	bne.n	8009f2a <dec_lock+0x2e>
 8009f26:	2300      	movs	r3, #0
 8009f28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <dec_lock+0x3a>
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f36:	4a0e      	ldr	r2, [pc, #56]	; (8009f70 <dec_lock+0x74>)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	4413      	add	r3, r2
 8009f3e:	330c      	adds	r3, #12
 8009f40:	89fa      	ldrh	r2, [r7, #14]
 8009f42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f44:	89fb      	ldrh	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <dec_lock+0x5a>
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <dec_lock+0x74>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	737b      	strb	r3, [r7, #13]
 8009f5a:	e001      	b.n	8009f60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f60:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000318 	.word	0x20000318

08009f74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e010      	b.n	8009fa4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f82:	4a0d      	ldr	r2, [pc, #52]	; (8009fb8 <clear_lock+0x44>)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	4413      	add	r3, r2
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d105      	bne.n	8009f9e <clear_lock+0x2a>
 8009f92:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <clear_lock+0x44>)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	4413      	add	r3, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d9eb      	bls.n	8009f82 <clear_lock+0xe>
	}
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000318 	.word	0x20000318

08009fbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d034      	beq.n	800a03a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7858      	ldrb	r0, [r3, #1]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	f7ff fd40 	bl	8009a68 <disk_write>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e022      	b.n	800a03a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	1ad2      	subs	r2, r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	429a      	cmp	r2, r3
 800a008:	d217      	bcs.n	800a03a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	789b      	ldrb	r3, [r3, #2]
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	e010      	b.n	800a034 <sync_window+0x78>
					wsect += fs->fsize;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	4413      	add	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7858      	ldrb	r0, [r3, #1]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a026:	2301      	movs	r3, #1
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	f7ff fd1d 	bl	8009a68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3b01      	subs	r3, #1
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d8eb      	bhi.n	800a012 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d01b      	beq.n	800a094 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ffad 	bl	8009fbc <sync_window>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d113      	bne.n	800a094 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7858      	ldrb	r0, [r3, #1]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a076:	2301      	movs	r3, #1
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	f7ff fcd5 	bl	8009a28 <disk_read>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a084:	f04f 33ff 	mov.w	r3, #4294967295
 800a088:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ff87 	bl	8009fbc <sync_window>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d158      	bne.n	800a16a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d148      	bne.n	800a152 <sync_fs+0xb2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	791b      	ldrb	r3, [r3, #4]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d144      	bne.n	800a152 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3330      	adds	r3, #48	; 0x30
 800a0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fda9 	bl	8009c2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3330      	adds	r3, #48	; 0x30
 800a0dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fd38 	bl	8009b5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3330      	adds	r3, #48	; 0x30
 800a0ee:	4921      	ldr	r1, [pc, #132]	; (800a174 <sync_fs+0xd4>)
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fd4d 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3330      	adds	r3, #48	; 0x30
 800a0fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0fe:	491e      	ldr	r1, [pc, #120]	; (800a178 <sync_fs+0xd8>)
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fd45 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3330      	adds	r3, #48	; 0x30
 800a10a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	4619      	mov	r1, r3
 800a114:	4610      	mov	r0, r2
 800a116:	f7ff fd3b 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3330      	adds	r3, #48	; 0x30
 800a11e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f7ff fd31 	bl	8009b90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7858      	ldrb	r0, [r3, #1]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a146:	2301      	movs	r3, #1
 800a148:	f7ff fc8e 	bl	8009a68 <disk_write>
			fs->fsi_flag = 0;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fca4 	bl	8009aa8 <disk_ioctl>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <sync_fs+0xca>
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	41615252 	.word	0x41615252
 800a178:	61417272 	.word	0x61417272

0800a17c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	3b02      	subs	r3, #2
 800a18a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	3b02      	subs	r3, #2
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d301      	bcc.n	800a19c <clust2sect+0x20>
 800a198:	2300      	movs	r3, #0
 800a19a:	e008      	b.n	800a1ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	895b      	ldrh	r3, [r3, #10]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	fb03 f202 	mul.w	r2, r3, r2
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ac:	4413      	add	r3, r2
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d904      	bls.n	800a1da <get_fat+0x20>
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d302      	bcc.n	800a1e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a1da:	2301      	movs	r3, #1
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e08c      	b.n	800a2fa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d045      	beq.n	800a27a <get_fat+0xc0>
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d05d      	beq.n	800a2ae <get_fat+0xf4>
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d177      	bne.n	800a2e6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	085b      	lsrs	r3, r3, #1
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4413      	add	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6a1a      	ldr	r2, [r3, #32]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	0a5b      	lsrs	r3, r3, #9
 800a20c:	4413      	add	r3, r2
 800a20e:	4619      	mov	r1, r3
 800a210:	6938      	ldr	r0, [r7, #16]
 800a212:	f7ff ff17 	bl	800a044 <move_window>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d167      	bne.n	800a2ec <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	60fa      	str	r2, [r7, #12]
 800a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a22e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	6a1a      	ldr	r2, [r3, #32]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	0a5b      	lsrs	r3, r3, #9
 800a238:	4413      	add	r3, r2
 800a23a:	4619      	mov	r1, r3
 800a23c:	6938      	ldr	r0, [r7, #16]
 800a23e:	f7ff ff01 	bl	800a044 <move_window>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d153      	bne.n	800a2f0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4413      	add	r3, r2
 800a252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	461a      	mov	r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <get_fat+0xb6>
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	091b      	lsrs	r3, r3, #4
 800a26e:	e002      	b.n	800a276 <get_fat+0xbc>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a276:	617b      	str	r3, [r7, #20]
			break;
 800a278:	e03f      	b.n	800a2fa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6a1a      	ldr	r2, [r3, #32]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	0a1b      	lsrs	r3, r3, #8
 800a282:	4413      	add	r3, r2
 800a284:	4619      	mov	r1, r3
 800a286:	6938      	ldr	r0, [r7, #16]
 800a288:	f7ff fedc 	bl	800a044 <move_window>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d130      	bne.n	800a2f4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fc1e 	bl	8009ae4 <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	617b      	str	r3, [r7, #20]
			break;
 800a2ac:	e025      	b.n	800a2fa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6a1a      	ldr	r2, [r3, #32]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	09db      	lsrs	r3, r3, #7
 800a2b6:	4413      	add	r3, r2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6938      	ldr	r0, [r7, #16]
 800a2bc:	f7ff fec2 	bl	800a044 <move_window>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d118      	bne.n	800a2f8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a2d4:	4413      	add	r3, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fc1c 	bl	8009b14 <ld_dword>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2e2:	617b      	str	r3, [r7, #20]
			break;
 800a2e4:	e009      	b.n	800a2fa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	617b      	str	r3, [r7, #20]
 800a2ea:	e006      	b.n	800a2fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ec:	bf00      	nop
 800a2ee:	e004      	b.n	800a2fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f0:	bf00      	nop
 800a2f2:	e002      	b.n	800a2fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2f4:	bf00      	nop
 800a2f6:	e000      	b.n	800a2fa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2f8:	bf00      	nop
		}
	}

	return val;
 800a2fa:	697b      	ldr	r3, [r7, #20]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b089      	sub	sp, #36	; 0x24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a310:	2302      	movs	r3, #2
 800a312:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b01      	cmp	r3, #1
 800a318:	f240 80d6 	bls.w	800a4c8 <put_fat+0x1c4>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	429a      	cmp	r2, r3
 800a324:	f080 80d0 	bcs.w	800a4c8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d073      	beq.n	800a418 <put_fat+0x114>
 800a330:	2b03      	cmp	r3, #3
 800a332:	f000 8091 	beq.w	800a458 <put_fat+0x154>
 800a336:	2b01      	cmp	r3, #1
 800a338:	f040 80c6 	bne.w	800a4c8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	61bb      	str	r3, [r7, #24]
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	4413      	add	r3, r2
 800a348:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a1a      	ldr	r2, [r3, #32]
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	0a5b      	lsrs	r3, r3, #9
 800a352:	4413      	add	r3, r2
 800a354:	4619      	mov	r1, r3
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7ff fe74 	bl	800a044 <move_window>
 800a35c:	4603      	mov	r3, r0
 800a35e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a360:	7ffb      	ldrb	r3, [r7, #31]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 80a9 	bne.w	800a4ba <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	61b9      	str	r1, [r7, #24]
 800a374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a378:	4413      	add	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00d      	beq.n	800a3a2 <put_fat+0x9e>
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	f003 030f 	and.w	r3, r3, #15
 800a390:	b25a      	sxtb	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e001      	b.n	800a3a6 <put_fat+0xa2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	0a5b      	lsrs	r3, r3, #9
 800a3b8:	4413      	add	r3, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7ff fe41 	bl	800a044 <move_window>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3c6:	7ffb      	ldrb	r3, [r7, #31]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d178      	bne.n	800a4be <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d8:	4413      	add	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <put_fat+0xea>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	091b      	lsrs	r3, r3, #4
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	e00e      	b.n	800a40c <put_fat+0x108>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f023 030f 	bic.w	r3, r3, #15
 800a3f8:	b25a      	sxtb	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	b25b      	sxtb	r3, r3
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	b25b      	sxtb	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	70da      	strb	r2, [r3, #3]
			break;
 800a416:	e057      	b.n	800a4c8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a1a      	ldr	r2, [r3, #32]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	0a1b      	lsrs	r3, r3, #8
 800a420:	4413      	add	r3, r2
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff fe0d 	bl	800a044 <move_window>
 800a42a:	4603      	mov	r3, r0
 800a42c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a42e:	7ffb      	ldrb	r3, [r7, #31]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d146      	bne.n	800a4c2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a442:	4413      	add	r3, r2
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	b292      	uxth	r2, r2
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff fb85 	bl	8009b5a <st_word>
			fs->wflag = 1;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2201      	movs	r2, #1
 800a454:	70da      	strb	r2, [r3, #3]
			break;
 800a456:	e037      	b.n	800a4c8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1a      	ldr	r2, [r3, #32]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	09db      	lsrs	r3, r3, #7
 800a460:	4413      	add	r3, r2
 800a462:	4619      	mov	r1, r3
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff fded 	bl	800a044 <move_window>
 800a46a:	4603      	mov	r3, r0
 800a46c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a46e:	7ffb      	ldrb	r3, [r7, #31]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d128      	bne.n	800a4c6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a488:	4413      	add	r3, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff fb42 	bl	8009b14 <ld_dword>
 800a490:	4603      	mov	r3, r0
 800a492:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a496:	4323      	orrs	r3, r4
 800a498:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4a8:	4413      	add	r3, r2
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fb6f 	bl	8009b90 <st_dword>
			fs->wflag = 1;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	70da      	strb	r2, [r3, #3]
			break;
 800a4b8:	e006      	b.n	800a4c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a4ba:	bf00      	nop
 800a4bc:	e004      	b.n	800a4c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a4be:	bf00      	nop
 800a4c0:	e002      	b.n	800a4c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a4c2:	bf00      	nop
 800a4c4:	e000      	b.n	800a4c8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a4c6:	bf00      	nop
		}
	}
	return res;
 800a4c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3724      	adds	r7, #36	; 0x24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd90      	pop	{r4, r7, pc}

0800a4d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b088      	sub	sp, #32
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d904      	bls.n	800a4f8 <remove_chain+0x26>
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d301      	bcc.n	800a4fc <remove_chain+0x2a>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e04b      	b.n	800a594 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00c      	beq.n	800a51c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a502:	f04f 32ff 	mov.w	r2, #4294967295
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	69b8      	ldr	r0, [r7, #24]
 800a50a:	f7ff fefb 	bl	800a304 <put_fat>
 800a50e:	4603      	mov	r3, r0
 800a510:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <remove_chain+0x4a>
 800a518:	7ffb      	ldrb	r3, [r7, #31]
 800a51a:	e03b      	b.n	800a594 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7ff fe4b 	bl	800a1ba <get_fat>
 800a524:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d031      	beq.n	800a590 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d101      	bne.n	800a536 <remove_chain+0x64>
 800a532:	2302      	movs	r3, #2
 800a534:	e02e      	b.n	800a594 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53c:	d101      	bne.n	800a542 <remove_chain+0x70>
 800a53e:	2301      	movs	r3, #1
 800a540:	e028      	b.n	800a594 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a542:	2200      	movs	r2, #0
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	69b8      	ldr	r0, [r7, #24]
 800a548:	f7ff fedc 	bl	800a304 <put_fat>
 800a54c:	4603      	mov	r3, r0
 800a54e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a550:	7ffb      	ldrb	r3, [r7, #31]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <remove_chain+0x88>
 800a556:	7ffb      	ldrb	r3, [r7, #31]
 800a558:	e01c      	b.n	800a594 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	691a      	ldr	r2, [r3, #16]
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	3b02      	subs	r3, #2
 800a564:	429a      	cmp	r2, r3
 800a566:	d20b      	bcs.n	800a580 <remove_chain+0xae>
			fs->free_clst++;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	791b      	ldrb	r3, [r3, #4]
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d3c6      	bcc.n	800a51c <remove_chain+0x4a>
 800a58e:	e000      	b.n	800a592 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a590:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3720      	adds	r7, #32
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10d      	bne.n	800a5ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <create_chain+0x2c>
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d31b      	bcc.n	800a600 <create_chain+0x64>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	e018      	b.n	800a600 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fdf2 	bl	800a1ba <get_fat>
 800a5d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d801      	bhi.n	800a5e2 <create_chain+0x46>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e070      	b.n	800a6c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d101      	bne.n	800a5ee <create_chain+0x52>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	e06a      	b.n	800a6c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d201      	bcs.n	800a5fc <create_chain+0x60>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	e063      	b.n	800a6c4 <create_chain+0x128>
		scl = clst;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	3301      	adds	r3, #1
 800a608:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	69fa      	ldr	r2, [r7, #28]
 800a610:	429a      	cmp	r2, r3
 800a612:	d307      	bcc.n	800a624 <create_chain+0x88>
				ncl = 2;
 800a614:	2302      	movs	r3, #2
 800a616:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d901      	bls.n	800a624 <create_chain+0x88>
 800a620:	2300      	movs	r3, #0
 800a622:	e04f      	b.n	800a6c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a624:	69f9      	ldr	r1, [r7, #28]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fdc7 	bl	800a1ba <get_fat>
 800a62c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00e      	beq.n	800a652 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d003      	beq.n	800a642 <create_chain+0xa6>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d101      	bne.n	800a646 <create_chain+0xaa>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	e03e      	b.n	800a6c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d1da      	bne.n	800a604 <create_chain+0x68>
 800a64e:	2300      	movs	r3, #0
 800a650:	e038      	b.n	800a6c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a652:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a654:	f04f 32ff 	mov.w	r2, #4294967295
 800a658:	69f9      	ldr	r1, [r7, #28]
 800a65a:	6938      	ldr	r0, [r7, #16]
 800a65c:	f7ff fe52 	bl	800a304 <put_fat>
 800a660:	4603      	mov	r3, r0
 800a662:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <create_chain+0xe2>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d006      	beq.n	800a67e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6938      	ldr	r0, [r7, #16]
 800a676:	f7ff fe45 	bl	800a304 <put_fat>
 800a67a:	4603      	mov	r3, r0
 800a67c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d116      	bne.n	800a6b2 <create_chain+0x116>
		fs->last_clst = ncl;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	3b02      	subs	r3, #2
 800a694:	429a      	cmp	r2, r3
 800a696:	d804      	bhi.n	800a6a2 <create_chain+0x106>
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	1e5a      	subs	r2, r3, #1
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	791b      	ldrb	r3, [r3, #4]
 800a6a6:	f043 0301 	orr.w	r3, r3, #1
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	711a      	strb	r2, [r3, #4]
 800a6b0:	e007      	b.n	800a6c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d102      	bne.n	800a6be <create_chain+0x122>
 800a6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6bc:	e000      	b.n	800a6c0 <create_chain+0x124>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a6c2:	69fb      	ldr	r3, [r7, #28]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	0a5b      	lsrs	r3, r3, #9
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	8952      	ldrh	r2, [r2, #10]
 800a6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	1d1a      	adds	r2, r3, #4
 800a6f6:	613a      	str	r2, [r7, #16]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <clmt_clust+0x3a>
 800a702:	2300      	movs	r3, #0
 800a704:	e010      	b.n	800a728 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d307      	bcc.n	800a71e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	3304      	adds	r3, #4
 800a71a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a71c:	e7e9      	b.n	800a6f2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a71e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4413      	add	r3, r2
}
 800a728:	4618      	mov	r0, r3
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a74a:	d204      	bcs.n	800a756 <dir_sdi+0x22>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	f003 031f 	and.w	r3, r3, #31
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a756:	2302      	movs	r3, #2
 800a758:	e063      	b.n	800a822 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <dir_sdi+0x46>
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d902      	bls.n	800a77a <dir_sdi+0x46>
		clst = fs->dirbase;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10c      	bne.n	800a79a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	8912      	ldrh	r2, [r2, #8]
 800a788:	4293      	cmp	r3, r2
 800a78a:	d301      	bcc.n	800a790 <dir_sdi+0x5c>
 800a78c:	2302      	movs	r3, #2
 800a78e:	e048      	b.n	800a822 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	61da      	str	r2, [r3, #28]
 800a798:	e029      	b.n	800a7ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	895b      	ldrh	r3, [r3, #10]
 800a79e:	025b      	lsls	r3, r3, #9
 800a7a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7a2:	e019      	b.n	800a7d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff fd06 	bl	800a1ba <get_fat>
 800a7ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	d101      	bne.n	800a7bc <dir_sdi+0x88>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e032      	b.n	800a822 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d904      	bls.n	800a7cc <dir_sdi+0x98>
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d301      	bcc.n	800a7d0 <dir_sdi+0x9c>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e028      	b.n	800a822 <dir_sdi+0xee>
			ofs -= csz;
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d2e1      	bcs.n	800a7a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a7e0:	6979      	ldr	r1, [r7, #20]
 800a7e2:	6938      	ldr	r0, [r7, #16]
 800a7e4:	f7ff fcca 	bl	800a17c <clust2sect>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <dir_sdi+0xcc>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e010      	b.n	800a822 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	69da      	ldr	r2, [r3, #28]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	0a5b      	lsrs	r3, r3, #9
 800a808:	441a      	add	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81a:	441a      	add	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	3320      	adds	r3, #32
 800a840:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <dir_next+0x28>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a850:	d301      	bcc.n	800a856 <dir_next+0x2c>
 800a852:	2304      	movs	r3, #4
 800a854:	e0aa      	b.n	800a9ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8098 	bne.w	800a992 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10b      	bne.n	800a88c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	8912      	ldrh	r2, [r2, #8]
 800a87c:	4293      	cmp	r3, r2
 800a87e:	f0c0 8088 	bcc.w	800a992 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	61da      	str	r2, [r3, #28]
 800a888:	2304      	movs	r3, #4
 800a88a:	e08f      	b.n	800a9ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	0a5b      	lsrs	r3, r3, #9
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	8952      	ldrh	r2, [r2, #10]
 800a894:	3a01      	subs	r2, #1
 800a896:	4013      	ands	r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d17a      	bne.n	800a992 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	f7ff fc88 	bl	800a1ba <get_fat>
 800a8aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d801      	bhi.n	800a8b6 <dir_next+0x8c>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e07a      	b.n	800a9ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d101      	bne.n	800a8c2 <dir_next+0x98>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e074      	b.n	800a9ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d358      	bcc.n	800a97e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d104      	bne.n	800a8dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	61da      	str	r2, [r3, #28]
 800a8d8:	2304      	movs	r3, #4
 800a8da:	e067      	b.n	800a9ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f7ff fe59 	bl	800a59c <create_chain>
 800a8ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <dir_next+0xcc>
 800a8f2:	2307      	movs	r3, #7
 800a8f4:	e05a      	b.n	800a9ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d101      	bne.n	800a900 <dir_next+0xd6>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e055      	b.n	800a9ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d101      	bne.n	800a90c <dir_next+0xe2>
 800a908:	2301      	movs	r3, #1
 800a90a:	e04f      	b.n	800a9ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fb55 	bl	8009fbc <sync_window>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <dir_next+0xf2>
 800a918:	2301      	movs	r3, #1
 800a91a:	e047      	b.n	800a9ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3330      	adds	r3, #48	; 0x30
 800a920:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff f97f 	bl	8009c2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a92c:	2300      	movs	r3, #0
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	6979      	ldr	r1, [r7, #20]
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fc22 	bl	800a17c <clust2sect>
 800a938:	4602      	mov	r2, r0
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a93e:	e012      	b.n	800a966 <dir_next+0x13c>
						fs->wflag = 1;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2201      	movs	r2, #1
 800a944:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fb38 	bl	8009fbc <sync_window>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <dir_next+0x12c>
 800a952:	2301      	movs	r3, #1
 800a954:	e02a      	b.n	800a9ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	3301      	adds	r3, #1
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	62da      	str	r2, [r3, #44]	; 0x2c
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	895b      	ldrh	r3, [r3, #10]
 800a96a:	461a      	mov	r2, r3
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4293      	cmp	r3, r2
 800a970:	d3e6      	bcc.n	800a940 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a984:	6979      	ldr	r1, [r7, #20]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fbf8 	bl	800a17c <clust2sect>
 800a98c:	4602      	mov	r2, r0
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a4:	441a      	add	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff feb4 	bl	800a734 <dir_sdi>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d12b      	bne.n	800aa2e <dir_alloc+0x7a>
		n = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff fb2f 	bl	800a044 <move_window>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d11d      	bne.n	800aa2c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2be5      	cmp	r3, #229	; 0xe5
 800a9f8:	d004      	beq.n	800aa04 <dir_alloc+0x50>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d107      	bne.n	800aa14 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	3301      	adds	r3, #1
 800aa08:	613b      	str	r3, [r7, #16]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d102      	bne.n	800aa18 <dir_alloc+0x64>
 800aa12:	e00c      	b.n	800aa2e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa18:	2101      	movs	r1, #1
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ff05 	bl	800a82a <dir_next>
 800aa20:	4603      	mov	r3, r0
 800aa22:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0d7      	beq.n	800a9da <dir_alloc+0x26>
 800aa2a:	e000      	b.n	800aa2e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa2c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b04      	cmp	r3, #4
 800aa32:	d101      	bne.n	800aa38 <dir_alloc+0x84>
 800aa34:	2307      	movs	r3, #7
 800aa36:	75fb      	strb	r3, [r7, #23]
	return res;
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	331a      	adds	r3, #26
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff f847 	bl	8009ae4 <ld_word>
 800aa56:	4603      	mov	r3, r0
 800aa58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d109      	bne.n	800aa76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	3314      	adds	r3, #20
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff f83c 	bl	8009ae4 <ld_word>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa76:	68fb      	ldr	r3, [r7, #12]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	331a      	adds	r3, #26
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	b292      	uxth	r2, r2
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff f85f 	bl	8009b5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d109      	bne.n	800aab8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f103 0214 	add.w	r2, r3, #20
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	0c1b      	lsrs	r3, r3, #16
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f7ff f851 	bl	8009b5a <st_word>
	}
}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aace:	2100      	movs	r1, #0
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff fe2f 	bl	800a734 <dir_sdi>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <dir_find+0x24>
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	e03e      	b.n	800ab62 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	4619      	mov	r1, r3
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f7ff faaa 	bl	800a044 <move_window>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d12f      	bne.n	800ab5a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <dir_find+0x4e>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	75fb      	strb	r3, [r7, #23]
 800ab0c:	e028      	b.n	800ab60 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	330b      	adds	r3, #11
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	330b      	adds	r3, #11
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <dir_find+0x86>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a18      	ldr	r0, [r3, #32]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3324      	adds	r3, #36	; 0x24
 800ab38:	220b      	movs	r2, #11
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f7ff f88f 	bl	8009c5e <mem_cmp>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fe6e 	bl	800a82a <dir_next>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0c5      	beq.n	800aae4 <dir_find+0x24>
 800ab58:	e002      	b.n	800ab60 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab5e:	bf00      	nop

	return res;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ab78:	2101      	movs	r1, #1
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ff1a 	bl	800a9b4 <dir_alloc>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11c      	bne.n	800abc4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68b8      	ldr	r0, [r7, #8]
 800ab92:	f7ff fa57 	bl	800a044 <move_window>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d111      	bne.n	800abc4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	2220      	movs	r2, #32
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff f83e 	bl	8009c2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a18      	ldr	r0, [r3, #32]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3324      	adds	r3, #36	; 0x24
 800abb6:	220b      	movs	r2, #11
 800abb8:	4619      	mov	r1, r3
 800abba:	f7ff f815 	bl	8009be8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2201      	movs	r2, #1
 800abc2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3324      	adds	r3, #36	; 0x24
 800abe4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800abe6:	220b      	movs	r2, #11
 800abe8:	2120      	movs	r1, #32
 800abea:	68b8      	ldr	r0, [r7, #8]
 800abec:	f7ff f81d 	bl	8009c2a <mem_set>
	si = i = 0; ni = 8;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	2308      	movs	r3, #8
 800abfa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	617a      	str	r2, [r7, #20]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac0a:	7ffb      	ldrb	r3, [r7, #31]
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d94e      	bls.n	800acae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ac10:	7ffb      	ldrb	r3, [r7, #31]
 800ac12:	2b2f      	cmp	r3, #47	; 0x2f
 800ac14:	d006      	beq.n	800ac24 <create_name+0x54>
 800ac16:	7ffb      	ldrb	r3, [r7, #31]
 800ac18:	2b5c      	cmp	r3, #92	; 0x5c
 800ac1a:	d110      	bne.n	800ac3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac1c:	e002      	b.n	800ac24 <create_name+0x54>
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	3301      	adds	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	4413      	add	r3, r2
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac2e:	d0f6      	beq.n	800ac1e <create_name+0x4e>
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	4413      	add	r3, r2
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b5c      	cmp	r3, #92	; 0x5c
 800ac3a:	d0f0      	beq.n	800ac1e <create_name+0x4e>
			break;
 800ac3c:	e038      	b.n	800acb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ac3e:	7ffb      	ldrb	r3, [r7, #31]
 800ac40:	2b2e      	cmp	r3, #46	; 0x2e
 800ac42:	d003      	beq.n	800ac4c <create_name+0x7c>
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d30c      	bcc.n	800ac66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b0b      	cmp	r3, #11
 800ac50:	d002      	beq.n	800ac58 <create_name+0x88>
 800ac52:	7ffb      	ldrb	r3, [r7, #31]
 800ac54:	2b2e      	cmp	r3, #46	; 0x2e
 800ac56:	d001      	beq.n	800ac5c <create_name+0x8c>
 800ac58:	2306      	movs	r3, #6
 800ac5a:	e044      	b.n	800ace6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	613b      	str	r3, [r7, #16]
 800ac60:	230b      	movs	r3, #11
 800ac62:	61bb      	str	r3, [r7, #24]
			continue;
 800ac64:	e022      	b.n	800acac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ac66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da04      	bge.n	800ac78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ac6e:	7ffb      	ldrb	r3, [r7, #31]
 800ac70:	3b80      	subs	r3, #128	; 0x80
 800ac72:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <create_name+0x120>)
 800ac74:	5cd3      	ldrb	r3, [r2, r3]
 800ac76:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ac78:	7ffb      	ldrb	r3, [r7, #31]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	481d      	ldr	r0, [pc, #116]	; (800acf4 <create_name+0x124>)
 800ac7e:	f7ff f815 	bl	8009cac <chk_chr>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <create_name+0xbc>
 800ac88:	2306      	movs	r3, #6
 800ac8a:	e02c      	b.n	800ace6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ac8c:	7ffb      	ldrb	r3, [r7, #31]
 800ac8e:	2b60      	cmp	r3, #96	; 0x60
 800ac90:	d905      	bls.n	800ac9e <create_name+0xce>
 800ac92:	7ffb      	ldrb	r3, [r7, #31]
 800ac94:	2b7a      	cmp	r3, #122	; 0x7a
 800ac96:	d802      	bhi.n	800ac9e <create_name+0xce>
 800ac98:	7ffb      	ldrb	r3, [r7, #31]
 800ac9a:	3b20      	subs	r3, #32
 800ac9c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	613a      	str	r2, [r7, #16]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	4413      	add	r3, r2
 800aca8:	7ffa      	ldrb	r2, [r7, #31]
 800acaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800acac:	e7a6      	b.n	800abfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	441a      	add	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <create_name+0xf4>
 800acc0:	2306      	movs	r3, #6
 800acc2:	e010      	b.n	800ace6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2be5      	cmp	r3, #229	; 0xe5
 800acca:	d102      	bne.n	800acd2 <create_name+0x102>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2205      	movs	r2, #5
 800acd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800acd2:	7ffb      	ldrb	r3, [r7, #31]
 800acd4:	2b20      	cmp	r3, #32
 800acd6:	d801      	bhi.n	800acdc <create_name+0x10c>
 800acd8:	2204      	movs	r2, #4
 800acda:	e000      	b.n	800acde <create_name+0x10e>
 800acdc:	2200      	movs	r2, #0
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	330b      	adds	r3, #11
 800ace2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ace4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3720      	adds	r7, #32
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	08013354 	.word	0x08013354
 800acf4:	0800f4f8 	.word	0x0800f4f8

0800acf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad0c:	e002      	b.n	800ad14 <follow_path+0x1c>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b2f      	cmp	r3, #47	; 0x2f
 800ad1a:	d0f8      	beq.n	800ad0e <follow_path+0x16>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b5c      	cmp	r3, #92	; 0x5c
 800ad22:	d0f4      	beq.n	800ad0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2200      	movs	r2, #0
 800ad28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b1f      	cmp	r3, #31
 800ad30:	d80a      	bhi.n	800ad48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2280      	movs	r2, #128	; 0x80
 800ad36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fcf9 	bl	800a734 <dir_sdi>
 800ad42:	4603      	mov	r3, r0
 800ad44:	75fb      	strb	r3, [r7, #23]
 800ad46:	e043      	b.n	800add0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad48:	463b      	mov	r3, r7
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff3f 	bl	800abd0 <create_name>
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d134      	bne.n	800adc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff feaf 	bl	800aac0 <dir_find>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d127      	bne.n	800adca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad7a:	7afb      	ldrb	r3, [r7, #11]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d122      	bne.n	800adca <follow_path+0xd2>
 800ad84:	2305      	movs	r3, #5
 800ad86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad88:	e01f      	b.n	800adca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d11c      	bne.n	800adce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	799b      	ldrb	r3, [r3, #6]
 800ad98:	f003 0310 	and.w	r3, r3, #16
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ada0:	2305      	movs	r3, #5
 800ada2:	75fb      	strb	r3, [r7, #23]
 800ada4:	e014      	b.n	800add0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb4:	4413      	add	r3, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff fe42 	bl	800aa42 <ld_clust>
 800adbe:	4602      	mov	r2, r0
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adc4:	e7c0      	b.n	800ad48 <follow_path+0x50>
			if (res != FR_OK) break;
 800adc6:	bf00      	nop
 800adc8:	e002      	b.n	800add0 <follow_path+0xd8>
				break;
 800adca:	bf00      	nop
 800adcc:	e000      	b.n	800add0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adce:	bf00      	nop
			}
		}
	}

	return res;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ade2:	f04f 33ff 	mov.w	r3, #4294967295
 800ade6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d031      	beq.n	800ae54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	e002      	b.n	800adfe <get_ldnumber+0x24>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3301      	adds	r3, #1
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	d903      	bls.n	800ae0e <get_ldnumber+0x34>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b3a      	cmp	r3, #58	; 0x3a
 800ae0c:	d1f4      	bne.n	800adf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b3a      	cmp	r3, #58	; 0x3a
 800ae14:	d11c      	bne.n	800ae50 <get_ldnumber+0x76>
			tp = *path;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	60fa      	str	r2, [r7, #12]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	3b30      	subs	r3, #48	; 0x30
 800ae26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d80e      	bhi.n	800ae4c <get_ldnumber+0x72>
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d10a      	bne.n	800ae4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d107      	bne.n	800ae4c <get_ldnumber+0x72>
					vol = (int)i;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	3301      	adds	r3, #1
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	e002      	b.n	800ae56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae50:	2300      	movs	r3, #0
 800ae52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae54:	693b      	ldr	r3, [r7, #16]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
	...

0800ae64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	70da      	strb	r2, [r3, #3]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff f8e0 	bl	800a044 <move_window>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <check_fs+0x2a>
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	e038      	b.n	800af00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3330      	adds	r3, #48	; 0x30
 800ae92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fe24 	bl	8009ae4 <ld_word>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d001      	beq.n	800aeac <check_fs+0x48>
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e029      	b.n	800af00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeb2:	2be9      	cmp	r3, #233	; 0xe9
 800aeb4:	d009      	beq.n	800aeca <check_fs+0x66>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aebc:	2beb      	cmp	r3, #235	; 0xeb
 800aebe:	d11e      	bne.n	800aefe <check_fs+0x9a>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aec6:	2b90      	cmp	r3, #144	; 0x90
 800aec8:	d119      	bne.n	800aefe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3330      	adds	r3, #48	; 0x30
 800aece:	3336      	adds	r3, #54	; 0x36
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fe fe1f 	bl	8009b14 <ld_dword>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aedc:	4a0a      	ldr	r2, [pc, #40]	; (800af08 <check_fs+0xa4>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d101      	bne.n	800aee6 <check_fs+0x82>
 800aee2:	2300      	movs	r3, #0
 800aee4:	e00c      	b.n	800af00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3330      	adds	r3, #48	; 0x30
 800aeea:	3352      	adds	r3, #82	; 0x52
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe fe11 	bl	8009b14 <ld_dword>
 800aef2:	4602      	mov	r2, r0
 800aef4:	4b05      	ldr	r3, [pc, #20]	; (800af0c <check_fs+0xa8>)
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d101      	bne.n	800aefe <check_fs+0x9a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e000      	b.n	800af00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aefe:	2302      	movs	r3, #2
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	00544146 	.word	0x00544146
 800af0c:	33544146 	.word	0x33544146

0800af10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b096      	sub	sp, #88	; 0x58
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff ff58 	bl	800adda <get_ldnumber>
 800af2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	da01      	bge.n	800af36 <find_volume+0x26>
 800af32:	230b      	movs	r3, #11
 800af34:	e22e      	b.n	800b394 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af36:	4aa8      	ldr	r2, [pc, #672]	; (800b1d8 <find_volume+0x2c8>)
 800af38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <find_volume+0x3a>
 800af46:	230c      	movs	r3, #12
 800af48:	e224      	b.n	800b394 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01a      	beq.n	800af96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fd1f 	bl	80099a8 <disk_status>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10c      	bne.n	800af96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <find_volume+0x82>
 800af82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af86:	f003 0304 	and.w	r3, r3, #4
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af8e:	230a      	movs	r3, #10
 800af90:	e200      	b.n	800b394 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800af92:	2300      	movs	r3, #0
 800af94:	e1fe      	b.n	800b394 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe fd17 	bl	80099dc <disk_initialize>
 800afae:	4603      	mov	r3, r0
 800afb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800afb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800afc0:	2303      	movs	r3, #3
 800afc2:	e1e7      	b.n	800b394 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <find_volume+0xca>
 800afca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800afd6:	230a      	movs	r3, #10
 800afd8:	e1dc      	b.n	800b394 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800afde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afe2:	f7ff ff3f 	bl	800ae64 <check_fs>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800afec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d14b      	bne.n	800b08c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aff4:	2300      	movs	r3, #0
 800aff6:	643b      	str	r3, [r7, #64]	; 0x40
 800aff8:	e01f      	b.n	800b03a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b008:	4413      	add	r3, r2
 800b00a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	3304      	adds	r3, #4
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d006      	beq.n	800b024 <find_volume+0x114>
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	3308      	adds	r3, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fd7a 	bl	8009b14 <ld_dword>
 800b020:	4602      	mov	r2, r0
 800b022:	e000      	b.n	800b026 <find_volume+0x116>
 800b024:	2200      	movs	r2, #0
 800b026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b02e:	440b      	add	r3, r1
 800b030:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b036:	3301      	adds	r3, #1
 800b038:	643b      	str	r3, [r7, #64]	; 0x40
 800b03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d9dc      	bls.n	800affa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b040:	2300      	movs	r3, #0
 800b042:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <find_volume+0x140>
 800b04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04c:	3b01      	subs	r3, #1
 800b04e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b058:	4413      	add	r3, r2
 800b05a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b05e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b062:	2b00      	cmp	r3, #0
 800b064:	d005      	beq.n	800b072 <find_volume+0x162>
 800b066:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b06a:	f7ff fefb 	bl	800ae64 <check_fs>
 800b06e:	4603      	mov	r3, r0
 800b070:	e000      	b.n	800b074 <find_volume+0x164>
 800b072:	2303      	movs	r3, #3
 800b074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d905      	bls.n	800b08c <find_volume+0x17c>
 800b080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b082:	3301      	adds	r3, #1
 800b084:	643b      	str	r3, [r7, #64]	; 0x40
 800b086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d9e1      	bls.n	800b050 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b08c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b090:	2b04      	cmp	r3, #4
 800b092:	d101      	bne.n	800b098 <find_volume+0x188>
 800b094:	2301      	movs	r3, #1
 800b096:	e17d      	b.n	800b394 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d901      	bls.n	800b0a4 <find_volume+0x194>
 800b0a0:	230d      	movs	r3, #13
 800b0a2:	e177      	b.n	800b394 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	3330      	adds	r3, #48	; 0x30
 800b0a8:	330b      	adds	r3, #11
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe fd1a 	bl	8009ae4 <ld_word>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b6:	d001      	beq.n	800b0bc <find_volume+0x1ac>
 800b0b8:	230d      	movs	r3, #13
 800b0ba:	e16b      	b.n	800b394 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	3330      	adds	r3, #48	; 0x30
 800b0c0:	3316      	adds	r3, #22
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fd0e 	bl	8009ae4 <ld_word>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <find_volume+0x1d0>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	3330      	adds	r3, #48	; 0x30
 800b0d6:	3324      	adds	r3, #36	; 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fd1b 	bl	8009b14 <ld_dword>
 800b0de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	789b      	ldrb	r3, [r3, #2]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d005      	beq.n	800b104 <find_volume+0x1f4>
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	789b      	ldrb	r3, [r3, #2]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d001      	beq.n	800b104 <find_volume+0x1f4>
 800b100:	230d      	movs	r3, #13
 800b102:	e147      	b.n	800b394 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	789b      	ldrb	r3, [r3, #2]
 800b108:	461a      	mov	r2, r3
 800b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10c:	fb02 f303 	mul.w	r3, r2, r3
 800b110:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b118:	b29a      	uxth	r2, r3
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b120:	895b      	ldrh	r3, [r3, #10]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d008      	beq.n	800b138 <find_volume+0x228>
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	895b      	ldrh	r3, [r3, #10]
 800b12a:	461a      	mov	r2, r3
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	895b      	ldrh	r3, [r3, #10]
 800b130:	3b01      	subs	r3, #1
 800b132:	4013      	ands	r3, r2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <find_volume+0x22c>
 800b138:	230d      	movs	r3, #13
 800b13a:	e12b      	b.n	800b394 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	3330      	adds	r3, #48	; 0x30
 800b140:	3311      	adds	r3, #17
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fcce 	bl	8009ae4 <ld_word>
 800b148:	4603      	mov	r3, r0
 800b14a:	461a      	mov	r2, r3
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	891b      	ldrh	r3, [r3, #8]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	b29b      	uxth	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <find_volume+0x252>
 800b15e:	230d      	movs	r3, #13
 800b160:	e118      	b.n	800b394 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	3330      	adds	r3, #48	; 0x30
 800b166:	3313      	adds	r3, #19
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fcbb 	bl	8009ae4 <ld_word>
 800b16e:	4603      	mov	r3, r0
 800b170:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b174:	2b00      	cmp	r3, #0
 800b176:	d106      	bne.n	800b186 <find_volume+0x276>
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	3330      	adds	r3, #48	; 0x30
 800b17c:	3320      	adds	r3, #32
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fcc8 	bl	8009b14 <ld_dword>
 800b184:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	3330      	adds	r3, #48	; 0x30
 800b18a:	330e      	adds	r3, #14
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fca9 	bl	8009ae4 <ld_word>
 800b192:	4603      	mov	r3, r0
 800b194:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <find_volume+0x290>
 800b19c:	230d      	movs	r3, #13
 800b19e:	e0f9      	b.n	800b394 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b1a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a4:	4413      	add	r3, r2
 800b1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a8:	8912      	ldrh	r2, [r2, #8]
 800b1aa:	0912      	lsrs	r2, r2, #4
 800b1ac:	b292      	uxth	r2, r2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d201      	bcs.n	800b1be <find_volume+0x2ae>
 800b1ba:	230d      	movs	r3, #13
 800b1bc:	e0ea      	b.n	800b394 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1c6:	8952      	ldrh	r2, [r2, #10]
 800b1c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <find_volume+0x2cc>
 800b1d4:	230d      	movs	r3, #13
 800b1d6:	e0dd      	b.n	800b394 <find_volume+0x484>
 800b1d8:	20000310 	.word	0x20000310
		fmt = FS_FAT32;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d802      	bhi.n	800b1f2 <find_volume+0x2e2>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d802      	bhi.n	800b202 <find_volume+0x2f2>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	1c9a      	adds	r2, r3, #2
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b20e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b210:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b214:	441a      	add	r2, r3
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b21a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	441a      	add	r2, r3
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d11e      	bne.n	800b26a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	3330      	adds	r3, #48	; 0x30
 800b230:	332a      	adds	r3, #42	; 0x2a
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe fc56 	bl	8009ae4 <ld_word>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <find_volume+0x332>
 800b23e:	230d      	movs	r3, #13
 800b240:	e0a8      	b.n	800b394 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	891b      	ldrh	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <find_volume+0x33e>
 800b24a:	230d      	movs	r3, #13
 800b24c:	e0a2      	b.n	800b394 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	3330      	adds	r3, #48	; 0x30
 800b252:	332c      	adds	r3, #44	; 0x2c
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fc5d 	bl	8009b14 <ld_dword>
 800b25a:	4602      	mov	r2, r0
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	647b      	str	r3, [r7, #68]	; 0x44
 800b268:	e01f      	b.n	800b2aa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	891b      	ldrh	r3, [r3, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <find_volume+0x366>
 800b272:	230d      	movs	r3, #13
 800b274:	e08e      	b.n	800b394 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	6a1a      	ldr	r2, [r3, #32]
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	441a      	add	r2, r3
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b286:	2b02      	cmp	r3, #2
 800b288:	d103      	bne.n	800b292 <find_volume+0x382>
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	e00a      	b.n	800b2a8 <find_volume+0x398>
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	4613      	mov	r3, r2
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	4413      	add	r3, r2
 800b29c:	085a      	lsrs	r2, r3, #1
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b2a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d201      	bcs.n	800b2be <find_volume+0x3ae>
 800b2ba:	230d      	movs	r3, #13
 800b2bc:	e06a      	b.n	800b394 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c4:	611a      	str	r2, [r3, #16]
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	691a      	ldr	r2, [r3, #16]
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	2280      	movs	r2, #128	; 0x80
 800b2d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d149      	bne.n	800b370 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	3330      	adds	r3, #48	; 0x30
 800b2e0:	3330      	adds	r3, #48	; 0x30
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fbfe 	bl	8009ae4 <ld_word>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d140      	bne.n	800b370 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2f6:	f7fe fea5 	bl	800a044 <move_window>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d137      	bne.n	800b370 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	2200      	movs	r2, #0
 800b304:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	3330      	adds	r3, #48	; 0x30
 800b30a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fbe8 	bl	8009ae4 <ld_word>
 800b314:	4603      	mov	r3, r0
 800b316:	461a      	mov	r2, r3
 800b318:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d127      	bne.n	800b370 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	3330      	adds	r3, #48	; 0x30
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fbf5 	bl	8009b14 <ld_dword>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b1b      	ldr	r3, [pc, #108]	; (800b39c <find_volume+0x48c>)
 800b32e:	429a      	cmp	r2, r3
 800b330:	d11e      	bne.n	800b370 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	3330      	adds	r3, #48	; 0x30
 800b336:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fbea 	bl	8009b14 <ld_dword>
 800b340:	4602      	mov	r2, r0
 800b342:	4b17      	ldr	r3, [pc, #92]	; (800b3a0 <find_volume+0x490>)
 800b344:	429a      	cmp	r2, r3
 800b346:	d113      	bne.n	800b370 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	3330      	adds	r3, #48	; 0x30
 800b34c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b350:	4618      	mov	r0, r3
 800b352:	f7fe fbdf 	bl	8009b14 <ld_dword>
 800b356:	4602      	mov	r2, r0
 800b358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	3330      	adds	r3, #48	; 0x30
 800b360:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe fbd5 	bl	8009b14 <ld_dword>
 800b36a:	4602      	mov	r2, r0
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b376:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <find_volume+0x494>)
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <find_volume+0x494>)
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <find_volume+0x494>)
 800b386:	881a      	ldrh	r2, [r3, #0]
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b38c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b38e:	f7fe fdf1 	bl	8009f74 <clear_lock>
#endif
	return FR_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3758      	adds	r7, #88	; 0x58
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	41615252 	.word	0x41615252
 800b3a0:	61417272 	.word	0x61417272
 800b3a4:	20000314 	.word	0x20000314

0800b3a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b3b2:	2309      	movs	r3, #9
 800b3b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d01c      	beq.n	800b3f6 <validate+0x4e>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d018      	beq.n	800b3f6 <validate+0x4e>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d013      	beq.n	800b3f6 <validate+0x4e>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	889a      	ldrh	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	88db      	ldrh	r3, [r3, #6]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d10c      	bne.n	800b3f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fae0 	bl	80099a8 <disk_status>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <validate+0x4e>
			res = FR_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <validate+0x5a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	e000      	b.n	800b404 <validate+0x5c>
 800b402:	2300      	movs	r3, #0
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	6013      	str	r3, [r2, #0]
	return res;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	4613      	mov	r3, r2
 800b420:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b426:	f107 0310 	add.w	r3, r7, #16
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fcd5 	bl	800adda <get_ldnumber>
 800b430:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	da01      	bge.n	800b43c <f_mount+0x28>
 800b438:	230b      	movs	r3, #11
 800b43a:	e02b      	b.n	800b494 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b43c:	4a17      	ldr	r2, [pc, #92]	; (800b49c <f_mount+0x88>)
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b444:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d005      	beq.n	800b458 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f7fe fd91 	bl	8009f74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	490d      	ldr	r1, [pc, #52]	; (800b49c <f_mount+0x88>)
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <f_mount+0x66>
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d001      	beq.n	800b47e <f_mount+0x6a>
 800b47a:	2300      	movs	r3, #0
 800b47c:	e00a      	b.n	800b494 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b47e:	f107 010c 	add.w	r1, r7, #12
 800b482:	f107 0308 	add.w	r3, r7, #8
 800b486:	2200      	movs	r2, #0
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff fd41 	bl	800af10 <find_volume>
 800b48e:	4603      	mov	r3, r0
 800b490:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000310 	.word	0x20000310

0800b4a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b098      	sub	sp, #96	; 0x60
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <f_open+0x18>
 800b4b4:	2309      	movs	r3, #9
 800b4b6:	e1ad      	b.n	800b814 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b4c0:	79fa      	ldrb	r2, [r7, #7]
 800b4c2:	f107 0110 	add.w	r1, r7, #16
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff fd20 	bl	800af10 <find_volume>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 8191 	bne.w	800b802 <f_open+0x362>
		dj.obj.fs = fs;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff fc03 	bl	800acf8 <follow_path>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b4f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d11a      	bne.n	800b536 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b500:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b504:	b25b      	sxtb	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	da03      	bge.n	800b512 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b50a:	2306      	movs	r3, #6
 800b50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b510:	e011      	b.n	800b536 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	f023 0301 	bic.w	r3, r3, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bf14      	ite	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	2300      	moveq	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	461a      	mov	r2, r3
 800b524:	f107 0314 	add.w	r3, r7, #20
 800b528:	4611      	mov	r1, r2
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fbda 	bl	8009ce4 <chk_lock>
 800b530:	4603      	mov	r3, r0
 800b532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	f003 031c 	and.w	r3, r3, #28
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d07f      	beq.n	800b640 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b544:	2b00      	cmp	r3, #0
 800b546:	d017      	beq.n	800b578 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d10e      	bne.n	800b56e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b550:	f7fe fc24 	bl	8009d9c <enq_lock>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d006      	beq.n	800b568 <f_open+0xc8>
 800b55a:	f107 0314 	add.w	r3, r7, #20
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff fb03 	bl	800ab6a <dir_register>
 800b564:	4603      	mov	r3, r0
 800b566:	e000      	b.n	800b56a <f_open+0xca>
 800b568:	2312      	movs	r3, #18
 800b56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	f043 0308 	orr.w	r3, r3, #8
 800b574:	71fb      	strb	r3, [r7, #7]
 800b576:	e010      	b.n	800b59a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b578:	7ebb      	ldrb	r3, [r7, #26]
 800b57a:	f003 0311 	and.w	r3, r3, #17
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <f_open+0xea>
					res = FR_DENIED;
 800b582:	2307      	movs	r3, #7
 800b584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b588:	e007      	b.n	800b59a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <f_open+0xfa>
 800b594:	2308      	movs	r3, #8
 800b596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d168      	bne.n	800b674 <f_open+0x1d4>
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d063      	beq.n	800b674 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b5ac:	f000 fc54 	bl	800be58 <get_fattime>
 800b5b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b4:	330e      	adds	r3, #14
 800b5b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fae9 	bl	8009b90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	3316      	adds	r3, #22
 800b5c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fae3 	bl	8009b90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	330b      	adds	r3, #11
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff fa32 	bl	800aa42 <ld_clust>
 800b5de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fa4a 	bl	800aa80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ee:	331c      	adds	r3, #28
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe facc 	bl	8009b90 <st_dword>
					fs->wflag = 1;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d037      	beq.n	800b674 <f_open+0x1d4>
						dw = fs->winsect;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b60a:	f107 0314 	add.w	r3, r7, #20
 800b60e:	2200      	movs	r2, #0
 800b610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe ff5d 	bl	800a4d2 <remove_chain>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b622:	2b00      	cmp	r3, #0
 800b624:	d126      	bne.n	800b674 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fd0a 	bl	800a044 <move_window>
 800b630:	4603      	mov	r3, r0
 800b632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b63a:	3a01      	subs	r2, #1
 800b63c:	60da      	str	r2, [r3, #12]
 800b63e:	e019      	b.n	800b674 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b644:	2b00      	cmp	r3, #0
 800b646:	d115      	bne.n	800b674 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b648:	7ebb      	ldrb	r3, [r7, #26]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b652:	2304      	movs	r3, #4
 800b654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b658:	e00c      	b.n	800b674 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d007      	beq.n	800b674 <f_open+0x1d4>
 800b664:	7ebb      	ldrb	r3, [r7, #26]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <f_open+0x1d4>
						res = FR_DENIED;
 800b66e:	2307      	movs	r3, #7
 800b670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d128      	bne.n	800b6ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	f003 0308 	and.w	r3, r3, #8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	f023 0301 	bic.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	bf14      	ite	ne
 800b6a6:	2301      	movne	r3, #1
 800b6a8:	2300      	moveq	r3, #0
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f107 0314 	add.w	r3, r7, #20
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fb93 	bl	8009de0 <inc_lock>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <f_open+0x22e>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b6ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 8095 	bne.w	800b802 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff f9af 	bl	800aa42 <ld_clust>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	331c      	adds	r3, #28
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fa10 	bl	8009b14 <ld_dword>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	88da      	ldrh	r2, [r3, #6]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	79fa      	ldrb	r2, [r7, #7]
 800b712:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3330      	adds	r3, #48	; 0x30
 800b72a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b72e:	2100      	movs	r1, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe fa7a 	bl	8009c2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d060      	beq.n	800b802 <f_open+0x362>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d05c      	beq.n	800b802 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	025b      	lsls	r3, r3, #9
 800b756:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	657b      	str	r3, [r7, #84]	; 0x54
 800b764:	e016      	b.n	800b794 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fd25 	bl	800a1ba <get_fat>
 800b770:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b774:	2b01      	cmp	r3, #1
 800b776:	d802      	bhi.n	800b77e <f_open+0x2de>
 800b778:	2302      	movs	r3, #2
 800b77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d102      	bne.n	800b78c <f_open+0x2ec>
 800b786:	2301      	movs	r3, #1
 800b788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b78c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	657b      	str	r3, [r7, #84]	; 0x54
 800b794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <f_open+0x304>
 800b79c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d8e0      	bhi.n	800b766 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d127      	bne.n	800b802 <f_open+0x362>
 800b7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d022      	beq.n	800b802 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe fcdb 	bl	800a17c <clust2sect>
 800b7c6:	6478      	str	r0, [r7, #68]	; 0x44
 800b7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <f_open+0x336>
						res = FR_INT_ERR;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7d4:	e015      	b.n	800b802 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d8:	0a5a      	lsrs	r2, r3, #9
 800b7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7dc:	441a      	add	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	7858      	ldrb	r0, [r3, #1]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a1a      	ldr	r2, [r3, #32]
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f7fe f919 	bl	8009a28 <disk_read>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <f_open+0x362>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <f_open+0x370>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b814:	4618      	mov	r0, r3
 800b816:	3760      	adds	r7, #96	; 0x60
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08c      	sub	sp, #48	; 0x30
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2200      	movs	r2, #0
 800b832:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f107 0210 	add.w	r2, r7, #16
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fdb3 	bl	800b3a8 <validate>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d107      	bne.n	800b860 <f_write+0x44>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	7d5b      	ldrb	r3, [r3, #21]
 800b854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <f_write+0x4a>
 800b860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b864:	e14b      	b.n	800bafe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	7d1b      	ldrb	r3, [r3, #20]
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <f_write+0x5a>
 800b872:	2307      	movs	r3, #7
 800b874:	e143      	b.n	800bafe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	699a      	ldr	r2, [r3, #24]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	441a      	add	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	429a      	cmp	r2, r3
 800b884:	f080 812d 	bcs.w	800bae2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	43db      	mvns	r3, r3
 800b88e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b890:	e127      	b.n	800bae2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f040 80e3 	bne.w	800ba66 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	0a5b      	lsrs	r3, r3, #9
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	8952      	ldrh	r2, [r2, #10]
 800b8aa:	3a01      	subs	r2, #1
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d143      	bne.n	800b93e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10c      	bne.n	800b8d8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d11a      	bne.n	800b900 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fe64 	bl	800a59c <create_chain>
 800b8d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8d6:	e013      	b.n	800b900 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d007      	beq.n	800b8f0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7fe fef0 	bl	800a6cc <clmt_clust>
 800b8ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8ee:	e007      	b.n	800b900 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	f7fe fe4f 	bl	800a59c <create_chain>
 800b8fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 80f2 	beq.w	800baec <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d104      	bne.n	800b918 <f_write+0xfc>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2202      	movs	r2, #2
 800b912:	755a      	strb	r2, [r3, #21]
 800b914:	2302      	movs	r3, #2
 800b916:	e0f2      	b.n	800bafe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91e:	d104      	bne.n	800b92a <f_write+0x10e>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2201      	movs	r2, #1
 800b924:	755a      	strb	r2, [r3, #21]
 800b926:	2301      	movs	r3, #1
 800b928:	e0e9      	b.n	800bafe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <f_write+0x122>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	7d1b      	ldrb	r3, [r3, #20]
 800b942:	b25b      	sxtb	r3, r3
 800b944:	2b00      	cmp	r3, #0
 800b946:	da18      	bge.n	800b97a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	7858      	ldrb	r0, [r3, #1]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1a      	ldr	r2, [r3, #32]
 800b956:	2301      	movs	r3, #1
 800b958:	f7fe f886 	bl	8009a68 <disk_write>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <f_write+0x150>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	755a      	strb	r2, [r3, #21]
 800b968:	2301      	movs	r3, #1
 800b96a:	e0c8      	b.n	800bafe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	7d1b      	ldrb	r3, [r3, #20]
 800b970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b974:	b2da      	uxtb	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	69db      	ldr	r3, [r3, #28]
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f7fe fbfa 	bl	800a17c <clust2sect>
 800b988:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d104      	bne.n	800b99a <f_write+0x17e>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2202      	movs	r2, #2
 800b994:	755a      	strb	r2, [r3, #21]
 800b996:	2302      	movs	r3, #2
 800b998:	e0b1      	b.n	800bafe <f_write+0x2e2>
			sect += csect;
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	4413      	add	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	0a5b      	lsrs	r3, r3, #9
 800b9a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d03c      	beq.n	800ba28 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	8952      	ldrh	r2, [r2, #10]
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d905      	bls.n	800b9c8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	895b      	ldrh	r3, [r3, #10]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	7858      	ldrb	r0, [r3, #1]
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	69f9      	ldr	r1, [r7, #28]
 800b9d2:	f7fe f849 	bl	8009a68 <disk_write>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <f_write+0x1ca>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	755a      	strb	r2, [r3, #21]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e08b      	b.n	800bafe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6a1a      	ldr	r2, [r3, #32]
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	6a3a      	ldr	r2, [r7, #32]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d915      	bls.n	800ba20 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6a1a      	ldr	r2, [r3, #32]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	025b      	lsls	r3, r3, #9
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	4413      	add	r3, r2
 800ba08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	f7fe f8eb 	bl	8009be8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	7d1b      	ldrb	r3, [r3, #20]
 800ba16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	025b      	lsls	r3, r3, #9
 800ba24:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ba26:	e03f      	b.n	800baa8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d016      	beq.n	800ba60 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	699a      	ldr	r2, [r3, #24]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d210      	bcs.n	800ba60 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	7858      	ldrb	r0, [r3, #1]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba48:	2301      	movs	r3, #1
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	f7fd ffec 	bl	8009a28 <disk_read>
 800ba50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	755a      	strb	r2, [r3, #21]
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e04e      	b.n	800bafe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba72:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ba74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d901      	bls.n	800ba80 <f_write+0x264>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8e:	4413      	add	r3, r2
 800ba90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba92:	69f9      	ldr	r1, [r7, #28]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe f8a7 	bl	8009be8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	7d1b      	ldrb	r3, [r3, #20]
 800ba9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	4413      	add	r3, r2
 800baae:	61fb      	str	r3, [r7, #28]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	699a      	ldr	r2, [r3, #24]
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	441a      	add	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	619a      	str	r2, [r3, #24]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68da      	ldr	r2, [r3, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	bf38      	it	cc
 800bac8:	461a      	movcc	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	60da      	str	r2, [r3, #12]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	441a      	add	r2, r3
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f47f aed4 	bne.w	800b892 <f_write+0x76>
 800baea:	e000      	b.n	800baee <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800baec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3730      	adds	r7, #48	; 0x30
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b086      	sub	sp, #24
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f107 0208 	add.w	r2, r7, #8
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff fc46 	bl	800b3a8 <validate>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d168      	bne.n	800bbf8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7d1b      	ldrb	r3, [r3, #20]
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d062      	beq.n	800bbf8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7d1b      	ldrb	r3, [r3, #20]
 800bb36:	b25b      	sxtb	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da15      	bge.n	800bb68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	7858      	ldrb	r0, [r3, #1]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1a      	ldr	r2, [r3, #32]
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f7fd ff8c 	bl	8009a68 <disk_write>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <f_sync+0x54>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e04f      	b.n	800bbfa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bb68:	f000 f976 	bl	800be58 <get_fattime>
 800bb6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	4619      	mov	r1, r3
 800bb76:	4610      	mov	r0, r2
 800bb78:	f7fe fa64 	bl	800a044 <move_window>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d138      	bne.n	800bbf8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	330b      	adds	r3, #11
 800bb90:	781a      	ldrb	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	330b      	adds	r3, #11
 800bb96:	f042 0220 	orr.w	r2, r2, #32
 800bb9a:	b2d2      	uxtb	r2, r2
 800bb9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	461a      	mov	r2, r3
 800bba8:	68f9      	ldr	r1, [r7, #12]
 800bbaa:	f7fe ff69 	bl	800aa80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f103 021c 	add.w	r2, r3, #28
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4610      	mov	r0, r2
 800bbbc:	f7fd ffe8 	bl	8009b90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3316      	adds	r3, #22
 800bbc4:	6939      	ldr	r1, [r7, #16]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fd ffe2 	bl	8009b90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3312      	adds	r3, #18
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd ffc1 	bl	8009b5a <st_word>
					fs->wflag = 1;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fa5d 	bl	800a0a0 <sync_fs>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	7d1b      	ldrb	r3, [r3, #20]
 800bbee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff ff7b 	bl	800bb06 <f_sync>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d118      	bne.n	800bc4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f107 0208 	add.w	r2, r7, #8
 800bc20:	4611      	mov	r1, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fbc0 	bl	800b3a8 <validate>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10c      	bne.n	800bc4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe f960 	bl	8009efc <dec_lock>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	4613      	mov	r3, r2
 800bc64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc66:	2301      	movs	r3, #1
 800bc68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bc6e:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc70:	7a5b      	ldrb	r3, [r3, #9]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d131      	bne.n	800bcdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc78:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc7a:	7a5b      	ldrb	r3, [r3, #9]
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	461a      	mov	r2, r3
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc82:	2100      	movs	r1, #0
 800bc84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bc86:	4b19      	ldr	r3, [pc, #100]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc88:	7a5b      	ldrb	r3, [r3, #9]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4a17      	ldr	r2, [pc, #92]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc96:	4b15      	ldr	r3, [pc, #84]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bc98:	7a5b      	ldrb	r3, [r3, #9]
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	4b13      	ldr	r3, [pc, #76]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bca0:	4413      	add	r3, r2
 800bca2:	79fa      	ldrb	r2, [r7, #7]
 800bca4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bca8:	7a5b      	ldrb	r3, [r3, #9]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	b2d1      	uxtb	r1, r2
 800bcb0:	4a0e      	ldr	r2, [pc, #56]	; (800bcec <FATFS_LinkDriverEx+0x94>)
 800bcb2:	7251      	strb	r1, [r2, #9]
 800bcb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcb6:	7dbb      	ldrb	r3, [r7, #22]
 800bcb8:	3330      	adds	r3, #48	; 0x30
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	223a      	movs	r2, #58	; 0x3a
 800bcc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3302      	adds	r3, #2
 800bccc:	222f      	movs	r2, #47	; 0x2f
 800bcce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	3303      	adds	r3, #3
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	20000338 	.word	0x20000338

0800bcf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff ffaa 	bl	800bc58 <FATFS_LinkDriverEx>
 800bd04:	4603      	mov	r3, r0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd1a:	f000 f879 	bl	800be10 <BSP_SD_IsDetected>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d001      	beq.n	800bd28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd24:	2302      	movs	r3, #2
 800bd26:	e012      	b.n	800bd4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800bd28:	480b      	ldr	r0, [pc, #44]	; (800bd58 <BSP_SD_Init+0x48>)
 800bd2a:	f7fb faff 	bl	800732c <HAL_SD_Init>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d109      	bne.n	800bd4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bd38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd3c:	4806      	ldr	r0, [pc, #24]	; (800bd58 <BSP_SD_Init+0x48>)
 800bd3e:	f7fc f8d5 	bl	8007eec <HAL_SD_ConfigWideBusOperation>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000948 	.word	0x20000948

0800bd5c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	4806      	ldr	r0, [pc, #24]	; (800bd94 <BSP_SD_ReadBlocks+0x38>)
 800bd7a:	f7fb fb66 	bl	800744a <HAL_SD_ReadBlocks>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000948 	.word	0x20000948

0800bd98 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	68f9      	ldr	r1, [r7, #12]
 800bdb4:	4806      	ldr	r0, [pc, #24]	; (800bdd0 <BSP_SD_WriteBlocks+0x38>)
 800bdb6:	f7fb fcde 	bl	8007776 <HAL_SD_WriteBlocks>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000948 	.word	0x20000948

0800bdd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bdd8:	4805      	ldr	r0, [pc, #20]	; (800bdf0 <BSP_SD_GetCardState+0x1c>)
 800bdda:	f7fc f903 	bl	8007fe4 <HAL_SD_GetCardState>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b04      	cmp	r3, #4
 800bde2:	bf14      	ite	ne
 800bde4:	2301      	movne	r3, #1
 800bde6:	2300      	moveq	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20000948 	.word	0x20000948

0800bdf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	4803      	ldr	r0, [pc, #12]	; (800be0c <BSP_SD_GetCardInfo+0x18>)
 800be00:	f7fc f848 	bl	8007e94 <HAL_SD_GetCardInfo>
}
 800be04:	bf00      	nop
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20000948 	.word	0x20000948

0800be10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be16:	2301      	movs	r3, #1
 800be18:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800be1a:	f000 f825 	bl	800be68 <BSP_PlatformIsDetected>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be24:	2300      	movs	r3, #0
 800be26:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	b2db      	uxtb	r3, r3
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800be38:	4904      	ldr	r1, [pc, #16]	; (800be4c <MX_FATFS_Init+0x18>)
 800be3a:	4805      	ldr	r0, [pc, #20]	; (800be50 <MX_FATFS_Init+0x1c>)
 800be3c:	f7ff ff58 	bl	800bcf0 <FATFS_LinkDriver>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	4b03      	ldr	r3, [pc, #12]	; (800be54 <MX_FATFS_Init+0x20>)
 800be46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800be48:	bf00      	nop
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	200004c4 	.word	0x200004c4
 800be50:	080133d4 	.word	0x080133d4
 800be54:	200004c0 	.word	0x200004c0

0800be58 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800be5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800be5e:	4618      	mov	r0, r3
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be6e:	2301      	movs	r3, #1
 800be70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be76:	4806      	ldr	r0, [pc, #24]	; (800be90 <BSP_PlatformIsDetected+0x28>)
 800be78:	f7f9 f94e 	bl	8005118 <HAL_GPIO_ReadPin>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800be82:	2300      	movs	r3, #0
 800be84:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800be86:	79fb      	ldrb	r3, [r7, #7]
}  
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	40022000 	.word	0x40022000

0800be94 <SCB_EnableICache>:
{
 800be94:	b480      	push	{r7}
 800be96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800be98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800be9c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <SCB_EnableICache+0x3c>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800bea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800beac:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <SCB_EnableICache+0x3c>)
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	4a06      	ldr	r2, [pc, #24]	; (800bed0 <SCB_EnableICache+0x3c>)
 800beb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bec0:	f3bf 8f6f 	isb	sy
}
 800bec4:	bf00      	nop
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	e000ed00 	.word	0xe000ed00

0800bed4 <SCB_EnableDCache>:
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800beda:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <SCB_EnableDCache+0x7c>)
 800bedc:	2200      	movs	r2, #0
 800bede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800bee2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800bee6:	4b1a      	ldr	r3, [pc, #104]	; (800bf50 <SCB_EnableDCache+0x7c>)
 800bee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beec:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	0b5b      	lsrs	r3, r3, #13
 800bef2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bef6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	08db      	lsrs	r3, r3, #3
 800befc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf00:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800bf0a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bf10:	490f      	ldr	r1, [pc, #60]	; (800bf50 <SCB_EnableDCache+0x7c>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	1e5a      	subs	r2, r3, #1
 800bf1c:	60ba      	str	r2, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1ef      	bne.n	800bf02 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	1e5a      	subs	r2, r3, #1
 800bf26:	60fa      	str	r2, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e5      	bne.n	800bef8 <SCB_EnableDCache+0x24>
 800bf2c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <SCB_EnableDCache+0x7c>)
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	4a06      	ldr	r2, [pc, #24]	; (800bf50 <SCB_EnableDCache+0x7c>)
 800bf36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf3a:	6153      	str	r3, [r2, #20]
 800bf3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bf40:	f3bf 8f6f 	isb	sy
}
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	e000ed00 	.word	0xe000ed00

0800bf54 <HAL_GPIO_EXTI_Callback>:
int passa_jogada_um = 0;
int passa_jogada_dois = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13){
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf64:	d108      	bne.n	800bf78 <HAL_GPIO_EXTI_Callback+0x24>
		BSP_TS_GetState(&TS_State);
 800bf66:	4806      	ldr	r0, [pc, #24]	; (800bf80 <HAL_GPIO_EXTI_Callback+0x2c>)
 800bf68:	f7f6 fb32 	bl	80025d0 <BSP_TS_GetState>
		ts_flag=1;
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <HAL_GPIO_EXTI_Callback+0x30>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
	    HAL_Delay(100);
 800bf72:	2064      	movs	r0, #100	; 0x64
 800bf74:	f7f6 fcd4 	bl	8002920 <HAL_Delay>
	}

}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20000bfc 	.word	0x20000bfc
 800bf84:	20000350 	.word	0x20000350

0800bf88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a28      	ldr	r2, [pc, #160]	; (800c038 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d146      	bne.n	800c028 <HAL_TIM_PeriodElapsedCallback+0xa0>
		flag=1;
 800bf9a:	4b28      	ldr	r3, [pc, #160]	; (800c03c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]
		count++;
 800bfa0:	4b27      	ldr	r3, [pc, #156]	; (800c040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	4a26      	ldr	r2, [pc, #152]	; (800c040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800bfa8:	6013      	str	r3, [r2, #0]
		deadline--;
 800bfaa:	4b26      	ldr	r3, [pc, #152]	; (800c044 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a24      	ldr	r2, [pc, #144]	; (800c044 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800bfb2:	6013      	str	r3, [r2, #0]

		  if (count%2 == 0){
 800bfb4:	4b22      	ldr	r3, [pc, #136]	; (800c040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d133      	bne.n	800c028 <HAL_TIM_PeriodElapsedCallback+0xa0>
			  //ACTUALIZA O VALOR DA TEMPERATURA
			  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 800bfc0:	4821      	ldr	r0, [pc, #132]	; (800c048 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800bfc2:	f7f6 fdd3 	bl	8002b6c <HAL_ADC_GetValue>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4b20      	ldr	r3, [pc, #128]	; (800c04c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800bfca:	601a      	str	r2, [r3, #0]
			  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800bfcc:	4b1f      	ldr	r3, [pc, #124]	; (800c04c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f640 42e4 	movw	r2, #3300	; 0xce4
 800bfd4:	fb02 f203 	mul.w	r2, r2, r3
 800bfd8:	4b1d      	ldr	r3, [pc, #116]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800bfda:	fba3 1302 	umull	r1, r3, r3, r2
 800bfde:	1ad2      	subs	r2, r2, r3
 800bfe0:	0852      	lsrs	r2, r2, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	0ada      	lsrs	r2, r3, #11
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	461a      	mov	r2, r3
 800bff0:	4b18      	ldr	r3, [pc, #96]	; (800c054 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800bff2:	4413      	add	r3, r2
 800bff4:	4a18      	ldr	r2, [pc, #96]	; (800c058 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800bff6:	fba2 2303 	umull	r2, r3, r2, r3
 800bffa:	08db      	lsrs	r3, r3, #3
 800bffc:	3319      	adds	r3, #25
 800bffe:	461a      	mov	r2, r3
 800c000:	4b16      	ldr	r3, [pc, #88]	; (800c05c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800c002:	601a      	str	r2, [r3, #0]
		      if(HAL_GetTick() >= init_tick_led1 + 500)
 800c004:	f7f6 fc80 	bl	8002908 <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	4b15      	ldr	r3, [pc, #84]	; (800c060 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c012:	429a      	cmp	r2, r3
 800c014:	d308      	bcc.n	800c028 <HAL_TIM_PeriodElapsedCallback+0xa0>
		      {
		          init_tick_led1 = HAL_GetTick();
 800c016:	f7f6 fc77 	bl	8002908 <HAL_GetTick>
 800c01a:	4603      	mov	r3, r0
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800c020:	601a      	str	r2, [r3, #0]
		          BSP_LED_Toggle(LED_GREEN);
 800c022:	2001      	movs	r0, #1
 800c024:	f7f4 fea2 	bl	8000d6c <BSP_LED_Toggle>
		      }
		  }
	}
	flag=0;
 800c028:	4b04      	ldr	r3, [pc, #16]	; (800c03c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
}
 800c02e:	bf00      	nop
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	40001000 	.word	0x40001000
 800c03c:	20000344 	.word	0x20000344
 800c040:	20000348 	.word	0x20000348
 800c044:	20000070 	.word	0x20000070
 800c048:	20000a74 	.word	0x20000a74
 800c04c:	20000928 	.word	0x20000928
 800c050:	00100101 	.word	0x00100101
 800c054:	ffffe250 	.word	0xffffe250
 800c058:	51eb851f 	.word	0x51eb851f
 800c05c:	20000afc 	.word	0x20000afc
 800c060:	2000034c 	.word	0x2000034c

0800c064 <menu_inicial>:

void menu_inicial(){
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c066:	af00      	add	r7, sp, #0
	sprintf(desc, "REVERSI");
 800c068:	4a21      	ldr	r2, [pc, #132]	; (800c0f0 <menu_inicial+0x8c>)
 800c06a:	4b22      	ldr	r3, [pc, #136]	; (800c0f4 <menu_inicial+0x90>)
 800c06c:	cb03      	ldmia	r3!, {r0, r1}
 800c06e:	6010      	str	r0, [r2, #0]
 800c070:	6051      	str	r1, [r2, #4]
	BSP_LCD_SetFont(&Font24);
 800c072:	4821      	ldr	r0, [pc, #132]	; (800c0f8 <menu_inicial+0x94>)
 800c074:	f7f5 fafc 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c078:	4820      	ldr	r0, [pc, #128]	; (800c0fc <menu_inicial+0x98>)
 800c07a:	f7f5 fac7 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, (uint8_t *)desc, CENTER_MODE);
 800c07e:	f7f5 fa59 	bl	8001534 <BSP_LCD_GetYSize>
 800c082:	4603      	mov	r3, r0
 800c084:	085b      	lsrs	r3, r3, #1
 800c086:	b299      	uxth	r1, r3
 800c088:	2301      	movs	r3, #1
 800c08a:	4a19      	ldr	r2, [pc, #100]	; (800c0f0 <menu_inicial+0x8c>)
 800c08c:	2000      	movs	r0, #0
 800c08e:	f7f5 fb75 	bl	800177c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c092:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c096:	f7f5 fab9 	bl	800160c <BSP_LCD_SetTextColor>
	sprintf(desc, "Prima o botao azul para comecar o jogo");
 800c09a:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <menu_inicial+0x8c>)
 800c09c:	4a18      	ldr	r2, [pc, #96]	; (800c100 <menu_inicial+0x9c>)
 800c09e:	4614      	mov	r4, r2
 800c0a0:	469c      	mov	ip, r3
 800c0a2:	f104 0e20 	add.w	lr, r4, #32
 800c0a6:	4665      	mov	r5, ip
 800c0a8:	4626      	mov	r6, r4
 800c0aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c0ac:	6028      	str	r0, [r5, #0]
 800c0ae:	6069      	str	r1, [r5, #4]
 800c0b0:	60aa      	str	r2, [r5, #8]
 800c0b2:	60eb      	str	r3, [r5, #12]
 800c0b4:	3410      	adds	r4, #16
 800c0b6:	f10c 0c10 	add.w	ip, ip, #16
 800c0ba:	4574      	cmp	r4, lr
 800c0bc:	d1f3      	bne.n	800c0a6 <menu_inicial+0x42>
 800c0be:	4663      	mov	r3, ip
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	6810      	ldr	r0, [r2, #0]
 800c0c4:	6018      	str	r0, [r3, #0]
 800c0c6:	8891      	ldrh	r1, [r2, #4]
 800c0c8:	7992      	ldrb	r2, [r2, #6]
 800c0ca:	8099      	strh	r1, [r3, #4]
 800c0cc:	719a      	strb	r2, [r3, #6]
	BSP_LCD_SetFont(&Font20);
 800c0ce:	480d      	ldr	r0, [pc, #52]	; (800c104 <menu_inicial+0xa0>)
 800c0d0:	f7f5 face 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t *)desc, CENTER_MODE);
 800c0d4:	f7f5 fa2e 	bl	8001534 <BSP_LCD_GetYSize>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	085b      	lsrs	r3, r3, #1
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	331e      	adds	r3, #30
 800c0e0:	b299      	uxth	r1, r3
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4a02      	ldr	r2, [pc, #8]	; (800c0f0 <menu_inicial+0x8c>)
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	f7f5 fb48 	bl	800177c <BSP_LCD_DisplayStringAt>
}
 800c0ec:	bf00      	nop
 800c0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f0:	20000b40 	.word	0x20000b40
 800c0f4:	0800f53c 	.word	0x0800f53c
 800c0f8:	2000003c 	.word	0x2000003c
 800c0fc:	ffff0000 	.word	0xffff0000
 800c100:	0800f544 	.word	0x0800f544
 800c104:	20000044 	.word	0x20000044

0800c108 <fim_do_jogo>:

void fim_do_jogo(int jog_um, int jog_dois, int vencedor){
 800c108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
	int k = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
	int z = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	613b      	str	r3, [r7, #16]


	for(k = 0; k < 8; k++){
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	e026      	b.n	800c170 <fim_do_jogo+0x68>
		for(z = 0; z < 8; z++){
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	e01d      	b.n	800c164 <fim_do_jogo+0x5c>
			if(tabuleiro[k][z] == PECA_JOGADOR_1){
 800c128:	4a50      	ldr	r2, [pc, #320]	; (800c26c <fim_do_jogo+0x164>)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	00db      	lsls	r3, r3, #3
 800c12e:	441a      	add	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	4413      	add	r3, r2
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b58      	cmp	r3, #88	; 0x58
 800c13a:	d103      	bne.n	800c144 <fim_do_jogo+0x3c>
				jog_um++;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	3301      	adds	r3, #1
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e00c      	b.n	800c15e <fim_do_jogo+0x56>
			}
			else if(tabuleiro[k][z] == PECA_JOGADOR_2){
 800c144:	4a49      	ldr	r2, [pc, #292]	; (800c26c <fim_do_jogo+0x164>)
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	441a      	add	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4413      	add	r3, r2
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b59      	cmp	r3, #89	; 0x59
 800c156:	d102      	bne.n	800c15e <fim_do_jogo+0x56>
				jog_dois++;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3301      	adds	r3, #1
 800c15c:	60bb      	str	r3, [r7, #8]
		for(z = 0; z < 8; z++){
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	3301      	adds	r3, #1
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2b07      	cmp	r3, #7
 800c168:	ddde      	ble.n	800c128 <fim_do_jogo+0x20>
	for(k = 0; k < 8; k++){
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	3301      	adds	r3, #1
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b07      	cmp	r3, #7
 800c174:	ddd5      	ble.n	800c122 <fim_do_jogo+0x1a>
			}
		}
	}

	if(jog_um == jog_dois){
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d108      	bne.n	800c190 <fim_do_jogo+0x88>
		sprintf(desc, "Empate! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	493b      	ldr	r1, [pc, #236]	; (800c270 <fim_do_jogo+0x168>)
 800c184:	483b      	ldr	r0, [pc, #236]	; (800c274 <fim_do_jogo+0x16c>)
 800c186:	f002 fda5 	bl	800ecd4 <siprintf>
		vencedor = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	e018      	b.n	800c1c2 <fim_do_jogo+0xba>
	}
	else if(jog_um > jog_dois){
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	dd08      	ble.n	800c1aa <fim_do_jogo+0xa2>
		sprintf(desc, "Ganhou o Jogador 1! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4936      	ldr	r1, [pc, #216]	; (800c278 <fim_do_jogo+0x170>)
 800c19e:	4835      	ldr	r0, [pc, #212]	; (800c274 <fim_do_jogo+0x16c>)
 800c1a0:	f002 fd98 	bl	800ecd4 <siprintf>
		vencedor = 1;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	607b      	str	r3, [r7, #4]
 800c1a8:	e00b      	b.n	800c1c2 <fim_do_jogo+0xba>
	}
	else if(jog_um < jog_dois){
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	da07      	bge.n	800c1c2 <fim_do_jogo+0xba>
		sprintf(desc, "Ganhou o Jogador 2! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	4931      	ldr	r1, [pc, #196]	; (800c27c <fim_do_jogo+0x174>)
 800c1b8:	482e      	ldr	r0, [pc, #184]	; (800c274 <fim_do_jogo+0x16c>)
 800c1ba:	f002 fd8b 	bl	800ecd4 <siprintf>
		vencedor = 2;
 800c1be:	2302      	movs	r3, #2
 800c1c0:	607b      	str	r3, [r7, #4]
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	f7f5 fa21 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 800c1ca:	f7f5 f9a7 	bl	800151c <BSP_LCD_GetXSize>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	b29c      	uxth	r4, r3
 800c1d2:	f7f5 f9af 	bl	8001534 <BSP_LCD_GetYSize>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3b32      	subs	r3, #50	; 0x32
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	4622      	mov	r2, r4
 800c1e0:	2132      	movs	r1, #50	; 0x32
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f7f5 fcfe 	bl	8001be4 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font20);
 800c1e8:	4825      	ldr	r0, [pc, #148]	; (800c280 <fim_do_jogo+0x178>)
 800c1ea:	f7f5 fa41 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c1ee:	4825      	ldr	r0, [pc, #148]	; (800c284 <fim_do_jogo+0x17c>)
 800c1f0:	f7f5 fa0c 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 30, (uint8_t *)desc, CENTER_MODE);
 800c1f4:	f7f5 f99e 	bl	8001534 <BSP_LCD_GetYSize>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	085b      	lsrs	r3, r3, #1
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	3b1e      	subs	r3, #30
 800c200:	b299      	uxth	r1, r3
 800c202:	2301      	movs	r3, #1
 800c204:	4a1b      	ldr	r2, [pc, #108]	; (800c274 <fim_do_jogo+0x16c>)
 800c206:	2000      	movs	r0, #0
 800c208:	f7f5 fab8 	bl	800177c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c20c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c210:	f7f5 f9fc 	bl	800160c <BSP_LCD_SetTextColor>
	sprintf(desc, "Prima o botao azul para recomecar o jogo");
 800c214:	4b17      	ldr	r3, [pc, #92]	; (800c274 <fim_do_jogo+0x16c>)
 800c216:	4a1c      	ldr	r2, [pc, #112]	; (800c288 <fim_do_jogo+0x180>)
 800c218:	4614      	mov	r4, r2
 800c21a:	469c      	mov	ip, r3
 800c21c:	f104 0e20 	add.w	lr, r4, #32
 800c220:	4665      	mov	r5, ip
 800c222:	4626      	mov	r6, r4
 800c224:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c226:	6028      	str	r0, [r5, #0]
 800c228:	6069      	str	r1, [r5, #4]
 800c22a:	60aa      	str	r2, [r5, #8]
 800c22c:	60eb      	str	r3, [r5, #12]
 800c22e:	3410      	adds	r4, #16
 800c230:	f10c 0c10 	add.w	ip, ip, #16
 800c234:	4574      	cmp	r4, lr
 800c236:	d1f3      	bne.n	800c220 <fim_do_jogo+0x118>
 800c238:	4662      	mov	r2, ip
 800c23a:	4623      	mov	r3, r4
 800c23c:	cb03      	ldmia	r3!, {r0, r1}
 800c23e:	6010      	str	r0, [r2, #0]
 800c240:	6051      	str	r1, [r2, #4]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	7213      	strb	r3, [r2, #8]
	BSP_LCD_SetFont(&Font16);
 800c246:	4811      	ldr	r0, [pc, #68]	; (800c28c <fim_do_jogo+0x184>)
 800c248:	f7f5 fa12 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 10, (uint8_t *)desc, CENTER_MODE);
 800c24c:	f7f5 f972 	bl	8001534 <BSP_LCD_GetYSize>
 800c250:	4603      	mov	r3, r0
 800c252:	085b      	lsrs	r3, r3, #1
 800c254:	b29b      	uxth	r3, r3
 800c256:	3b0a      	subs	r3, #10
 800c258:	b299      	uxth	r1, r3
 800c25a:	2301      	movs	r3, #1
 800c25c:	4a05      	ldr	r2, [pc, #20]	; (800c274 <fim_do_jogo+0x16c>)
 800c25e:	2000      	movs	r0, #0
 800c260:	f7f5 fa8c 	bl	800177c <BSP_LCD_DisplayStringAt>
}
 800c264:	bf00      	nop
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c26c:	20000abc 	.word	0x20000abc
 800c270:	0800f56c 	.word	0x0800f56c
 800c274:	20000b40 	.word	0x20000b40
 800c278:	0800f594 	.word	0x0800f594
 800c27c:	0800f5c8 	.word	0x0800f5c8
 800c280:	20000044 	.word	0x20000044
 800c284:	ff0000ff 	.word	0xff0000ff
 800c288:	0800f5fc 	.word	0x0800f5fc
 800c28c:	2000004c 	.word	0x2000004c

0800c290 <imprime_tabuleiro>:

void imprime_tabuleiro(){
 800c290:	b590      	push	{r4, r7, lr}
 800c292:	ed2d 8b02 	vpush	{d8}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0

	  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800c29a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800c29e:	f7f5 f9b5 	bl	800160c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10, 400, 400);
 800c2a2:	f7f5 f93b 	bl	800151c <BSP_LCD_GetXSize>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b45      	ldr	r3, [pc, #276]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c2aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c2ae:	08db      	lsrs	r3, r3, #3
 800c2b0:	b29c      	uxth	r4, r3
 800c2b2:	f7f5 f93f 	bl	8001534 <BSP_LCD_GetYSize>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	4b41      	ldr	r3, [pc, #260]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c2ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c2be:	08db      	lsrs	r3, r3, #3
 800c2c0:	b299      	uxth	r1, r3
 800c2c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c2c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7f5 fc8a 	bl	8001be4 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800c2d0:	483c      	ldr	r0, [pc, #240]	; (800c3c4 <imprime_tabuleiro+0x134>)
 800c2d2:	f7f5 f99b 	bl	800160c <BSP_LCD_SetTextColor>
	  int i=0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	607b      	str	r3, [r7, #4]
	  for(i = 0; i<=8; i++){
 800c2da:	2300      	movs	r3, #0
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	e024      	b.n	800c32a <imprime_tabuleiro+0x9a>
		  BSP_LCD_DrawVLine(BSP_LCD_GetXSize()/10 + (BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 800c2e0:	f7f5 f91c 	bl	800151c <BSP_LCD_GetXSize>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	4b36      	ldr	r3, [pc, #216]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c2e8:	fba3 2302 	umull	r2, r3, r3, r2
 800c2ec:	08db      	lsrs	r3, r3, #3
 800c2ee:	b29c      	uxth	r4, r3
 800c2f0:	f7f5 f914 	bl	800151c <BSP_LCD_GetXSize>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	091b      	lsrs	r3, r3, #4
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	fb12 f303 	smulbb	r3, r2, r3
 800c302:	b29b      	uxth	r3, r3
 800c304:	4423      	add	r3, r4
 800c306:	b29c      	uxth	r4, r3
 800c308:	f7f5 f914 	bl	8001534 <BSP_LCD_GetYSize>
 800c30c:	4602      	mov	r2, r0
 800c30e:	4b2c      	ldr	r3, [pc, #176]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c310:	fba3 2302 	umull	r2, r3, r3, r2
 800c314:	08db      	lsrs	r3, r3, #3
 800c316:	b29b      	uxth	r3, r3
 800c318:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c31c:	4619      	mov	r1, r3
 800c31e:	4620      	mov	r0, r4
 800c320:	f7f5 fb2e 	bl	8001980 <BSP_LCD_DrawVLine>
	  for(i = 0; i<=8; i++){
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3301      	adds	r3, #1
 800c328:	607b      	str	r3, [r7, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	ddd7      	ble.n	800c2e0 <imprime_tabuleiro+0x50>
	  }
	  int j;
	  for(j = 0; j<=8; j++){
 800c330:	2300      	movs	r3, #0
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	e033      	b.n	800c39e <imprime_tabuleiro+0x10e>
		  BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10 + (BSP_LCD_GetYSize()/9.6)*j, 400);
 800c336:	f7f5 f8f1 	bl	800151c <BSP_LCD_GetXSize>
 800c33a:	4602      	mov	r2, r0
 800c33c:	4b20      	ldr	r3, [pc, #128]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c33e:	fba3 2302 	umull	r2, r3, r3, r2
 800c342:	08db      	lsrs	r3, r3, #3
 800c344:	b29c      	uxth	r4, r3
 800c346:	f7f5 f8f5 	bl	8001534 <BSP_LCD_GetYSize>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b1c      	ldr	r3, [pc, #112]	; (800c3c0 <imprime_tabuleiro+0x130>)
 800c34e:	fba3 2302 	umull	r2, r3, r3, r2
 800c352:	08db      	lsrs	r3, r3, #3
 800c354:	ee07 3a90 	vmov	s15, r3
 800c358:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800c35c:	f7f5 f8ea 	bl	8001534 <BSP_LCD_GetYSize>
 800c360:	ee07 0a90 	vmov	s15, r0
 800c364:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c368:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800c3b8 <imprime_tabuleiro+0x128>
 800c36c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	ee07 3a90 	vmov	s15, r3
 800c376:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c37a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c37e:	ee38 7b07 	vadd.f64	d7, d8, d7
 800c382:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c386:	ee17 3a90 	vmov	r3, s15
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c390:	4619      	mov	r1, r3
 800c392:	4620      	mov	r0, r4
 800c394:	f7f5 fab6 	bl	8001904 <BSP_LCD_DrawHLine>
	  for(j = 0; j<=8; j++){
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	603b      	str	r3, [r7, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b08      	cmp	r3, #8
 800c3a2:	ddc8      	ble.n	800c336 <imprime_tabuleiro+0xa6>
	  }
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c3a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c3a8:	f7f5 f930 	bl	800160c <BSP_LCD_SetTextColor>

}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	ecbd 8b02 	vpop	{d8}
 800c3b6:	bd90      	pop	{r4, r7, pc}
 800c3b8:	33333333 	.word	0x33333333
 800c3bc:	40233333 	.word	0x40233333
 800c3c0:	cccccccd 	.word	0xcccccccd
 800c3c4:	ffffa500 	.word	0xffffa500

0800c3c8 <mostra_temperatura>:

void mostra_temperatura(){
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
	  //Mostrar a temperatura
	  sprintf(desc, "Temperatura: %ld C", JTemp);
 800c3cc:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <mostra_temperatura+0x34>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	490b      	ldr	r1, [pc, #44]	; (800c400 <mostra_temperatura+0x38>)
 800c3d4:	480b      	ldr	r0, [pc, #44]	; (800c404 <mostra_temperatura+0x3c>)
 800c3d6:	f002 fc7d 	bl	800ecd4 <siprintf>
	  BSP_LCD_SetFont(&Font12);
 800c3da:	480b      	ldr	r0, [pc, #44]	; (800c408 <mostra_temperatura+0x40>)
 800c3dc:	f7f5 f948 	bl	8001670 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 90, (uint8_t *)desc, RIGHT_MODE);
 800c3e0:	f7f5 f8a8 	bl	8001534 <BSP_LCD_GetYSize>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	085b      	lsrs	r3, r3, #1
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	3b5a      	subs	r3, #90	; 0x5a
 800c3ec:	b299      	uxth	r1, r3
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	4a04      	ldr	r2, [pc, #16]	; (800c404 <mostra_temperatura+0x3c>)
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7f5 f9c2 	bl	800177c <BSP_LCD_DisplayStringAt>
}
 800c3f8:	bf00      	nop
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20000afc 	.word	0x20000afc
 800c400:	0800f628 	.word	0x0800f628
 800c404:	20000b40 	.word	0x20000b40
 800c408:	20000054 	.word	0x20000054

0800c40c <mostra_tempo>:

void mostra_tempo(){
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
	//Mostrar o tempo
	sprintf(desc, "Tempo: %d segundos", count);
 800c410:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <mostra_tempo+0x34>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	461a      	mov	r2, r3
 800c416:	490b      	ldr	r1, [pc, #44]	; (800c444 <mostra_tempo+0x38>)
 800c418:	480b      	ldr	r0, [pc, #44]	; (800c448 <mostra_tempo+0x3c>)
 800c41a:	f002 fc5b 	bl	800ecd4 <siprintf>
	BSP_LCD_SetFont(&Font12);
 800c41e:	480b      	ldr	r0, [pc, #44]	; (800c44c <mostra_tempo+0x40>)
 800c420:	f7f5 f926 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 70, (uint8_t *)desc, RIGHT_MODE);
 800c424:	f7f5 f886 	bl	8001534 <BSP_LCD_GetYSize>
 800c428:	4603      	mov	r3, r0
 800c42a:	085b      	lsrs	r3, r3, #1
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3b46      	subs	r3, #70	; 0x46
 800c430:	b299      	uxth	r1, r3
 800c432:	2302      	movs	r3, #2
 800c434:	4a04      	ldr	r2, [pc, #16]	; (800c448 <mostra_tempo+0x3c>)
 800c436:	2000      	movs	r0, #0
 800c438:	f7f5 f9a0 	bl	800177c <BSP_LCD_DisplayStringAt>
}
 800c43c:	bf00      	nop
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	20000348 	.word	0x20000348
 800c444:	0800f63c 	.word	0x0800f63c
 800c448:	20000b40 	.word	0x20000b40
 800c44c:	20000054 	.word	0x20000054

0800c450 <mostra_deadline>:

void mostra_deadline(){
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
	//Mostrar deadline
	sprintf(desc, "Faltam: %d segundos", deadline);
 800c454:	4b0b      	ldr	r3, [pc, #44]	; (800c484 <mostra_deadline+0x34>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	461a      	mov	r2, r3
 800c45a:	490b      	ldr	r1, [pc, #44]	; (800c488 <mostra_deadline+0x38>)
 800c45c:	480b      	ldr	r0, [pc, #44]	; (800c48c <mostra_deadline+0x3c>)
 800c45e:	f002 fc39 	bl	800ecd4 <siprintf>
	BSP_LCD_SetFont(&Font20);
 800c462:	480b      	ldr	r0, [pc, #44]	; (800c490 <mostra_deadline+0x40>)
 800c464:	f7f5 f904 	bl	8001670 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 20, (uint8_t *)desc, RIGHT_MODE);
 800c468:	f7f5 f864 	bl	8001534 <BSP_LCD_GetYSize>
 800c46c:	4603      	mov	r3, r0
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	b29b      	uxth	r3, r3
 800c472:	3b14      	subs	r3, #20
 800c474:	b299      	uxth	r1, r3
 800c476:	2302      	movs	r3, #2
 800c478:	4a04      	ldr	r2, [pc, #16]	; (800c48c <mostra_deadline+0x3c>)
 800c47a:	2000      	movs	r0, #0
 800c47c:	f7f5 f97e 	bl	800177c <BSP_LCD_DisplayStringAt>
}
 800c480:	bf00      	nop
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000070 	.word	0x20000070
 800c488:	0800f650 	.word	0x0800f650
 800c48c:	20000b40 	.word	0x20000b40
 800c490:	20000044 	.word	0x20000044

0800c494 <mostra_quem_joga>:

void mostra_quem_joga(){
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
	//Mostrar o jogador
    if (ver_quem_joga%2 == 1){
 800c498:	4b23      	ldr	r3, [pc, #140]	; (800c528 <mostra_quem_joga+0x94>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	bfb8      	it	lt
 800c4a4:	425b      	neglt	r3, r3
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d11d      	bne.n	800c4e6 <mostra_quem_joga+0x52>
    	sprintf(desc, "Jogador 1");
 800c4aa:	4a20      	ldr	r2, [pc, #128]	; (800c52c <mostra_quem_joga+0x98>)
 800c4ac:	4b20      	ldr	r3, [pc, #128]	; (800c530 <mostra_quem_joga+0x9c>)
 800c4ae:	cb03      	ldmia	r3!, {r0, r1}
 800c4b0:	6010      	str	r0, [r2, #0]
 800c4b2:	6051      	str	r1, [r2, #4]
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	8113      	strh	r3, [r2, #8]
    	BSP_LCD_SetFont(&Font16);
 800c4b8:	481e      	ldr	r0, [pc, #120]	; (800c534 <mostra_quem_joga+0xa0>)
 800c4ba:	f7f5 f8d9 	bl	8001670 <BSP_LCD_SetFont>
    	BSP_LCD_SetTextColor(COR_JOGADOR_1);
 800c4be:	481e      	ldr	r0, [pc, #120]	; (800c538 <mostra_quem_joga+0xa4>)
 800c4c0:	f7f5 f8a4 	bl	800160c <BSP_LCD_SetTextColor>
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
 800c4c4:	f7f5 f836 	bl	8001534 <BSP_LCD_GetYSize>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	085b      	lsrs	r3, r3, #1
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	3b32      	subs	r3, #50	; 0x32
 800c4d0:	b299      	uxth	r1, r3
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	4a15      	ldr	r2, [pc, #84]	; (800c52c <mostra_quem_joga+0x98>)
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	f7f5 f950 	bl	800177c <BSP_LCD_DisplayStringAt>
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c4dc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c4e0:	f7f5 f894 	bl	800160c <BSP_LCD_SetTextColor>
    	BSP_LCD_SetFont(&Font16);
    	BSP_LCD_SetTextColor(COR_JOGADOR_2);
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    }
}
 800c4e4:	e01d      	b.n	800c522 <mostra_quem_joga+0x8e>
    	sprintf(desc, "Jogador 2");
 800c4e6:	4a11      	ldr	r2, [pc, #68]	; (800c52c <mostra_quem_joga+0x98>)
 800c4e8:	4b14      	ldr	r3, [pc, #80]	; (800c53c <mostra_quem_joga+0xa8>)
 800c4ea:	cb03      	ldmia	r3!, {r0, r1}
 800c4ec:	6010      	str	r0, [r2, #0]
 800c4ee:	6051      	str	r1, [r2, #4]
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	8113      	strh	r3, [r2, #8]
    	BSP_LCD_SetFont(&Font16);
 800c4f4:	480f      	ldr	r0, [pc, #60]	; (800c534 <mostra_quem_joga+0xa0>)
 800c4f6:	f7f5 f8bb 	bl	8001670 <BSP_LCD_SetFont>
    	BSP_LCD_SetTextColor(COR_JOGADOR_2);
 800c4fa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800c4fe:	f7f5 f885 	bl	800160c <BSP_LCD_SetTextColor>
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
 800c502:	f7f5 f817 	bl	8001534 <BSP_LCD_GetYSize>
 800c506:	4603      	mov	r3, r0
 800c508:	085b      	lsrs	r3, r3, #1
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	3b32      	subs	r3, #50	; 0x32
 800c50e:	b299      	uxth	r1, r3
 800c510:	2302      	movs	r3, #2
 800c512:	4a06      	ldr	r2, [pc, #24]	; (800c52c <mostra_quem_joga+0x98>)
 800c514:	2000      	movs	r0, #0
 800c516:	f7f5 f931 	bl	800177c <BSP_LCD_DisplayStringAt>
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c51a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c51e:	f7f5 f875 	bl	800160c <BSP_LCD_SetTextColor>
}
 800c522:	bf00      	nop
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20000074 	.word	0x20000074
 800c52c:	20000b40 	.word	0x20000b40
 800c530:	0800f664 	.word	0x0800f664
 800c534:	2000004c 	.word	0x2000004c
 800c538:	ffff0000 	.word	0xffff0000
 800c53c:	0800f670 	.word	0x0800f670

0800c540 <imprime_pecas_iniciais>:

void imprime_pecas_iniciais(){
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0

	BSP_LCD_SetTextColor(COR_JOGADOR_1);
 800c544:	4819      	ldr	r0, [pc, #100]	; (800c5ac <imprime_pecas_iniciais+0x6c>)
 800c546:	f7f5 f861 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(50*3 + 105, 50*3 + 75, 15);
 800c54a:	220f      	movs	r2, #15
 800c54c:	21e1      	movs	r1, #225	; 0xe1
 800c54e:	20ff      	movs	r0, #255	; 0xff
 800c550:	f7f5 fba2 	bl	8001c98 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(50*4 + 105, 50*4 + 75, 15);
 800c554:	220f      	movs	r2, #15
 800c556:	f240 1113 	movw	r1, #275	; 0x113
 800c55a:	f240 1031 	movw	r0, #305	; 0x131
 800c55e:	f7f5 fb9b 	bl	8001c98 <BSP_LCD_FillCircle>
	tabuleiro[3][3] = PECA_JOGADOR_1;
 800c562:	4b13      	ldr	r3, [pc, #76]	; (800c5b0 <imprime_pecas_iniciais+0x70>)
 800c564:	2258      	movs	r2, #88	; 0x58
 800c566:	76da      	strb	r2, [r3, #27]
	tabuleiro[4][4] = PECA_JOGADOR_1;
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <imprime_pecas_iniciais+0x70>)
 800c56a:	2258      	movs	r2, #88	; 0x58
 800c56c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	BSP_LCD_SetTextColor(COR_JOGADOR_2);
 800c570:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800c574:	f7f5 f84a 	bl	800160c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(50*3 + 105, 50*4 + 75, 15);
 800c578:	220f      	movs	r2, #15
 800c57a:	f240 1113 	movw	r1, #275	; 0x113
 800c57e:	20ff      	movs	r0, #255	; 0xff
 800c580:	f7f5 fb8a 	bl	8001c98 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(50*4 + 105, 50*3 + 75, 15);
 800c584:	220f      	movs	r2, #15
 800c586:	21e1      	movs	r1, #225	; 0xe1
 800c588:	f240 1031 	movw	r0, #305	; 0x131
 800c58c:	f7f5 fb84 	bl	8001c98 <BSP_LCD_FillCircle>
	tabuleiro[3][4] = PECA_JOGADOR_2;
 800c590:	4b07      	ldr	r3, [pc, #28]	; (800c5b0 <imprime_pecas_iniciais+0x70>)
 800c592:	2259      	movs	r2, #89	; 0x59
 800c594:	771a      	strb	r2, [r3, #28]
	tabuleiro[4][3] = PECA_JOGADOR_2;
 800c596:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <imprime_pecas_iniciais+0x70>)
 800c598:	2259      	movs	r2, #89	; 0x59
 800c59a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c59e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c5a2:	f7f5 f833 	bl	800160c <BSP_LCD_SetTextColor>

}
 800c5a6:	bf00      	nop
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	ffff0000 	.word	0xffff0000
 800c5b0:	20000abc 	.word	0x20000abc

0800c5b4 <imprime_jogada>:

void imprime_jogada(float x, float y, int i, int j){
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	ed87 0a03 	vstr	s0, [r7, #12]
 800c5be:	edc7 0a02 	vstr	s1, [r7, #8]
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
    if (ver_quem_joga%2 == 1){
 800c5c6:	4b24      	ldr	r3, [pc, #144]	; (800c658 <imprime_jogada+0xa4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	bfb8      	it	lt
 800c5d2:	425b      	neglt	r3, r3
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d11d      	bne.n	800c614 <imprime_jogada+0x60>
    	tabuleiro[i][j] = PECA_JOGADOR_1;
 800c5d8:	4a20      	ldr	r2, [pc, #128]	; (800c65c <imprime_jogada+0xa8>)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	441a      	add	r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	2258      	movs	r2, #88	; 0x58
 800c5e6:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(COR_JOGADOR_1);
 800c5e8:	481d      	ldr	r0, [pc, #116]	; (800c660 <imprime_jogada+0xac>)
 800c5ea:	f7f5 f80f 	bl	800160c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 15);
 800c5ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800c5f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5f6:	ee17 3a90 	vmov	r3, s15
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c604:	ee17 2a90 	vmov	r2, s15
 800c608:	b291      	uxth	r1, r2
 800c60a:	220f      	movs	r2, #15
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7f5 fb43 	bl	8001c98 <BSP_LCD_FillCircle>
    else{
    	tabuleiro[i][j] = PECA_JOGADOR_2;
		BSP_LCD_SetTextColor(COR_JOGADOR_2);
		BSP_LCD_FillCircle(x, y, 15);
    }
}
 800c612:	e01d      	b.n	800c650 <imprime_jogada+0x9c>
    	tabuleiro[i][j] = PECA_JOGADOR_2;
 800c614:	4a11      	ldr	r2, [pc, #68]	; (800c65c <imprime_jogada+0xa8>)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	441a      	add	r2, r3
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	4413      	add	r3, r2
 800c620:	2259      	movs	r2, #89	; 0x59
 800c622:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(COR_JOGADOR_2);
 800c624:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800c628:	f7f4 fff0 	bl	800160c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 15);
 800c62c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c634:	ee17 3a90 	vmov	r3, s15
 800c638:	b29b      	uxth	r3, r3
 800c63a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c642:	ee17 2a90 	vmov	r2, s15
 800c646:	b291      	uxth	r1, r2
 800c648:	220f      	movs	r2, #15
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7f5 fb24 	bl	8001c98 <BSP_LCD_FillCircle>
}
 800c650:	bf00      	nop
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20000074 	.word	0x20000074
 800c65c:	20000abc 	.word	0x20000abc
 800c660:	ffff0000 	.word	0xffff0000

0800c664 <actualiza_pecas_tabuleiro>:

void actualiza_pecas_tabuleiro(){
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
	int k = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	607b      	str	r3, [r7, #4]
	int z = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	603b      	str	r3, [r7, #0]


	for(k = 0; k < 8; k++){
 800c672:	2300      	movs	r3, #0
 800c674:	607b      	str	r3, [r7, #4]
 800c676:	e0c5      	b.n	800c804 <actualiza_pecas_tabuleiro+0x1a0>
		for(z = 0; z < 8; z++){
 800c678:	2300      	movs	r3, #0
 800c67a:	603b      	str	r3, [r7, #0]
 800c67c:	e0bb      	b.n	800c7f6 <actualiza_pecas_tabuleiro+0x192>
			if(tabuleiro[k][z] == PECA_JOGADOR_1){
 800c67e:	4a67      	ldr	r2, [pc, #412]	; (800c81c <actualiza_pecas_tabuleiro+0x1b8>)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	00db      	lsls	r3, r3, #3
 800c684:	441a      	add	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	4413      	add	r3, r2
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b58      	cmp	r3, #88	; 0x58
 800c690:	d123      	bne.n	800c6da <actualiza_pecas_tabuleiro+0x76>
				BSP_LCD_SetTextColor(COR_JOGADOR_1);
 800c692:	4863      	ldr	r0, [pc, #396]	; (800c820 <actualiza_pecas_tabuleiro+0x1bc>)
 800c694:	f7f4 ffba 	bl	800160c <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	461a      	mov	r2, r3
 800c69e:	0092      	lsls	r2, r2, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	0091      	lsls	r1, r2, #2
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4413      	add	r3, r2
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	3369      	adds	r3, #105	; 0x69
 800c6b2:	b298      	uxth	r0, r3
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	0092      	lsls	r2, r2, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	461a      	mov	r2, r3
 800c6c0:	0091      	lsls	r1, r2, #2
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	334b      	adds	r3, #75	; 0x4b
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	220f      	movs	r2, #15
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	f7f5 fae0 	bl	8001c98 <BSP_LCD_FillCircle>
 800c6d8:	e08a      	b.n	800c7f0 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==PECA_JOGADOR_2){
 800c6da:	4a50      	ldr	r2, [pc, #320]	; (800c81c <actualiza_pecas_tabuleiro+0x1b8>)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	441a      	add	r2, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b59      	cmp	r3, #89	; 0x59
 800c6ec:	d124      	bne.n	800c738 <actualiza_pecas_tabuleiro+0xd4>
				BSP_LCD_SetTextColor(COR_JOGADOR_2);
 800c6ee:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800c6f2:	f7f4 ff8b 	bl	800160c <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	0092      	lsls	r2, r2, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	461a      	mov	r2, r3
 800c702:	0091      	lsls	r1, r2, #2
 800c704:	461a      	mov	r2, r3
 800c706:	460b      	mov	r3, r1
 800c708:	4413      	add	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3369      	adds	r3, #105	; 0x69
 800c710:	b298      	uxth	r0, r3
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	b29b      	uxth	r3, r3
 800c716:	461a      	mov	r2, r3
 800c718:	0092      	lsls	r2, r2, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	461a      	mov	r2, r3
 800c71e:	0091      	lsls	r1, r2, #2
 800c720:	461a      	mov	r2, r3
 800c722:	460b      	mov	r3, r1
 800c724:	4413      	add	r3, r2
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	b29b      	uxth	r3, r3
 800c72a:	334b      	adds	r3, #75	; 0x4b
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	220f      	movs	r2, #15
 800c730:	4619      	mov	r1, r3
 800c732:	f7f5 fab1 	bl	8001c98 <BSP_LCD_FillCircle>
 800c736:	e05b      	b.n	800c7f0 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==SEM_PECA){
 800c738:	4a38      	ldr	r2, [pc, #224]	; (800c81c <actualiza_pecas_tabuleiro+0x1b8>)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	441a      	add	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	4413      	add	r3, r2
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b4e      	cmp	r3, #78	; 0x4e
 800c74a:	d124      	bne.n	800c796 <actualiza_pecas_tabuleiro+0x132>
				BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800c74c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800c750:	f7f4 ff5c 	bl	800160c <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	b29b      	uxth	r3, r3
 800c758:	461a      	mov	r2, r3
 800c75a:	0092      	lsls	r2, r2, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	461a      	mov	r2, r3
 800c760:	0091      	lsls	r1, r2, #2
 800c762:	461a      	mov	r2, r3
 800c764:	460b      	mov	r3, r1
 800c766:	4413      	add	r3, r2
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	3369      	adds	r3, #105	; 0x69
 800c76e:	b298      	uxth	r0, r3
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	b29b      	uxth	r3, r3
 800c774:	461a      	mov	r2, r3
 800c776:	0092      	lsls	r2, r2, #2
 800c778:	4413      	add	r3, r2
 800c77a:	461a      	mov	r2, r3
 800c77c:	0091      	lsls	r1, r2, #2
 800c77e:	461a      	mov	r2, r3
 800c780:	460b      	mov	r3, r1
 800c782:	4413      	add	r3, r2
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	b29b      	uxth	r3, r3
 800c788:	334b      	adds	r3, #75	; 0x4b
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	220f      	movs	r2, #15
 800c78e:	4619      	mov	r1, r3
 800c790:	f7f5 fa82 	bl	8001c98 <BSP_LCD_FillCircle>
 800c794:	e02c      	b.n	800c7f0 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==JOGADA_POSSIVEL){
 800c796:	4a21      	ldr	r2, [pc, #132]	; (800c81c <actualiza_pecas_tabuleiro+0x1b8>)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	441a      	add	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b50      	cmp	r3, #80	; 0x50
 800c7a8:	d122      	bne.n	800c7f0 <actualiza_pecas_tabuleiro+0x18c>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c7aa:	481e      	ldr	r0, [pc, #120]	; (800c824 <actualiza_pecas_tabuleiro+0x1c0>)
 800c7ac:	f7f4 ff2e 	bl	800160c <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 5);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	0092      	lsls	r2, r2, #2
 800c7b8:	4413      	add	r3, r2
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	0091      	lsls	r1, r2, #2
 800c7be:	461a      	mov	r2, r3
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4413      	add	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	3369      	adds	r3, #105	; 0x69
 800c7ca:	b298      	uxth	r0, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	0092      	lsls	r2, r2, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	0091      	lsls	r1, r2, #2
 800c7da:	461a      	mov	r2, r3
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4413      	add	r3, r2
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	334b      	adds	r3, #75	; 0x4b
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	2205      	movs	r2, #5
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	f7f5 fa54 	bl	8001c98 <BSP_LCD_FillCircle>
		for(z = 0; z < 8; z++){
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	603b      	str	r3, [r7, #0]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b07      	cmp	r3, #7
 800c7fa:	f77f af40 	ble.w	800c67e <actualiza_pecas_tabuleiro+0x1a>
	for(k = 0; k < 8; k++){
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3301      	adds	r3, #1
 800c802:	607b      	str	r3, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b07      	cmp	r3, #7
 800c808:	f77f af36 	ble.w	800c678 <actualiza_pecas_tabuleiro+0x14>
			}
		}
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c80c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c810:	f7f4 fefc 	bl	800160c <BSP_LCD_SetTextColor>
}
 800c814:	bf00      	nop
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20000abc 	.word	0x20000abc
 800c820:	ffff0000 	.word	0xffff0000
 800c824:	ff0000ff 	.word	0xff0000ff

0800c828 <limpa_possibilidades>:

void limpa_possibilidades(){
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
	int k = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	607b      	str	r3, [r7, #4]
	int z = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	603b      	str	r3, [r7, #0]


	for(k = 0; k < 8; k++){
 800c836:	2300      	movs	r3, #0
 800c838:	607b      	str	r3, [r7, #4]
 800c83a:	e01d      	b.n	800c878 <limpa_possibilidades+0x50>
		for(z = 0; z < 8; z++){
 800c83c:	2300      	movs	r3, #0
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	e014      	b.n	800c86c <limpa_possibilidades+0x44>
			if(tabuleiro[k][z] == JOGADA_POSSIVEL){
 800c842:	4a12      	ldr	r2, [pc, #72]	; (800c88c <limpa_possibilidades+0x64>)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	00db      	lsls	r3, r3, #3
 800c848:	441a      	add	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	4413      	add	r3, r2
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b50      	cmp	r3, #80	; 0x50
 800c854:	d107      	bne.n	800c866 <limpa_possibilidades+0x3e>
				tabuleiro[k][z] = SEM_PECA;
 800c856:	4a0d      	ldr	r2, [pc, #52]	; (800c88c <limpa_possibilidades+0x64>)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	441a      	add	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	4413      	add	r3, r2
 800c862:	224e      	movs	r2, #78	; 0x4e
 800c864:	701a      	strb	r2, [r3, #0]
		for(z = 0; z < 8; z++){
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	3301      	adds	r3, #1
 800c86a:	603b      	str	r3, [r7, #0]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b07      	cmp	r3, #7
 800c870:	dde7      	ble.n	800c842 <limpa_possibilidades+0x1a>
	for(k = 0; k < 8; k++){
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3301      	adds	r3, #1
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b07      	cmp	r3, #7
 800c87c:	ddde      	ble.n	800c83c <limpa_possibilidades+0x14>
			}
		}
	}
}
 800c87e:	bf00      	nop
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	20000abc 	.word	0x20000abc

0800c890 <validar_com_self>:

int validar_com_self(int linsel, int colsel){
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
    char self, adv;
    int i = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	613b      	str	r3, [r7, #16]
    int j = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]

    if (ver_quem_joga%2 == 1){
 800c8a2:	4ba3      	ldr	r3, [pc, #652]	; (800cb30 <validar_com_self+0x2a0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	bfb8      	it	lt
 800c8ae:	425b      	neglt	r3, r3
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d104      	bne.n	800c8be <validar_com_self+0x2e>
    	self = PECA_JOGADOR_1;
 800c8b4:	2358      	movs	r3, #88	; 0x58
 800c8b6:	75fb      	strb	r3, [r7, #23]
    	adv = PECA_JOGADOR_2;
 800c8b8:	2359      	movs	r3, #89	; 0x59
 800c8ba:	75bb      	strb	r3, [r7, #22]
 800c8bc:	e003      	b.n	800c8c6 <validar_com_self+0x36>
    }
    else{
    	self = PECA_JOGADOR_2;
 800c8be:	2359      	movs	r3, #89	; 0x59
 800c8c0:	75fb      	strb	r3, [r7, #23]
    	adv = PECA_JOGADOR_1;
 800c8c2:	2358      	movs	r3, #88	; 0x58
 800c8c4:	75bb      	strb	r3, [r7, #22]
    }


    //ver relaçoes com as peças vizinhas
    //ESQUERDA
    if(tabuleiro[linsel][colsel-1] == adv){
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	499a      	ldr	r1, [pc, #616]	; (800cb34 <validar_com_self+0x2a4>)
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	00d2      	lsls	r2, r2, #3
 800c8d0:	440a      	add	r2, r1
 800c8d2:	4413      	add	r3, r2
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	7dba      	ldrb	r2, [r7, #22]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d116      	bne.n	800c90c <validar_com_self+0x7c>
        for(j = colsel-2; j >= 0 ;  j-- ){
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	3b02      	subs	r3, #2
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	e00f      	b.n	800c906 <validar_com_self+0x76>
            if(tabuleiro[linsel][j] == self){
 800c8e6:	4a93      	ldr	r2, [pc, #588]	; (800cb34 <validar_com_self+0x2a4>)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	441a      	add	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	7dfa      	ldrb	r2, [r7, #23]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d101      	bne.n	800c900 <validar_com_self+0x70>
                return 1;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e155      	b.n	800cbac <validar_com_self+0x31c>
        for(j = colsel-2; j >= 0 ;  j-- ){
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3b01      	subs	r3, #1
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	daec      	bge.n	800c8e6 <validar_com_self+0x56>
        }
    }


    //DIREITA
    if(tabuleiro[linsel][colsel+1] == adv){
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	3301      	adds	r3, #1
 800c910:	4988      	ldr	r1, [pc, #544]	; (800cb34 <validar_com_self+0x2a4>)
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	00d2      	lsls	r2, r2, #3
 800c916:	440a      	add	r2, r1
 800c918:	4413      	add	r3, r2
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	7dba      	ldrb	r2, [r7, #22]
 800c920:	429a      	cmp	r2, r3
 800c922:	d116      	bne.n	800c952 <validar_com_self+0xc2>
        for(j = colsel + 2; j < 8 ;  j++ ){
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	3302      	adds	r3, #2
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	e00f      	b.n	800c94c <validar_com_self+0xbc>
            if(tabuleiro[linsel][j] == self){
 800c92c:	4a81      	ldr	r2, [pc, #516]	; (800cb34 <validar_com_self+0x2a4>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	441a      	add	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4413      	add	r3, r2
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	7dfa      	ldrb	r2, [r7, #23]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d101      	bne.n	800c946 <validar_com_self+0xb6>
                return 1;
 800c942:	2301      	movs	r3, #1
 800c944:	e132      	b.n	800cbac <validar_com_self+0x31c>
        for(j = colsel + 2; j < 8 ;  j++ ){
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3301      	adds	r3, #1
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b07      	cmp	r3, #7
 800c950:	ddec      	ble.n	800c92c <validar_com_self+0x9c>
        }
    }


    //CIMA
    if(tabuleiro[linsel+1][colsel] == adv){
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3301      	adds	r3, #1
 800c956:	4a77      	ldr	r2, [pc, #476]	; (800cb34 <validar_com_self+0x2a4>)
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	441a      	add	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	4413      	add	r3, r2
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	7dba      	ldrb	r2, [r7, #22]
 800c966:	429a      	cmp	r2, r3
 800c968:	d116      	bne.n	800c998 <validar_com_self+0x108>
        for(i = linsel + 2; i < 8 ;  i++ ){
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3302      	adds	r3, #2
 800c96e:	613b      	str	r3, [r7, #16]
 800c970:	e00f      	b.n	800c992 <validar_com_self+0x102>
            if(tabuleiro[i][colsel] == self){
 800c972:	4a70      	ldr	r2, [pc, #448]	; (800cb34 <validar_com_self+0x2a4>)
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	441a      	add	r2, r3
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	4413      	add	r3, r2
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	b2db      	uxtb	r3, r3
 800c982:	7dfa      	ldrb	r2, [r7, #23]
 800c984:	429a      	cmp	r2, r3
 800c986:	d101      	bne.n	800c98c <validar_com_self+0xfc>
                return 1;
 800c988:	2301      	movs	r3, #1
 800c98a:	e10f      	b.n	800cbac <validar_com_self+0x31c>
        for(i = linsel + 2; i < 8 ;  i++ ){
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	3301      	adds	r3, #1
 800c990:	613b      	str	r3, [r7, #16]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	2b07      	cmp	r3, #7
 800c996:	ddec      	ble.n	800c972 <validar_com_self+0xe2>
        }
    }


    //BAIXO
    if(tabuleiro[linsel-1][colsel] == adv){
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	4a65      	ldr	r2, [pc, #404]	; (800cb34 <validar_com_self+0x2a4>)
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	441a      	add	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	7dba      	ldrb	r2, [r7, #22]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d116      	bne.n	800c9de <validar_com_self+0x14e>
        for(i = linsel-2; i >= 0 ;  i-- ){
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3b02      	subs	r3, #2
 800c9b4:	613b      	str	r3, [r7, #16]
 800c9b6:	e00f      	b.n	800c9d8 <validar_com_self+0x148>
            if(tabuleiro[i][colsel] == self){
 800c9b8:	4a5e      	ldr	r2, [pc, #376]	; (800cb34 <validar_com_self+0x2a4>)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	441a      	add	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	7dfa      	ldrb	r2, [r7, #23]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d101      	bne.n	800c9d2 <validar_com_self+0x142>
                return 1;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e0ec      	b.n	800cbac <validar_com_self+0x31c>
        for(i = linsel-2; i >= 0 ;  i-- ){
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	613b      	str	r3, [r7, #16]
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	daec      	bge.n	800c9b8 <validar_com_self+0x128>
        }
    }


   //DIAGONAL SUPERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel+1] == adv){
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	1e5a      	subs	r2, r3, #1
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	4953      	ldr	r1, [pc, #332]	; (800cb34 <validar_com_self+0x2a4>)
 800c9e8:	00d2      	lsls	r2, r2, #3
 800c9ea:	440a      	add	r2, r1
 800c9ec:	4413      	add	r3, r2
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	7dba      	ldrb	r2, [r7, #22]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d11f      	bne.n	800ca38 <validar_com_self+0x1a8>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3b02      	subs	r3, #2
 800c9fc:	613b      	str	r3, [r7, #16]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	3302      	adds	r3, #2
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	e012      	b.n	800ca2c <validar_com_self+0x19c>
           if(tabuleiro[i][j] == self){
 800ca06:	4a4b      	ldr	r2, [pc, #300]	; (800cb34 <validar_com_self+0x2a4>)
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4413      	add	r3, r2
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	7dfa      	ldrb	r2, [r7, #23]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d101      	bne.n	800ca20 <validar_com_self+0x190>
               return 1;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e0c5      	b.n	800cbac <validar_com_self+0x31c>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	613b      	str	r3, [r7, #16]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	db02      	blt.n	800ca38 <validar_com_self+0x1a8>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b07      	cmp	r3, #7
 800ca36:	dde6      	ble.n	800ca06 <validar_com_self+0x176>
       }
   }


   // DIAGONAL INFERIOR DIREITA
     if(tabuleiro[linsel+1][colsel-1] == adv){ //verfica se há adversário junto à casa onde pretendemos jogar
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	493c      	ldr	r1, [pc, #240]	; (800cb34 <validar_com_self+0x2a4>)
 800ca42:	00d2      	lsls	r2, r2, #3
 800ca44:	440a      	add	r2, r1
 800ca46:	4413      	add	r3, r2
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	7dba      	ldrb	r2, [r7, #22]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d11f      	bne.n	800ca92 <validar_com_self+0x202>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3302      	adds	r3, #2
 800ca56:	613b      	str	r3, [r7, #16]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	3b02      	subs	r3, #2
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e012      	b.n	800ca86 <validar_com_self+0x1f6>
           if(tabuleiro[i][j] == self){ // ve se tem self
 800ca60:	4a34      	ldr	r2, [pc, #208]	; (800cb34 <validar_com_self+0x2a4>)
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	441a      	add	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	7dfa      	ldrb	r2, [r7, #23]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d101      	bne.n	800ca7a <validar_com_self+0x1ea>
               return 1;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e098      	b.n	800cbac <validar_com_self+0x31c>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b07      	cmp	r3, #7
 800ca8a:	dc02      	bgt.n	800ca92 <validar_com_self+0x202>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dae6      	bge.n	800ca60 <validar_com_self+0x1d0>
   }



     // DIAGONAL INFERIOR ESQUERDA
     if(tabuleiro[linsel+1][colsel+1] == adv){ //verfica se ha adversario junto
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	4926      	ldr	r1, [pc, #152]	; (800cb34 <validar_com_self+0x2a4>)
 800ca9c:	00d2      	lsls	r2, r2, #3
 800ca9e:	440a      	add	r2, r1
 800caa0:	4413      	add	r3, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	7dba      	ldrb	r2, [r7, #22]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d11f      	bne.n	800caec <validar_com_self+0x25c>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3302      	adds	r3, #2
 800cab0:	613b      	str	r3, [r7, #16]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	3302      	adds	r3, #2
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	e012      	b.n	800cae0 <validar_com_self+0x250>
           if(tabuleiro[i][j] == self){ //verifica se ha self a seguir
 800caba:	4a1e      	ldr	r2, [pc, #120]	; (800cb34 <validar_com_self+0x2a4>)
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	441a      	add	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	7dfa      	ldrb	r2, [r7, #23]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d101      	bne.n	800cad4 <validar_com_self+0x244>
               return 1;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e06b      	b.n	800cbac <validar_com_self+0x31c>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	3301      	adds	r3, #1
 800cad8:	613b      	str	r3, [r7, #16]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b07      	cmp	r3, #7
 800cae4:	dc02      	bgt.n	800caec <validar_com_self+0x25c>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2b07      	cmp	r3, #7
 800caea:	dde6      	ble.n	800caba <validar_com_self+0x22a>
       }
   }


     // DIAGONAL SUPERIOR DIREITA
     if(tabuleiro[linsel-1][colsel-1] == adv){ //ve se ha adversario
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	1e5a      	subs	r2, r3, #1
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	490f      	ldr	r1, [pc, #60]	; (800cb34 <validar_com_self+0x2a4>)
 800caf6:	00d2      	lsls	r2, r2, #3
 800caf8:	440a      	add	r2, r1
 800cafa:	4413      	add	r3, r2
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	7dba      	ldrb	r2, [r7, #22]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d124      	bne.n	800cb50 <validar_com_self+0x2c0>
       for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3b02      	subs	r3, #2
 800cb0a:	613b      	str	r3, [r7, #16]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	3b02      	subs	r3, #2
 800cb10:	60fb      	str	r3, [r7, #12]
 800cb12:	e017      	b.n	800cb44 <validar_com_self+0x2b4>
           if(tabuleiro[i][j] == self){ //ve se ha self
 800cb14:	4a07      	ldr	r2, [pc, #28]	; (800cb34 <validar_com_self+0x2a4>)
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	441a      	add	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	7dfa      	ldrb	r2, [r7, #23]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d106      	bne.n	800cb38 <validar_com_self+0x2a8>
               return 1;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e03e      	b.n	800cbac <validar_com_self+0x31c>
 800cb2e:	bf00      	nop
 800cb30:	20000074 	.word	0x20000074
 800cb34:	20000abc 	.word	0x20000abc
       for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	613b      	str	r3, [r7, #16]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	db02      	blt.n	800cb50 <validar_com_self+0x2c0>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dae1      	bge.n	800cb14 <validar_com_self+0x284>
       }
   }


     // DIAGONAL SUPERIOR ESQUERDA
     if(tabuleiro[linsel-1][colsel+1] == adv){ //adversario ao lado
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	1e5a      	subs	r2, r3, #1
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	4917      	ldr	r1, [pc, #92]	; (800cbb8 <validar_com_self+0x328>)
 800cb5a:	00d2      	lsls	r2, r2, #3
 800cb5c:	440a      	add	r2, r1
 800cb5e:	4413      	add	r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	7dba      	ldrb	r2, [r7, #22]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d11f      	bne.n	800cbaa <validar_com_self+0x31a>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3b02      	subs	r3, #2
 800cb6e:	613b      	str	r3, [r7, #16]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	3302      	adds	r3, #2
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e012      	b.n	800cb9e <validar_com_self+0x30e>
           if(tabuleiro[i][j] == self){ //self a seguir ao adversario
 800cb78:	4a0f      	ldr	r2, [pc, #60]	; (800cbb8 <validar_com_self+0x328>)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	441a      	add	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	7dfa      	ldrb	r2, [r7, #23]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d101      	bne.n	800cb92 <validar_com_self+0x302>
               return 1;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e00c      	b.n	800cbac <validar_com_self+0x31c>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	db02      	blt.n	800cbaa <validar_com_self+0x31a>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b07      	cmp	r3, #7
 800cba8:	dde6      	ble.n	800cb78 <validar_com_self+0x2e8>
           }
       }
   }

     return 0;
 800cbaa:	2300      	movs	r3, #0

}
 800cbac:	4618      	mov	r0, r3
 800cbae:	371c      	adds	r7, #28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	20000abc 	.word	0x20000abc

0800cbbc <jogadas_possiveis>:

void jogadas_possiveis(){
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
    char adv;
    int i = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60bb      	str	r3, [r7, #8]
    int j = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	607b      	str	r3, [r7, #4]


    if (ver_quem_joga%2 == 1){
 800cbca:	4b95      	ldr	r3, [pc, #596]	; (800ce20 <jogadas_possiveis+0x264>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	bfb8      	it	lt
 800cbd6:	425b      	neglt	r3, r3
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d102      	bne.n	800cbe2 <jogadas_possiveis+0x26>
        adv = PECA_JOGADOR_2;
 800cbdc:	2359      	movs	r3, #89	; 0x59
 800cbde:	73fb      	strb	r3, [r7, #15]
 800cbe0:	e001      	b.n	800cbe6 <jogadas_possiveis+0x2a>
    }
    else{
    	adv = PECA_JOGADOR_1;
 800cbe2:	2358      	movs	r3, #88	; 0x58
 800cbe4:	73fb      	strb	r3, [r7, #15]
    }




    	for(i = 0; i < 8; i++){
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60bb      	str	r3, [r7, #8]
 800cbea:	e2b0      	b.n	800d14e <jogadas_possiveis+0x592>
    		for(j = 0; j < 8; j++){
 800cbec:	2300      	movs	r3, #0
 800cbee:	607b      	str	r3, [r7, #4]
 800cbf0:	e2a6      	b.n	800d140 <jogadas_possiveis+0x584>
    			if(i==0 && j==0){ //canto superior esquerdo
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d12c      	bne.n	800cc52 <jogadas_possiveis+0x96>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d129      	bne.n	800cc52 <jogadas_possiveis+0x96>
    				if((tabuleiro[0][1] == adv ||
 800cbfe:	4b89      	ldr	r3, [pc, #548]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc00:	785b      	ldrb	r3, [r3, #1]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	7bfa      	ldrb	r2, [r7, #15]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d00c      	beq.n	800cc24 <jogadas_possiveis+0x68>
    					tabuleiro[1][1] == adv ||
 800cc0a:	4b86      	ldr	r3, [pc, #536]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc0c:	7a5b      	ldrb	r3, [r3, #9]
 800cc0e:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][1] == adv ||
 800cc10:	7bfa      	ldrb	r2, [r7, #15]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d006      	beq.n	800cc24 <jogadas_possiveis+0x68>
						tabuleiro[1][0] == adv)
 800cc16:	4b83      	ldr	r3, [pc, #524]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc18:	7a1b      	ldrb	r3, [r3, #8]
 800cc1a:	b2db      	uxtb	r3, r3
    					tabuleiro[1][1] == adv ||
 800cc1c:	7bfa      	ldrb	r2, [r7, #15]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	f040 827c 	bne.w	800d11c <jogadas_possiveis+0x560>
    					&& tabuleiro[0][0]==SEM_PECA && validar_com_self(i, j)){
 800cc24:	4b7f      	ldr	r3, [pc, #508]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b4e      	cmp	r3, #78	; 0x4e
 800cc2c:	f040 8276 	bne.w	800d11c <jogadas_possiveis+0x560>
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	68b8      	ldr	r0, [r7, #8]
 800cc34:	f7ff fe2c 	bl	800c890 <validar_com_self>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f000 826e 	beq.w	800d11c <jogadas_possiveis+0x560>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800cc40:	4a78      	ldr	r2, [pc, #480]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	441a      	add	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	2250      	movs	r2, #80	; 0x50
 800cc4e:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][1] == adv ||
 800cc50:	e264      	b.n	800d11c <jogadas_possiveis+0x560>
    				}
    			}
    			else if(i==0 && j==7){ //canto superior direito
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d12c      	bne.n	800ccb2 <jogadas_possiveis+0xf6>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b07      	cmp	r3, #7
 800cc5c:	d129      	bne.n	800ccb2 <jogadas_possiveis+0xf6>
    				if((tabuleiro[0][6] == adv ||
 800cc5e:	4b71      	ldr	r3, [pc, #452]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc60:	799b      	ldrb	r3, [r3, #6]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	7bfa      	ldrb	r2, [r7, #15]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d00c      	beq.n	800cc84 <jogadas_possiveis+0xc8>
    					tabuleiro[1][6] == adv ||
 800cc6a:	4b6e      	ldr	r3, [pc, #440]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc6c:	7b9b      	ldrb	r3, [r3, #14]
 800cc6e:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][6] == adv ||
 800cc70:	7bfa      	ldrb	r2, [r7, #15]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d006      	beq.n	800cc84 <jogadas_possiveis+0xc8>
						tabuleiro[1][7] == adv)
 800cc76:	4b6b      	ldr	r3, [pc, #428]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc78:	7bdb      	ldrb	r3, [r3, #15]
 800cc7a:	b2db      	uxtb	r3, r3
    					tabuleiro[1][6] == adv ||
 800cc7c:	7bfa      	ldrb	r2, [r7, #15]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	f040 824e 	bne.w	800d120 <jogadas_possiveis+0x564>
    					&& tabuleiro[0][7]==SEM_PECA && validar_com_self(i, j)){
 800cc84:	4b67      	ldr	r3, [pc, #412]	; (800ce24 <jogadas_possiveis+0x268>)
 800cc86:	79db      	ldrb	r3, [r3, #7]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b4e      	cmp	r3, #78	; 0x4e
 800cc8c:	f040 8248 	bne.w	800d120 <jogadas_possiveis+0x564>
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	68b8      	ldr	r0, [r7, #8]
 800cc94:	f7ff fdfc 	bl	800c890 <validar_com_self>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f000 8240 	beq.w	800d120 <jogadas_possiveis+0x564>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800cca0:	4a60      	ldr	r2, [pc, #384]	; (800ce24 <jogadas_possiveis+0x268>)
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	441a      	add	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4413      	add	r3, r2
 800ccac:	2250      	movs	r2, #80	; 0x50
 800ccae:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][6] == adv ||
 800ccb0:	e236      	b.n	800d120 <jogadas_possiveis+0x564>
    				}
    			}
    			else if(i==7 && j==0){ //canto inferior esquerdo
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b07      	cmp	r3, #7
 800ccb6:	d130      	bne.n	800cd1a <jogadas_possiveis+0x15e>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d12d      	bne.n	800cd1a <jogadas_possiveis+0x15e>
    				if((tabuleiro[6][0] == adv ||
 800ccbe:	4b59      	ldr	r3, [pc, #356]	; (800ce24 <jogadas_possiveis+0x268>)
 800ccc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	7bfa      	ldrb	r2, [r7, #15]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d00e      	beq.n	800ccea <jogadas_possiveis+0x12e>
    					tabuleiro[6][1] == adv ||
 800cccc:	4b55      	ldr	r3, [pc, #340]	; (800ce24 <jogadas_possiveis+0x268>)
 800ccce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccd2:	b2db      	uxtb	r3, r3
    				if((tabuleiro[6][0] == adv ||
 800ccd4:	7bfa      	ldrb	r2, [r7, #15]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d007      	beq.n	800ccea <jogadas_possiveis+0x12e>
						tabuleiro[7][1] == adv)
 800ccda:	4b52      	ldr	r3, [pc, #328]	; (800ce24 <jogadas_possiveis+0x268>)
 800ccdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cce0:	b2db      	uxtb	r3, r3
    					tabuleiro[6][1] == adv ||
 800cce2:	7bfa      	ldrb	r2, [r7, #15]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	f040 821d 	bne.w	800d124 <jogadas_possiveis+0x568>
    					&& tabuleiro[7][0]==SEM_PECA && validar_com_self(i, j)){
 800ccea:	4b4e      	ldr	r3, [pc, #312]	; (800ce24 <jogadas_possiveis+0x268>)
 800ccec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b4e      	cmp	r3, #78	; 0x4e
 800ccf4:	f040 8216 	bne.w	800d124 <jogadas_possiveis+0x568>
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	68b8      	ldr	r0, [r7, #8]
 800ccfc:	f7ff fdc8 	bl	800c890 <validar_com_self>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f000 820e 	beq.w	800d124 <jogadas_possiveis+0x568>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800cd08:	4a46      	ldr	r2, [pc, #280]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	441a      	add	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4413      	add	r3, r2
 800cd14:	2250      	movs	r2, #80	; 0x50
 800cd16:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[6][0] == adv ||
 800cd18:	e204      	b.n	800d124 <jogadas_possiveis+0x568>
    				}
    			}
    			else if(i==7 && j==7){ //canto inferior direito
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b07      	cmp	r3, #7
 800cd1e:	d130      	bne.n	800cd82 <jogadas_possiveis+0x1c6>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b07      	cmp	r3, #7
 800cd24:	d12d      	bne.n	800cd82 <jogadas_possiveis+0x1c6>
    				if((tabuleiro[6][7] == adv ||
 800cd26:	4b3f      	ldr	r3, [pc, #252]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd28:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	7bfa      	ldrb	r2, [r7, #15]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d00e      	beq.n	800cd52 <jogadas_possiveis+0x196>
    					tabuleiro[6][6] == adv ||
 800cd34:	4b3b      	ldr	r3, [pc, #236]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cd3a:	b2db      	uxtb	r3, r3
    				if((tabuleiro[6][7] == adv ||
 800cd3c:	7bfa      	ldrb	r2, [r7, #15]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d007      	beq.n	800cd52 <jogadas_possiveis+0x196>
						tabuleiro[7][6] == adv)
 800cd42:	4b38      	ldr	r3, [pc, #224]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd48:	b2db      	uxtb	r3, r3
    					tabuleiro[6][6] == adv ||
 800cd4a:	7bfa      	ldrb	r2, [r7, #15]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	f040 81eb 	bne.w	800d128 <jogadas_possiveis+0x56c>
    					&& tabuleiro[7][7]==SEM_PECA && validar_com_self(i, j)){
 800cd52:	4b34      	ldr	r3, [pc, #208]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b4e      	cmp	r3, #78	; 0x4e
 800cd5c:	f040 81e4 	bne.w	800d128 <jogadas_possiveis+0x56c>
 800cd60:	6879      	ldr	r1, [r7, #4]
 800cd62:	68b8      	ldr	r0, [r7, #8]
 800cd64:	f7ff fd94 	bl	800c890 <validar_com_self>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f000 81dc 	beq.w	800d128 <jogadas_possiveis+0x56c>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800cd70:	4a2c      	ldr	r2, [pc, #176]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	441a      	add	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	2250      	movs	r2, #80	; 0x50
 800cd7e:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[6][7] == adv ||
 800cd80:	e1d2      	b.n	800d128 <jogadas_possiveis+0x56c>
    				}
    			}
    			else if(i==0 && j!=0 && j!=7){ //linha de cima
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d14f      	bne.n	800ce28 <jogadas_possiveis+0x26c>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d04c      	beq.n	800ce28 <jogadas_possiveis+0x26c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b07      	cmp	r3, #7
 800cd92:	d049      	beq.n	800ce28 <jogadas_possiveis+0x26c>
    				if((tabuleiro[0][j-1] == adv ||
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	4a22      	ldr	r2, [pc, #136]	; (800ce24 <jogadas_possiveis+0x268>)
 800cd9a:	5cd3      	ldrb	r3, [r2, r3]
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	7bfa      	ldrb	r2, [r7, #15]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d023      	beq.n	800cdec <jogadas_possiveis+0x230>
    					tabuleiro[0][j+1] == adv ||
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3301      	adds	r3, #1
 800cda8:	4a1e      	ldr	r2, [pc, #120]	; (800ce24 <jogadas_possiveis+0x268>)
 800cdaa:	5cd3      	ldrb	r3, [r2, r3]
 800cdac:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][j-1] == adv ||
 800cdae:	7bfa      	ldrb	r2, [r7, #15]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d01b      	beq.n	800cdec <jogadas_possiveis+0x230>
						tabuleiro[1][j] == adv ||
 800cdb4:	4a1b      	ldr	r2, [pc, #108]	; (800ce24 <jogadas_possiveis+0x268>)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4413      	add	r3, r2
 800cdba:	3308      	adds	r3, #8
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	b2db      	uxtb	r3, r3
    					tabuleiro[0][j+1] == adv ||
 800cdc0:	7bfa      	ldrb	r2, [r7, #15]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d012      	beq.n	800cdec <jogadas_possiveis+0x230>
						tabuleiro[1][j+1] == adv ||
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	4a16      	ldr	r2, [pc, #88]	; (800ce24 <jogadas_possiveis+0x268>)
 800cdcc:	4413      	add	r3, r2
 800cdce:	7a1b      	ldrb	r3, [r3, #8]
 800cdd0:	b2db      	uxtb	r3, r3
						tabuleiro[1][j] == adv ||
 800cdd2:	7bfa      	ldrb	r2, [r7, #15]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d009      	beq.n	800cdec <jogadas_possiveis+0x230>
						tabuleiro[1][j-1] == adv)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	4a11      	ldr	r2, [pc, #68]	; (800ce24 <jogadas_possiveis+0x268>)
 800cdde:	4413      	add	r3, r2
 800cde0:	7a1b      	ldrb	r3, [r3, #8]
 800cde2:	b2db      	uxtb	r3, r3
						tabuleiro[1][j+1] == adv ||
 800cde4:	7bfa      	ldrb	r2, [r7, #15]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	f040 81a0 	bne.w	800d12c <jogadas_possiveis+0x570>
    					&& tabuleiro[0][j]==SEM_PECA && validar_com_self(i, j)){
 800cdec:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <jogadas_possiveis+0x268>)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b4e      	cmp	r3, #78	; 0x4e
 800cdf8:	f040 8198 	bne.w	800d12c <jogadas_possiveis+0x570>
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	68b8      	ldr	r0, [r7, #8]
 800ce00:	f7ff fd46 	bl	800c890 <validar_com_self>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 8190 	beq.w	800d12c <jogadas_possiveis+0x570>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800ce0c:	4a05      	ldr	r2, [pc, #20]	; (800ce24 <jogadas_possiveis+0x268>)
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	441a      	add	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4413      	add	r3, r2
 800ce18:	2250      	movs	r2, #80	; 0x50
 800ce1a:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][j-1] == adv ||
 800ce1c:	e186      	b.n	800d12c <jogadas_possiveis+0x570>
 800ce1e:	bf00      	nop
 800ce20:	20000074 	.word	0x20000074
 800ce24:	20000abc 	.word	0x20000abc
    				}
    			}
    			else if(j==0 && i!=0 && i!=7){ //linha esquerda
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d14c      	bne.n	800cec8 <jogadas_possiveis+0x30c>
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d049      	beq.n	800cec8 <jogadas_possiveis+0x30c>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b07      	cmp	r3, #7
 800ce38:	d046      	beq.n	800cec8 <jogadas_possiveis+0x30c>
    				if((tabuleiro[i-1][0] == adv ||
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	4a77      	ldr	r2, [pc, #476]	; (800d01c <jogadas_possiveis+0x460>)
 800ce40:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	7bfa      	ldrb	r2, [r7, #15]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d024      	beq.n	800ce96 <jogadas_possiveis+0x2da>
    					tabuleiro[i+1][0] == adv ||
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	4a72      	ldr	r2, [pc, #456]	; (800d01c <jogadas_possiveis+0x460>)
 800ce52:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ce56:	b2db      	uxtb	r3, r3
    				if((tabuleiro[i-1][0] == adv ||
 800ce58:	7bfa      	ldrb	r2, [r7, #15]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d01b      	beq.n	800ce96 <jogadas_possiveis+0x2da>
						tabuleiro[1][i-1] == adv ||
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	4a6e      	ldr	r2, [pc, #440]	; (800d01c <jogadas_possiveis+0x460>)
 800ce64:	4413      	add	r3, r2
 800ce66:	7a1b      	ldrb	r3, [r3, #8]
 800ce68:	b2db      	uxtb	r3, r3
    					tabuleiro[i+1][0] == adv ||
 800ce6a:	7bfa      	ldrb	r2, [r7, #15]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d012      	beq.n	800ce96 <jogadas_possiveis+0x2da>
						tabuleiro[1][i+1] == adv ||
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3301      	adds	r3, #1
 800ce74:	4a69      	ldr	r2, [pc, #420]	; (800d01c <jogadas_possiveis+0x460>)
 800ce76:	4413      	add	r3, r2
 800ce78:	7a1b      	ldrb	r3, [r3, #8]
 800ce7a:	b2db      	uxtb	r3, r3
						tabuleiro[1][i-1] == adv ||
 800ce7c:	7bfa      	ldrb	r2, [r7, #15]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d009      	beq.n	800ce96 <jogadas_possiveis+0x2da>
						tabuleiro[1][i] == adv)
 800ce82:	4a66      	ldr	r2, [pc, #408]	; (800d01c <jogadas_possiveis+0x460>)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	4413      	add	r3, r2
 800ce88:	3308      	adds	r3, #8
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	b2db      	uxtb	r3, r3
						tabuleiro[1][i+1] == adv ||
 800ce8e:	7bfa      	ldrb	r2, [r7, #15]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	f040 814d 	bne.w	800d130 <jogadas_possiveis+0x574>
    					&& tabuleiro[i][0]==SEM_PECA && validar_com_self(i, j)){
 800ce96:	4a61      	ldr	r2, [pc, #388]	; (800d01c <jogadas_possiveis+0x460>)
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b4e      	cmp	r3, #78	; 0x4e
 800cea2:	f040 8145 	bne.w	800d130 <jogadas_possiveis+0x574>
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	68b8      	ldr	r0, [r7, #8]
 800ceaa:	f7ff fcf1 	bl	800c890 <validar_com_self>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 813d 	beq.w	800d130 <jogadas_possiveis+0x574>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800ceb6:	4a59      	ldr	r2, [pc, #356]	; (800d01c <jogadas_possiveis+0x460>)
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	441a      	add	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	2250      	movs	r2, #80	; 0x50
 800cec4:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[i-1][0] == adv ||
 800cec6:	e133      	b.n	800d130 <jogadas_possiveis+0x574>
    				}
    			}
    			else if(i==7 && j!=0 && j!=7){ //linha de baixo
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b07      	cmp	r3, #7
 800cecc:	d151      	bne.n	800cf72 <jogadas_possiveis+0x3b6>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d04e      	beq.n	800cf72 <jogadas_possiveis+0x3b6>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b07      	cmp	r3, #7
 800ced8:	d04b      	beq.n	800cf72 <jogadas_possiveis+0x3b6>
    				if((tabuleiro[7][j-1] == adv ||
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3b01      	subs	r3, #1
 800cede:	4a4f      	ldr	r2, [pc, #316]	; (800d01c <jogadas_possiveis+0x460>)
 800cee0:	4413      	add	r3, r2
 800cee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	7bfa      	ldrb	r2, [r7, #15]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d027      	beq.n	800cf3e <jogadas_possiveis+0x382>
    					tabuleiro[7][j+1] == adv ||
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	3301      	adds	r3, #1
 800cef2:	4a4a      	ldr	r2, [pc, #296]	; (800d01c <jogadas_possiveis+0x460>)
 800cef4:	4413      	add	r3, r2
 800cef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cefa:	b2db      	uxtb	r3, r3
    				if((tabuleiro[7][j-1] == adv ||
 800cefc:	7bfa      	ldrb	r2, [r7, #15]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d01d      	beq.n	800cf3e <jogadas_possiveis+0x382>
						tabuleiro[6][j] == adv ||
 800cf02:	4a46      	ldr	r2, [pc, #280]	; (800d01c <jogadas_possiveis+0x460>)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4413      	add	r3, r2
 800cf08:	3330      	adds	r3, #48	; 0x30
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	b2db      	uxtb	r3, r3
    					tabuleiro[7][j+1] == adv ||
 800cf0e:	7bfa      	ldrb	r2, [r7, #15]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d014      	beq.n	800cf3e <jogadas_possiveis+0x382>
						tabuleiro[6][j-1] == adv ||
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	4a40      	ldr	r2, [pc, #256]	; (800d01c <jogadas_possiveis+0x460>)
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf20:	b2db      	uxtb	r3, r3
						tabuleiro[6][j] == adv ||
 800cf22:	7bfa      	ldrb	r2, [r7, #15]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d00a      	beq.n	800cf3e <jogadas_possiveis+0x382>
						tabuleiro[6][j+1] == adv)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	4a3b      	ldr	r2, [pc, #236]	; (800d01c <jogadas_possiveis+0x460>)
 800cf2e:	4413      	add	r3, r2
 800cf30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf34:	b2db      	uxtb	r3, r3
						tabuleiro[6][j-1] == adv ||
 800cf36:	7bfa      	ldrb	r2, [r7, #15]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	f040 80fb 	bne.w	800d134 <jogadas_possiveis+0x578>
    					&& tabuleiro[7][j]==SEM_PECA && validar_com_self(i, j)){
 800cf3e:	4a37      	ldr	r2, [pc, #220]	; (800d01c <jogadas_possiveis+0x460>)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4413      	add	r3, r2
 800cf44:	3338      	adds	r3, #56	; 0x38
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b4e      	cmp	r3, #78	; 0x4e
 800cf4c:	f040 80f2 	bne.w	800d134 <jogadas_possiveis+0x578>
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	68b8      	ldr	r0, [r7, #8]
 800cf54:	f7ff fc9c 	bl	800c890 <validar_com_self>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 80ea 	beq.w	800d134 <jogadas_possiveis+0x578>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800cf60:	4a2e      	ldr	r2, [pc, #184]	; (800d01c <jogadas_possiveis+0x460>)
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	441a      	add	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	2250      	movs	r2, #80	; 0x50
 800cf6e:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[7][j-1] == adv ||
 800cf70:	e0e0      	b.n	800d134 <jogadas_possiveis+0x578>
    				}
    			}
    			else if(j==7 && i!=0 && i!=7){ //linha direita
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b07      	cmp	r3, #7
 800cf76:	d153      	bne.n	800d020 <jogadas_possiveis+0x464>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d050      	beq.n	800d020 <jogadas_possiveis+0x464>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d04d      	beq.n	800d020 <jogadas_possiveis+0x464>
    				if((tabuleiro[i-1][7] == adv ||
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	4a24      	ldr	r2, [pc, #144]	; (800d01c <jogadas_possiveis+0x460>)
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	4413      	add	r3, r2
 800cf8e:	79db      	ldrb	r3, [r3, #7]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	7bfa      	ldrb	r2, [r7, #15]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d027      	beq.n	800cfe8 <jogadas_possiveis+0x42c>
    					tabuleiro[i+1][7] == adv ||
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	4a1f      	ldr	r2, [pc, #124]	; (800d01c <jogadas_possiveis+0x460>)
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	79db      	ldrb	r3, [r3, #7]
 800cfa4:	b2db      	uxtb	r3, r3
    				if((tabuleiro[i-1][7] == adv ||
 800cfa6:	7bfa      	ldrb	r2, [r7, #15]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d01d      	beq.n	800cfe8 <jogadas_possiveis+0x42c>
						tabuleiro[i][6] == adv ||
 800cfac:	4a1b      	ldr	r2, [pc, #108]	; (800d01c <jogadas_possiveis+0x460>)
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	799b      	ldrb	r3, [r3, #6]
 800cfb6:	b2db      	uxtb	r3, r3
    					tabuleiro[i+1][7] == adv ||
 800cfb8:	7bfa      	ldrb	r2, [r7, #15]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d014      	beq.n	800cfe8 <jogadas_possiveis+0x42c>
						tabuleiro[i-1][6] == adv||
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	4a16      	ldr	r2, [pc, #88]	; (800d01c <jogadas_possiveis+0x460>)
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	4413      	add	r3, r2
 800cfc8:	799b      	ldrb	r3, [r3, #6]
 800cfca:	b2db      	uxtb	r3, r3
						tabuleiro[i][6] == adv ||
 800cfcc:	7bfa      	ldrb	r2, [r7, #15]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d00a      	beq.n	800cfe8 <jogadas_possiveis+0x42c>
						tabuleiro[i+1][6] == adv)
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	4a11      	ldr	r2, [pc, #68]	; (800d01c <jogadas_possiveis+0x460>)
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	4413      	add	r3, r2
 800cfdc:	799b      	ldrb	r3, [r3, #6]
 800cfde:	b2db      	uxtb	r3, r3
						tabuleiro[i-1][6] == adv||
 800cfe0:	7bfa      	ldrb	r2, [r7, #15]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	f040 80a8 	bne.w	800d138 <jogadas_possiveis+0x57c>
    					&& tabuleiro[i][7]==SEM_PECA && validar_com_self(i, j)){
 800cfe8:	4a0c      	ldr	r2, [pc, #48]	; (800d01c <jogadas_possiveis+0x460>)
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	4413      	add	r3, r2
 800cff0:	79db      	ldrb	r3, [r3, #7]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b4e      	cmp	r3, #78	; 0x4e
 800cff6:	f040 809f 	bne.w	800d138 <jogadas_possiveis+0x57c>
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	68b8      	ldr	r0, [r7, #8]
 800cffe:	f7ff fc47 	bl	800c890 <validar_com_self>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 8097 	beq.w	800d138 <jogadas_possiveis+0x57c>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800d00a:	4a04      	ldr	r2, [pc, #16]	; (800d01c <jogadas_possiveis+0x460>)
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	441a      	add	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4413      	add	r3, r2
 800d016:	2250      	movs	r2, #80	; 0x50
 800d018:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[i-1][7] == adv ||
 800d01a:	e08d      	b.n	800d138 <jogadas_possiveis+0x57c>
 800d01c:	20000abc 	.word	0x20000abc
    				}
    			}
    			//regra geral:
    			else if((tabuleiro[i-1][j-1] == adv ||
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	1e5a      	subs	r2, r3, #1
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	3b01      	subs	r3, #1
 800d028:	494f      	ldr	r1, [pc, #316]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d02a:	00d2      	lsls	r2, r2, #3
 800d02c:	440a      	add	r2, r1
 800d02e:	4413      	add	r3, r2
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	7bfa      	ldrb	r2, [r7, #15]
 800d036:	429a      	cmp	r2, r3
 800d038:	d056      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
    					tabuleiro[i-1][j] == adv ||
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	4a4a      	ldr	r2, [pc, #296]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	441a      	add	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4413      	add	r3, r2
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	b2db      	uxtb	r3, r3
    			else if((tabuleiro[i-1][j-1] == adv ||
 800d04c:	7bfa      	ldrb	r2, [r7, #15]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d04a      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i-1][j+1] == adv ||
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	1e5a      	subs	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	3301      	adds	r3, #1
 800d05a:	4943      	ldr	r1, [pc, #268]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d05c:	00d2      	lsls	r2, r2, #3
 800d05e:	440a      	add	r2, r1
 800d060:	4413      	add	r3, r2
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	b2db      	uxtb	r3, r3
    					tabuleiro[i-1][j] == adv ||
 800d066:	7bfa      	ldrb	r2, [r7, #15]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d03d      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j-1] == adv ||
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	1c5a      	adds	r2, r3, #1
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3b01      	subs	r3, #1
 800d074:	493c      	ldr	r1, [pc, #240]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d076:	00d2      	lsls	r2, r2, #3
 800d078:	440a      	add	r2, r1
 800d07a:	4413      	add	r3, r2
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	b2db      	uxtb	r3, r3
						tabuleiro[i-1][j+1] == adv ||
 800d080:	7bfa      	ldrb	r2, [r7, #15]
 800d082:	429a      	cmp	r2, r3
 800d084:	d030      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j] == adv ||
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	3301      	adds	r3, #1
 800d08a:	4a37      	ldr	r2, [pc, #220]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d08c:	00db      	lsls	r3, r3, #3
 800d08e:	441a      	add	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j-1] == adv ||
 800d098:	7bfa      	ldrb	r2, [r7, #15]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d024      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j+1] == adv ||
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	4930      	ldr	r1, [pc, #192]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d0a8:	00d2      	lsls	r2, r2, #3
 800d0aa:	440a      	add	r2, r1
 800d0ac:	4413      	add	r3, r2
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j] == adv ||
 800d0b2:	7bfa      	ldrb	r2, [r7, #15]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d017      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i][j-1] == adv ||
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	492a      	ldr	r1, [pc, #168]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	00d2      	lsls	r2, r2, #3
 800d0c2:	440a      	add	r2, r1
 800d0c4:	4413      	add	r3, r2
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j+1] == adv ||
 800d0ca:	7bfa      	ldrb	r2, [r7, #15]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d00b      	beq.n	800d0e8 <jogadas_possiveis+0x52c>
						tabuleiro[i][j+1] == adv)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4924      	ldr	r1, [pc, #144]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	00d2      	lsls	r2, r2, #3
 800d0da:	440a      	add	r2, r1
 800d0dc:	4413      	add	r3, r2
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	b2db      	uxtb	r3, r3
						tabuleiro[i][j-1] == adv ||
 800d0e2:	7bfa      	ldrb	r2, [r7, #15]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d128      	bne.n	800d13a <jogadas_possiveis+0x57e>
    					&& tabuleiro[i][j]==SEM_PECA && validar_com_self(i, j)){
 800d0e8:	4a1f      	ldr	r2, [pc, #124]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	441a      	add	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b4e      	cmp	r3, #78	; 0x4e
 800d0fa:	d11e      	bne.n	800d13a <jogadas_possiveis+0x57e>
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	68b8      	ldr	r0, [r7, #8]
 800d100:	f7ff fbc6 	bl	800c890 <validar_com_self>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d017      	beq.n	800d13a <jogadas_possiveis+0x57e>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 800d10a:	4a17      	ldr	r2, [pc, #92]	; (800d168 <jogadas_possiveis+0x5ac>)
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	441a      	add	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4413      	add	r3, r2
 800d116:	2250      	movs	r2, #80	; 0x50
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	e00e      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][1] == adv ||
 800d11c:	bf00      	nop
 800d11e:	e00c      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][6] == adv ||
 800d120:	bf00      	nop
 800d122:	e00a      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[6][0] == adv ||
 800d124:	bf00      	nop
 800d126:	e008      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[6][7] == adv ||
 800d128:	bf00      	nop
 800d12a:	e006      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][j-1] == adv ||
 800d12c:	bf00      	nop
 800d12e:	e004      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[i-1][0] == adv ||
 800d130:	bf00      	nop
 800d132:	e002      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[7][j-1] == adv ||
 800d134:	bf00      	nop
 800d136:	e000      	b.n	800d13a <jogadas_possiveis+0x57e>
    				if((tabuleiro[i-1][7] == adv ||
 800d138:	bf00      	nop
    		for(j = 0; j < 8; j++){
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3301      	adds	r3, #1
 800d13e:	607b      	str	r3, [r7, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b07      	cmp	r3, #7
 800d144:	f77f ad55 	ble.w	800cbf2 <jogadas_possiveis+0x36>
    	for(i = 0; i < 8; i++){
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	3301      	adds	r3, #1
 800d14c:	60bb      	str	r3, [r7, #8]
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b07      	cmp	r3, #7
 800d152:	f77f ad4b 	ble.w	800cbec <jogadas_possiveis+0x30>
    				}
    			}

    }
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d156:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d15a:	f7f4 fa57 	bl	800160c <BSP_LCD_SetTextColor>
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20000abc 	.word	0x20000abc

0800d16c <vira_pecas>:





void vira_pecas(int linsel, int colsel){
 800d16c:	b480      	push	{r7}
 800d16e:	b089      	sub	sp, #36	; 0x24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	char self;
	char adv;
	int j = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	61bb      	str	r3, [r7, #24]
	int i = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	617b      	str	r3, [r7, #20]
	int ok = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	613b      	str	r3, [r7, #16]

    if (ver_quem_joga%2 == 1){
 800d182:	4ba3      	ldr	r3, [pc, #652]	; (800d410 <vira_pecas+0x2a4>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	bfb8      	it	lt
 800d18e:	425b      	neglt	r3, r3
 800d190:	2b01      	cmp	r3, #1
 800d192:	d104      	bne.n	800d19e <vira_pecas+0x32>
    	self = PECA_JOGADOR_1;
 800d194:	2358      	movs	r3, #88	; 0x58
 800d196:	77fb      	strb	r3, [r7, #31]
        adv = PECA_JOGADOR_2;
 800d198:	2359      	movs	r3, #89	; 0x59
 800d19a:	77bb      	strb	r3, [r7, #30]
 800d19c:	e003      	b.n	800d1a6 <vira_pecas+0x3a>
    }
    else{
    	self = PECA_JOGADOR_2;
 800d19e:	2359      	movs	r3, #89	; 0x59
 800d1a0:	77fb      	strb	r3, [r7, #31]
    	adv = PECA_JOGADOR_1;
 800d1a2:	2358      	movs	r3, #88	; 0x58
 800d1a4:	77bb      	strb	r3, [r7, #30]



    //ver relaçoes com as peças vizinhas
    //ESQUERDA
    if(tabuleiro[linsel][colsel-1] == adv){
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	499a      	ldr	r1, [pc, #616]	; (800d414 <vira_pecas+0x2a8>)
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	00d2      	lsls	r2, r2, #3
 800d1b0:	440a      	add	r2, r1
 800d1b2:	4413      	add	r3, r2
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	7fba      	ldrb	r2, [r7, #30]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d119      	bne.n	800d1f2 <vira_pecas+0x86>
        for(j = colsel-2; j >= 0 ;  j-- ){
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	3b02      	subs	r3, #2
 800d1c2:	61bb      	str	r3, [r7, #24]
 800d1c4:	e012      	b.n	800d1ec <vira_pecas+0x80>
            if(tabuleiro[linsel][j] == self){
 800d1c6:	4a93      	ldr	r2, [pc, #588]	; (800d414 <vira_pecas+0x2a8>)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	441a      	add	r2, r3
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	7ffa      	ldrb	r2, [r7, #31]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d102      	bne.n	800d1e2 <vira_pecas+0x76>
                ok = 1;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	613b      	str	r3, [r7, #16]
                break;
 800d1e0:	e007      	b.n	800d1f2 <vira_pecas+0x86>
            }
            else{
                ok = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]
        for(j = colsel-2; j >= 0 ;  j-- ){
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	61bb      	str	r3, [r7, #24]
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	dae9      	bge.n	800d1c6 <vira_pecas+0x5a>
            }
        }
    }

    if(ok){
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01c      	beq.n	800d232 <vira_pecas+0xc6>
        for(j = colsel-1; j >= 0 && tabuleiro[linsel][j] == adv; j--){
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	61bb      	str	r3, [r7, #24]
 800d1fe:	e00a      	b.n	800d216 <vira_pecas+0xaa>
        	tabuleiro[linsel][j] = self;
 800d200:	4a84      	ldr	r2, [pc, #528]	; (800d414 <vira_pecas+0x2a8>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	441a      	add	r2, r3
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	4413      	add	r3, r2
 800d20c:	7ffa      	ldrb	r2, [r7, #31]
 800d20e:	701a      	strb	r2, [r3, #0]
        for(j = colsel-1; j >= 0 && tabuleiro[linsel][j] == adv; j--){
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	3b01      	subs	r3, #1
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	db0a      	blt.n	800d232 <vira_pecas+0xc6>
 800d21c:	4a7d      	ldr	r2, [pc, #500]	; (800d414 <vira_pecas+0x2a8>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	00db      	lsls	r3, r3, #3
 800d222:	441a      	add	r2, r3
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	4413      	add	r3, r2
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	7fba      	ldrb	r2, [r7, #30]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d0e6      	beq.n	800d200 <vira_pecas+0x94>
        }
    }

    ok = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	613b      	str	r3, [r7, #16]


    //DIREITA
    if(tabuleiro[linsel][colsel+1] == adv){
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	4976      	ldr	r1, [pc, #472]	; (800d414 <vira_pecas+0x2a8>)
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	00d2      	lsls	r2, r2, #3
 800d240:	440a      	add	r2, r1
 800d242:	4413      	add	r3, r2
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	7fba      	ldrb	r2, [r7, #30]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d119      	bne.n	800d282 <vira_pecas+0x116>
        for(j = colsel + 2; j < 8 ;  j++ ){
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	3302      	adds	r3, #2
 800d252:	61bb      	str	r3, [r7, #24]
 800d254:	e012      	b.n	800d27c <vira_pecas+0x110>
            if(tabuleiro[linsel][j] == self){
 800d256:	4a6f      	ldr	r2, [pc, #444]	; (800d414 <vira_pecas+0x2a8>)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	441a      	add	r2, r3
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	4413      	add	r3, r2
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	b2db      	uxtb	r3, r3
 800d266:	7ffa      	ldrb	r2, [r7, #31]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d102      	bne.n	800d272 <vira_pecas+0x106>
                ok = 1;
 800d26c:	2301      	movs	r3, #1
 800d26e:	613b      	str	r3, [r7, #16]
                break;
 800d270:	e007      	b.n	800d282 <vira_pecas+0x116>
            }
            else{
                ok = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	613b      	str	r3, [r7, #16]
        for(j = colsel + 2; j < 8 ;  j++ ){
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	3301      	adds	r3, #1
 800d27a:	61bb      	str	r3, [r7, #24]
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	2b07      	cmp	r3, #7
 800d280:	dde9      	ble.n	800d256 <vira_pecas+0xea>
            }
        }
    }

    if(ok){
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d01c      	beq.n	800d2c2 <vira_pecas+0x156>
        for(j = colsel + 1; j < 8 && tabuleiro[linsel][j] == adv; j++){
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	3301      	adds	r3, #1
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e00a      	b.n	800d2a6 <vira_pecas+0x13a>
        	tabuleiro[linsel][j] = self;
 800d290:	4a60      	ldr	r2, [pc, #384]	; (800d414 <vira_pecas+0x2a8>)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	00db      	lsls	r3, r3, #3
 800d296:	441a      	add	r2, r3
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	4413      	add	r3, r2
 800d29c:	7ffa      	ldrb	r2, [r7, #31]
 800d29e:	701a      	strb	r2, [r3, #0]
        for(j = colsel + 1; j < 8 && tabuleiro[linsel][j] == adv; j++){
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b07      	cmp	r3, #7
 800d2aa:	dc0a      	bgt.n	800d2c2 <vira_pecas+0x156>
 800d2ac:	4a59      	ldr	r2, [pc, #356]	; (800d414 <vira_pecas+0x2a8>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	441a      	add	r2, r3
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	7fba      	ldrb	r2, [r7, #30]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d0e6      	beq.n	800d290 <vira_pecas+0x124>
        }
    }

    ok = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	613b      	str	r3, [r7, #16]


    //CIMA
    if(tabuleiro[linsel+1][colsel] == adv){
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	4a52      	ldr	r2, [pc, #328]	; (800d414 <vira_pecas+0x2a8>)
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	441a      	add	r2, r3
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	7fba      	ldrb	r2, [r7, #30]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d119      	bne.n	800d312 <vira_pecas+0x1a6>
        for(i = linsel + 2; i < 8 ;  i++ ){
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3302      	adds	r3, #2
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e012      	b.n	800d30c <vira_pecas+0x1a0>
            if(tabuleiro[i][colsel] == self){
 800d2e6:	4a4b      	ldr	r2, [pc, #300]	; (800d414 <vira_pecas+0x2a8>)
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	441a      	add	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	7ffa      	ldrb	r2, [r7, #31]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d102      	bne.n	800d302 <vira_pecas+0x196>
                ok = 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	613b      	str	r3, [r7, #16]
                break;
 800d300:	e007      	b.n	800d312 <vira_pecas+0x1a6>
            }
            else{
                ok = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	613b      	str	r3, [r7, #16]
        for(i = linsel + 2; i < 8 ;  i++ ){
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	3301      	adds	r3, #1
 800d30a:	617b      	str	r3, [r7, #20]
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2b07      	cmp	r3, #7
 800d310:	dde9      	ble.n	800d2e6 <vira_pecas+0x17a>
            }
        }
    }


    if(ok){
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01c      	beq.n	800d352 <vira_pecas+0x1e6>
        for(i = linsel + 1; i < 8 && tabuleiro[i][colsel] == adv; i++){
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3301      	adds	r3, #1
 800d31c:	617b      	str	r3, [r7, #20]
 800d31e:	e00a      	b.n	800d336 <vira_pecas+0x1ca>
        	tabuleiro[i][colsel] = self;
 800d320:	4a3c      	ldr	r2, [pc, #240]	; (800d414 <vira_pecas+0x2a8>)
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	441a      	add	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	4413      	add	r3, r2
 800d32c:	7ffa      	ldrb	r2, [r7, #31]
 800d32e:	701a      	strb	r2, [r3, #0]
        for(i = linsel + 1; i < 8 && tabuleiro[i][colsel] == adv; i++){
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	3301      	adds	r3, #1
 800d334:	617b      	str	r3, [r7, #20]
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2b07      	cmp	r3, #7
 800d33a:	dc0a      	bgt.n	800d352 <vira_pecas+0x1e6>
 800d33c:	4a35      	ldr	r2, [pc, #212]	; (800d414 <vira_pecas+0x2a8>)
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	441a      	add	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	4413      	add	r3, r2
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	7fba      	ldrb	r2, [r7, #30]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d0e6      	beq.n	800d320 <vira_pecas+0x1b4>
        }
    }

    ok = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]


    //BAIXO
    if(tabuleiro[linsel-1][colsel] == adv){
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3b01      	subs	r3, #1
 800d35a:	4a2e      	ldr	r2, [pc, #184]	; (800d414 <vira_pecas+0x2a8>)
 800d35c:	00db      	lsls	r3, r3, #3
 800d35e:	441a      	add	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	4413      	add	r3, r2
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	7fba      	ldrb	r2, [r7, #30]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d119      	bne.n	800d3a2 <vira_pecas+0x236>
        for(i = linsel-2; i >= 0 ;  i-- ){
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3b02      	subs	r3, #2
 800d372:	617b      	str	r3, [r7, #20]
 800d374:	e012      	b.n	800d39c <vira_pecas+0x230>
            if(tabuleiro[i][colsel] == self){
 800d376:	4a27      	ldr	r2, [pc, #156]	; (800d414 <vira_pecas+0x2a8>)
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	441a      	add	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	4413      	add	r3, r2
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b2db      	uxtb	r3, r3
 800d386:	7ffa      	ldrb	r2, [r7, #31]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d102      	bne.n	800d392 <vira_pecas+0x226>
                ok = 1;
 800d38c:	2301      	movs	r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
                break;
 800d390:	e007      	b.n	800d3a2 <vira_pecas+0x236>
            }
            else{
                ok = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	613b      	str	r3, [r7, #16]
        for(i = linsel-2; i >= 0 ;  i-- ){
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	3b01      	subs	r3, #1
 800d39a:	617b      	str	r3, [r7, #20]
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	dae9      	bge.n	800d376 <vira_pecas+0x20a>
            }
        }
    }

    if(ok){
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01c      	beq.n	800d3e2 <vira_pecas+0x276>
        for(i = linsel-1; i >= 0 && tabuleiro[i][colsel] == adv; i--){
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	e00a      	b.n	800d3c6 <vira_pecas+0x25a>
        	tabuleiro[i][colsel] = self;
 800d3b0:	4a18      	ldr	r2, [pc, #96]	; (800d414 <vira_pecas+0x2a8>)
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	441a      	add	r2, r3
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	7ffa      	ldrb	r2, [r7, #31]
 800d3be:	701a      	strb	r2, [r3, #0]
        for(i = linsel-1; i >= 0 && tabuleiro[i][colsel] == adv; i--){
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	db0a      	blt.n	800d3e2 <vira_pecas+0x276>
 800d3cc:	4a11      	ldr	r2, [pc, #68]	; (800d414 <vira_pecas+0x2a8>)
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	441a      	add	r2, r3
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	7fba      	ldrb	r2, [r7, #30]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d0e6      	beq.n	800d3b0 <vira_pecas+0x244>
        }
    }

    ok = 0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	613b      	str	r3, [r7, #16]


   //DIAGONAL SUPERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel+1] == adv){
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	1e5a      	subs	r2, r3, #1
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	4909      	ldr	r1, [pc, #36]	; (800d414 <vira_pecas+0x2a8>)
 800d3f0:	00d2      	lsls	r2, r2, #3
 800d3f2:	440a      	add	r2, r1
 800d3f4:	4413      	add	r3, r2
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	7fba      	ldrb	r2, [r7, #30]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d127      	bne.n	800d450 <vira_pecas+0x2e4>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3b02      	subs	r3, #2
 800d404:	617b      	str	r3, [r7, #20]
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	3302      	adds	r3, #2
 800d40a:	61bb      	str	r3, [r7, #24]
 800d40c:	e01a      	b.n	800d444 <vira_pecas+0x2d8>
 800d40e:	bf00      	nop
 800d410:	20000074 	.word	0x20000074
 800d414:	20000abc 	.word	0x20000abc
           if(tabuleiro[i][j] == self){
 800d418:	4a9b      	ldr	r2, [pc, #620]	; (800d688 <vira_pecas+0x51c>)
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	441a      	add	r2, r3
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	4413      	add	r3, r2
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	b2db      	uxtb	r3, r3
 800d428:	7ffa      	ldrb	r2, [r7, #31]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d102      	bne.n	800d434 <vira_pecas+0x2c8>
               ok = 1;
 800d42e:	2301      	movs	r3, #1
 800d430:	613b      	str	r3, [r7, #16]
               break;
 800d432:	e00d      	b.n	800d450 <vira_pecas+0x2e4>
           }
           else{
               ok = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	613b      	str	r3, [r7, #16]
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	3301      	adds	r3, #1
 800d442:	61bb      	str	r3, [r7, #24]
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	db02      	blt.n	800d450 <vira_pecas+0x2e4>
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	2b07      	cmp	r3, #7
 800d44e:	dde3      	ble.n	800d418 <vira_pecas+0x2ac>
           }
       }
   }

   if(ok){
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d025      	beq.n	800d4a2 <vira_pecas+0x336>
      for(i=linsel-1, j=colsel+1; i>=0 && j< 8 && tabuleiro[i][j] == adv; i--, j++){
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3b01      	subs	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	3301      	adds	r3, #1
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	e00d      	b.n	800d480 <vira_pecas+0x314>
    	  tabuleiro[i][j] = self;
 800d464:	4a88      	ldr	r2, [pc, #544]	; (800d688 <vira_pecas+0x51c>)
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	441a      	add	r2, r3
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	4413      	add	r3, r2
 800d470:	7ffa      	ldrb	r2, [r7, #31]
 800d472:	701a      	strb	r2, [r3, #0]
      for(i=linsel-1, j=colsel+1; i>=0 && j< 8 && tabuleiro[i][j] == adv; i--, j++){
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	3b01      	subs	r3, #1
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	3301      	adds	r3, #1
 800d47e:	61bb      	str	r3, [r7, #24]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	db0d      	blt.n	800d4a2 <vira_pecas+0x336>
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2b07      	cmp	r3, #7
 800d48a:	dc0a      	bgt.n	800d4a2 <vira_pecas+0x336>
 800d48c:	4a7e      	ldr	r2, [pc, #504]	; (800d688 <vira_pecas+0x51c>)
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	00db      	lsls	r3, r3, #3
 800d492:	441a      	add	r2, r3
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	4413      	add	r3, r2
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	7fba      	ldrb	r2, [r7, #30]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d0e0      	beq.n	800d464 <vira_pecas+0x2f8>
       }
   }

   ok = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	613b      	str	r3, [r7, #16]


   //DIAGONAL INFERIOR ESQUERDA
   if(tabuleiro[linsel+1][colsel-1] == adv){
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	4976      	ldr	r1, [pc, #472]	; (800d688 <vira_pecas+0x51c>)
 800d4b0:	00d2      	lsls	r2, r2, #3
 800d4b2:	440a      	add	r2, r1
 800d4b4:	4413      	add	r3, r2
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	7fba      	ldrb	r2, [r7, #30]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d122      	bne.n	800d506 <vira_pecas+0x39a>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3302      	adds	r3, #2
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	3b02      	subs	r3, #2
 800d4ca:	61bb      	str	r3, [r7, #24]
 800d4cc:	e015      	b.n	800d4fa <vira_pecas+0x38e>
           if(tabuleiro[i][j] == self){
 800d4ce:	4a6e      	ldr	r2, [pc, #440]	; (800d688 <vira_pecas+0x51c>)
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	441a      	add	r2, r3
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	4413      	add	r3, r2
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	7ffa      	ldrb	r2, [r7, #31]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d102      	bne.n	800d4ea <vira_pecas+0x37e>
               ok = 1;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	613b      	str	r3, [r7, #16]
               break;
 800d4e8:	e00d      	b.n	800d506 <vira_pecas+0x39a>
           }
           else{
               ok = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	613b      	str	r3, [r7, #16]
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	61bb      	str	r3, [r7, #24]
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b07      	cmp	r3, #7
 800d4fe:	dc02      	bgt.n	800d506 <vira_pecas+0x39a>
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	dae3      	bge.n	800d4ce <vira_pecas+0x362>
           }
       }
   }

   if(ok){
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d025      	beq.n	800d558 <vira_pecas+0x3ec>
      for(i=linsel+1, j=colsel-1; i<8 && j>= 0 && tabuleiro[i][j] == adv; i++, j--){
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3301      	adds	r3, #1
 800d510:	617b      	str	r3, [r7, #20]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3b01      	subs	r3, #1
 800d516:	61bb      	str	r3, [r7, #24]
 800d518:	e00d      	b.n	800d536 <vira_pecas+0x3ca>
    	  tabuleiro[i][j] = self;
 800d51a:	4a5b      	ldr	r2, [pc, #364]	; (800d688 <vira_pecas+0x51c>)
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	441a      	add	r2, r3
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	4413      	add	r3, r2
 800d526:	7ffa      	ldrb	r2, [r7, #31]
 800d528:	701a      	strb	r2, [r3, #0]
      for(i=linsel+1, j=colsel-1; i<8 && j>= 0 && tabuleiro[i][j] == adv; i++, j--){
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	3301      	adds	r3, #1
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	3b01      	subs	r3, #1
 800d534:	61bb      	str	r3, [r7, #24]
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b07      	cmp	r3, #7
 800d53a:	dc0d      	bgt.n	800d558 <vira_pecas+0x3ec>
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	db0a      	blt.n	800d558 <vira_pecas+0x3ec>
 800d542:	4a51      	ldr	r2, [pc, #324]	; (800d688 <vira_pecas+0x51c>)
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	441a      	add	r2, r3
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	4413      	add	r3, r2
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	7fba      	ldrb	r2, [r7, #30]
 800d554:	429a      	cmp	r2, r3
 800d556:	d0e0      	beq.n	800d51a <vira_pecas+0x3ae>
       }
   }

   ok = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	613b      	str	r3, [r7, #16]


   //DIAGONAL SUPERIOR DIREITA
   if(tabuleiro[linsel+1][colsel+1] == adv){
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4948      	ldr	r1, [pc, #288]	; (800d688 <vira_pecas+0x51c>)
 800d566:	00d2      	lsls	r2, r2, #3
 800d568:	440a      	add	r2, r1
 800d56a:	4413      	add	r3, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	7fba      	ldrb	r2, [r7, #30]
 800d572:	429a      	cmp	r2, r3
 800d574:	d122      	bne.n	800d5bc <vira_pecas+0x450>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3302      	adds	r3, #2
 800d57a:	617b      	str	r3, [r7, #20]
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	3302      	adds	r3, #2
 800d580:	61bb      	str	r3, [r7, #24]
 800d582:	e015      	b.n	800d5b0 <vira_pecas+0x444>
           if(tabuleiro[i][j] == self){
 800d584:	4a40      	ldr	r2, [pc, #256]	; (800d688 <vira_pecas+0x51c>)
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	00db      	lsls	r3, r3, #3
 800d58a:	441a      	add	r2, r3
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	4413      	add	r3, r2
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	b2db      	uxtb	r3, r3
 800d594:	7ffa      	ldrb	r2, [r7, #31]
 800d596:	429a      	cmp	r2, r3
 800d598:	d102      	bne.n	800d5a0 <vira_pecas+0x434>
               ok = 1;
 800d59a:	2301      	movs	r3, #1
 800d59c:	613b      	str	r3, [r7, #16]
               break;
 800d59e:	e00d      	b.n	800d5bc <vira_pecas+0x450>
           }
           else{
               ok = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	613b      	str	r3, [r7, #16]
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	61bb      	str	r3, [r7, #24]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b07      	cmp	r3, #7
 800d5b4:	dc02      	bgt.n	800d5bc <vira_pecas+0x450>
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	2b07      	cmp	r3, #7
 800d5ba:	dde3      	ble.n	800d584 <vira_pecas+0x418>
           }
       }
   }

   if(ok){
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d025      	beq.n	800d60e <vira_pecas+0x4a2>
      for(int i=linsel+1, j=colsel+1; i<8 && j < 8 && tabuleiro[i][j] == adv; i++, j++){
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	60bb      	str	r3, [r7, #8]
 800d5ce:	e00d      	b.n	800d5ec <vira_pecas+0x480>
    	  tabuleiro[i][j] = self;
 800d5d0:	4a2d      	ldr	r2, [pc, #180]	; (800d688 <vira_pecas+0x51c>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	441a      	add	r2, r3
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	4413      	add	r3, r2
 800d5dc:	7ffa      	ldrb	r2, [r7, #31]
 800d5de:	701a      	strb	r2, [r3, #0]
      for(int i=linsel+1, j=colsel+1; i<8 && j < 8 && tabuleiro[i][j] == adv; i++, j++){
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	60bb      	str	r3, [r7, #8]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2b07      	cmp	r3, #7
 800d5f0:	dc0d      	bgt.n	800d60e <vira_pecas+0x4a2>
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b07      	cmp	r3, #7
 800d5f6:	dc0a      	bgt.n	800d60e <vira_pecas+0x4a2>
 800d5f8:	4a23      	ldr	r2, [pc, #140]	; (800d688 <vira_pecas+0x51c>)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	441a      	add	r2, r3
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	4413      	add	r3, r2
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	7fba      	ldrb	r2, [r7, #30]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d0e0      	beq.n	800d5d0 <vira_pecas+0x464>
       }
   }

   ok = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	613b      	str	r3, [r7, #16]


   //DIAGONAL INFERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel-1] == adv){
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	1e5a      	subs	r2, r3, #1
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	3b01      	subs	r3, #1
 800d61a:	491b      	ldr	r1, [pc, #108]	; (800d688 <vira_pecas+0x51c>)
 800d61c:	00d2      	lsls	r2, r2, #3
 800d61e:	440a      	add	r2, r1
 800d620:	4413      	add	r3, r2
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	7fba      	ldrb	r2, [r7, #30]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d122      	bne.n	800d672 <vira_pecas+0x506>
      for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	3b02      	subs	r3, #2
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	3b02      	subs	r3, #2
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	e015      	b.n	800d666 <vira_pecas+0x4fa>
           if(tabuleiro[i][j] == self){
 800d63a:	4a13      	ldr	r2, [pc, #76]	; (800d688 <vira_pecas+0x51c>)
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	441a      	add	r2, r3
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	4413      	add	r3, r2
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	7ffa      	ldrb	r2, [r7, #31]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d102      	bne.n	800d656 <vira_pecas+0x4ea>
               ok = 1;
 800d650:	2301      	movs	r3, #1
 800d652:	613b      	str	r3, [r7, #16]
               break;
 800d654:	e00d      	b.n	800d672 <vira_pecas+0x506>
           }
           else{
               ok = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	613b      	str	r3, [r7, #16]
      for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	3b01      	subs	r3, #1
 800d664:	61bb      	str	r3, [r7, #24]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	db02      	blt.n	800d672 <vira_pecas+0x506>
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dae3      	bge.n	800d63a <vira_pecas+0x4ce>
           }
       }
   }

   if(ok){
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d028      	beq.n	800d6ca <vira_pecas+0x55e>
      for(i=linsel-1, j=colsel-1; i>=0 && j>= 0 && tabuleiro[i][j] == adv; i--, j--){
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	617b      	str	r3, [r7, #20]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	3b01      	subs	r3, #1
 800d682:	61bb      	str	r3, [r7, #24]
 800d684:	e010      	b.n	800d6a8 <vira_pecas+0x53c>
 800d686:	bf00      	nop
 800d688:	20000abc 	.word	0x20000abc
    	  tabuleiro[i][j] = self;
 800d68c:	4a13      	ldr	r2, [pc, #76]	; (800d6dc <vira_pecas+0x570>)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	00db      	lsls	r3, r3, #3
 800d692:	441a      	add	r2, r3
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	4413      	add	r3, r2
 800d698:	7ffa      	ldrb	r2, [r7, #31]
 800d69a:	701a      	strb	r2, [r3, #0]
      for(i=linsel-1, j=colsel-1; i>=0 && j>= 0 && tabuleiro[i][j] == adv; i--, j--){
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	617b      	str	r3, [r7, #20]
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	61bb      	str	r3, [r7, #24]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	db0d      	blt.n	800d6ca <vira_pecas+0x55e>
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	db0a      	blt.n	800d6ca <vira_pecas+0x55e>
 800d6b4:	4a09      	ldr	r2, [pc, #36]	; (800d6dc <vira_pecas+0x570>)
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	441a      	add	r2, r3
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	4413      	add	r3, r2
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	7fba      	ldrb	r2, [r7, #30]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d0e0      	beq.n	800d68c <vira_pecas+0x520>
       }
   }

    ok = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	613b      	str	r3, [r7, #16]


}
 800d6ce:	bf00      	nop
 800d6d0:	3724      	adds	r7, #36	; 0x24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	20000abc 	.word	0x20000abc

0800d6e0 <tocar_ecran>:

void tocar_ecran(){
 800d6e0:	b590      	push	{r4, r7, lr}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0

	int i=0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60fb      	str	r3, [r7, #12]
	int j=0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	60bb      	str	r3, [r7, #8]
	float x = 0.0;
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	607b      	str	r3, [r7, #4]
	float y = 0.0;
 800d6f4:	f04f 0300 	mov.w	r3, #0
 800d6f8:	603b      	str	r3, [r7, #0]



	if(ts_flag==1){
 800d6fa:	4b5d      	ldr	r3, [pc, #372]	; (800d870 <tocar_ecran+0x190>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	f040 80b1 	bne.w	800d866 <tocar_ecran+0x186>
		ts_flag=0;
 800d704:	4b5a      	ldr	r3, [pc, #360]	; (800d870 <tocar_ecran+0x190>)
 800d706:	2200      	movs	r2, #0
 800d708:	601a      	str	r2, [r3, #0]
			if(TS_State.touchX[0]>=(BSP_LCD_GetXSize()/10+15) && TS_State.touchY[0]>=(BSP_LCD_GetYSize()/10+15) && TS_State.touchX[0]<=475 && TS_State.touchY[0]<=450){
 800d70a:	4b5a      	ldr	r3, [pc, #360]	; (800d874 <tocar_ecran+0x194>)
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	461c      	mov	r4, r3
 800d710:	f7f3 ff04 	bl	800151c <BSP_LCD_GetXSize>
 800d714:	4602      	mov	r2, r0
 800d716:	4b58      	ldr	r3, [pc, #352]	; (800d878 <tocar_ecran+0x198>)
 800d718:	fba3 2302 	umull	r2, r3, r3, r2
 800d71c:	08db      	lsrs	r3, r3, #3
 800d71e:	330f      	adds	r3, #15
 800d720:	429c      	cmp	r4, r3
 800d722:	f0c0 80a0 	bcc.w	800d866 <tocar_ecran+0x186>
 800d726:	4b53      	ldr	r3, [pc, #332]	; (800d874 <tocar_ecran+0x194>)
 800d728:	88db      	ldrh	r3, [r3, #6]
 800d72a:	461c      	mov	r4, r3
 800d72c:	f7f3 ff02 	bl	8001534 <BSP_LCD_GetYSize>
 800d730:	4602      	mov	r2, r0
 800d732:	4b51      	ldr	r3, [pc, #324]	; (800d878 <tocar_ecran+0x198>)
 800d734:	fba3 2302 	umull	r2, r3, r3, r2
 800d738:	08db      	lsrs	r3, r3, #3
 800d73a:	330f      	adds	r3, #15
 800d73c:	429c      	cmp	r4, r3
 800d73e:	f0c0 8092 	bcc.w	800d866 <tocar_ecran+0x186>
 800d742:	4b4c      	ldr	r3, [pc, #304]	; (800d874 <tocar_ecran+0x194>)
 800d744:	885b      	ldrh	r3, [r3, #2]
 800d746:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 800d74a:	f080 808c 	bcs.w	800d866 <tocar_ecran+0x186>
 800d74e:	4b49      	ldr	r3, [pc, #292]	; (800d874 <tocar_ecran+0x194>)
 800d750:	88db      	ldrh	r3, [r3, #6]
 800d752:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800d756:	f200 8086 	bhi.w	800d866 <tocar_ecran+0x186>

				for(i=0; i<8; i++){
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	e022      	b.n	800d7a6 <tocar_ecran+0xc6>
					if((TS_State.touchX[0]) >= 50*i + 80 && (TS_State.touchX[0]) < 50*i + 130){
 800d760:	4b44      	ldr	r3, [pc, #272]	; (800d874 <tocar_ecran+0x194>)
 800d762:	885b      	ldrh	r3, [r3, #2]
 800d764:	4619      	mov	r1, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2232      	movs	r2, #50	; 0x32
 800d76a:	fb02 f303 	mul.w	r3, r2, r3
 800d76e:	3350      	adds	r3, #80	; 0x50
 800d770:	4299      	cmp	r1, r3
 800d772:	db15      	blt.n	800d7a0 <tocar_ecran+0xc0>
 800d774:	4b3f      	ldr	r3, [pc, #252]	; (800d874 <tocar_ecran+0x194>)
 800d776:	885b      	ldrh	r3, [r3, #2]
 800d778:	4619      	mov	r1, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2232      	movs	r2, #50	; 0x32
 800d77e:	fb02 f303 	mul.w	r3, r2, r3
 800d782:	3382      	adds	r3, #130	; 0x82
 800d784:	4299      	cmp	r1, r3
 800d786:	da0b      	bge.n	800d7a0 <tocar_ecran+0xc0>
						x = 50*i + 105;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2232      	movs	r2, #50	; 0x32
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
 800d790:	3369      	adds	r3, #105	; 0x69
 800d792:	ee07 3a90 	vmov	s15, r3
 800d796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d79a:	edc7 7a01 	vstr	s15, [r7, #4]
						break;
 800d79e:	e005      	b.n	800d7ac <tocar_ecran+0xcc>
				for(i=0; i<8; i++){
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b07      	cmp	r3, #7
 800d7aa:	ddd9      	ble.n	800d760 <tocar_ecran+0x80>
					}
				}

				for(j=0; j<8; j++){
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	60bb      	str	r3, [r7, #8]
 800d7b0:	e021      	b.n	800d7f6 <tocar_ecran+0x116>
					if((TS_State.touchY[0]) >= (50*j) && (TS_State.touchY[0]) < (50*j+100)){
 800d7b2:	4b30      	ldr	r3, [pc, #192]	; (800d874 <tocar_ecran+0x194>)
 800d7b4:	88db      	ldrh	r3, [r3, #6]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2232      	movs	r2, #50	; 0x32
 800d7bc:	fb02 f303 	mul.w	r3, r2, r3
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	db15      	blt.n	800d7f0 <tocar_ecran+0x110>
 800d7c4:	4b2b      	ldr	r3, [pc, #172]	; (800d874 <tocar_ecran+0x194>)
 800d7c6:	88db      	ldrh	r3, [r3, #6]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2232      	movs	r2, #50	; 0x32
 800d7ce:	fb02 f303 	mul.w	r3, r2, r3
 800d7d2:	3364      	adds	r3, #100	; 0x64
 800d7d4:	4299      	cmp	r1, r3
 800d7d6:	da0b      	bge.n	800d7f0 <tocar_ecran+0x110>
						y = 50*j + 75;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2232      	movs	r2, #50	; 0x32
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	334b      	adds	r3, #75	; 0x4b
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ea:	edc7 7a00 	vstr	s15, [r7]
						break;
 800d7ee:	e005      	b.n	800d7fc <tocar_ecran+0x11c>
				for(j=0; j<8; j++){
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	60bb      	str	r3, [r7, #8]
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2b07      	cmp	r3, #7
 800d7fa:	ddda      	ble.n	800d7b2 <tocar_ecran+0xd2>
					}
				}


				if(tabuleiro[i][j]==JOGADA_POSSIVEL && deadline >= 0){
 800d7fc:	4a1f      	ldr	r2, [pc, #124]	; (800d87c <tocar_ecran+0x19c>)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	441a      	add	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b50      	cmp	r3, #80	; 0x50
 800d80e:	d12a      	bne.n	800d866 <tocar_ecran+0x186>
 800d810:	4b1b      	ldr	r3, [pc, #108]	; (800d880 <tocar_ecran+0x1a0>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	db26      	blt.n	800d866 <tocar_ecran+0x186>
					if (ver_quem_joga%2 == 1){
 800d818:	4b1a      	ldr	r3, [pc, #104]	; (800d884 <tocar_ecran+0x1a4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f003 0301 	and.w	r3, r3, #1
 800d822:	bfb8      	it	lt
 800d824:	425b      	neglt	r3, r3
 800d826:	2b01      	cmp	r3, #1
 800d828:	d103      	bne.n	800d832 <tocar_ecran+0x152>
						  passa_jogada_um = 0;
 800d82a:	4b17      	ldr	r3, [pc, #92]	; (800d888 <tocar_ecran+0x1a8>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]
 800d830:	e002      	b.n	800d838 <tocar_ecran+0x158>
					}
					else{
						  passa_jogada_dois = 0;
 800d832:	4b16      	ldr	r3, [pc, #88]	; (800d88c <tocar_ecran+0x1ac>)
 800d834:	2200      	movs	r2, #0
 800d836:	601a      	str	r2, [r3, #0]
					}

					imprime_jogada(x, y, i, j);
 800d838:	68b9      	ldr	r1, [r7, #8]
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	edd7 0a00 	vldr	s1, [r7]
 800d840:	ed97 0a01 	vldr	s0, [r7, #4]
 800d844:	f7fe feb6 	bl	800c5b4 <imprime_jogada>
					vira_pecas(i, j);
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7ff fc8e 	bl	800d16c <vira_pecas>
					ver_quem_joga++;
 800d850:	4b0c      	ldr	r3, [pc, #48]	; (800d884 <tocar_ecran+0x1a4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	3301      	adds	r3, #1
 800d856:	4a0b      	ldr	r2, [pc, #44]	; (800d884 <tocar_ecran+0x1a4>)
 800d858:	6013      	str	r3, [r2, #0]
					limpa_possibilidades();
 800d85a:	f7fe ffe5 	bl	800c828 <limpa_possibilidades>
					jogadas_possiveis();
 800d85e:	f7ff f9ad 	bl	800cbbc <jogadas_possiveis>
					actualiza_pecas_tabuleiro();
 800d862:	f7fe feff 	bl	800c664 <actualiza_pecas_tabuleiro>
				}


		}
	}
}
 800d866:	bf00      	nop
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd90      	pop	{r4, r7, pc}
 800d86e:	bf00      	nop
 800d870:	20000350 	.word	0x20000350
 800d874:	20000bfc 	.word	0x20000bfc
 800d878:	cccccccd 	.word	0xcccccccd
 800d87c:	20000abc 	.word	0x20000abc
 800d880:	20000070 	.word	0x20000070
 800d884:	20000074 	.word	0x20000074
 800d888:	20000354 	.word	0x20000354
 800d88c:	20000358 	.word	0x20000358

0800d890 <sem_mais_jogadas_possiveis>:


int sem_mais_jogadas_possiveis(){
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
	int i = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800d89a:	2300      	movs	r3, #0
 800d89c:	60bb      	str	r3, [r7, #8]
	int conta_possiveis = 1;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	607b      	str	r3, [r7, #4]

	for (i = 0; i < 8; i++){
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	e018      	b.n	800d8da <sem_mais_jogadas_possiveis+0x4a>
		for (j = 0; j < 8; j++){
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60bb      	str	r3, [r7, #8]
 800d8ac:	e00f      	b.n	800d8ce <sem_mais_jogadas_possiveis+0x3e>
			if(tabuleiro[i][j] == JOGADA_POSSIVEL){
 800d8ae:	4a10      	ldr	r2, [pc, #64]	; (800d8f0 <sem_mais_jogadas_possiveis+0x60>)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b50      	cmp	r3, #80	; 0x50
 800d8c0:	d102      	bne.n	800d8c8 <sem_mais_jogadas_possiveis+0x38>
				conta_possiveis++;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	607b      	str	r3, [r7, #4]
		for (j = 0; j < 8; j++){
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	60bb      	str	r3, [r7, #8]
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	ddec      	ble.n	800d8ae <sem_mais_jogadas_possiveis+0x1e>
	for (i = 0; i < 8; i++){
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b07      	cmp	r3, #7
 800d8de:	dde3      	ble.n	800d8a8 <sem_mais_jogadas_possiveis+0x18>
			}
		}
	}
	return conta_possiveis-1;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3b01      	subs	r3, #1
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	20000abc 	.word	0x20000abc

0800d8f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b089      	sub	sp, #36	; 0x24
 800d8f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	unsigned int nBytes;
	int i = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	617b      	str	r3, [r7, #20]
	int j = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	613b      	str	r3, [r7, #16]
	int jog_um = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	60fb      	str	r3, [r7, #12]
	int jog_dois = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	60bb      	str	r3, [r7, #8]
	int vencedor = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800d90e:	f7fe fac1 	bl	800be94 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800d912:	f7fe fadf 	bl	800bed4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d916:	f7f4 ffa5 	bl	8002864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d91a:	f000 f943 	bl	800dba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d91e:	f000 fcbb 	bl	800e298 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800d922:	f000 fa35 	bl	800dd90 <MX_DMA2D_Init>
  MX_FMC_Init();
 800d926:	f000 fc69 	bl	800e1fc <MX_FMC_Init>
  MX_LTDC_Init();
 800d92a:	f000 fb5d 	bl	800dfe8 <MX_LTDC_Init>
  MX_ADC1_Init();
 800d92e:	f000 f9db 	bl	800dce8 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 800d932:	f000 fa65 	bl	800de00 <MX_DSIHOST_DSI_Init>
  MX_SDMMC2_SD_Init();
 800d936:	f000 fc09 	bl	800e14c <MX_SDMMC2_SD_Init>
  MX_TIM6_Init();
 800d93a:	f000 fc27 	bl	800e18c <MX_TIM6_Init>
  MX_FATFS_Init();
 800d93e:	f7fe fa79 	bl	800be34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 800d942:	4888      	ldr	r0, [pc, #544]	; (800db64 <main+0x270>)
 800d944:	f7fa ff1c 	bl	8008780 <HAL_TIM_Base_Start_IT>
  LCD_Config();
 800d948:	f000 fd3e 	bl	800e3c8 <LCD_Config>
  BSP_LED_Init(LED_GREEN);
 800d94c:	2001      	movs	r0, #1
 800d94e:	f7f3 f9dd 	bl	8000d0c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800d952:	2000      	movs	r0, #0
 800d954:	f7f3 f9da 	bl	8000d0c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800d958:	2100      	movs	r1, #0
 800d95a:	2000      	movs	r0, #0
 800d95c:	f7f3 fa20 	bl	8000da0 <BSP_PB_Init>
//start do adc
  HAL_ADC_Start(&hadc1);
 800d960:	4881      	ldr	r0, [pc, #516]	; (800db68 <main+0x274>)
 800d962:	f7f5 f843 	bl	80029ec <HAL_ADC_Start>


  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800d966:	f7f3 fdd9 	bl	800151c <BSP_LCD_GetXSize>
 800d96a:	4603      	mov	r3, r0
 800d96c:	b29c      	uxth	r4, r3
 800d96e:	f7f3 fde1 	bl	8001534 <BSP_LCD_GetYSize>
 800d972:	4603      	mov	r3, r0
 800d974:	b29b      	uxth	r3, r3
 800d976:	4619      	mov	r1, r3
 800d978:	4620      	mov	r0, r4
 800d97a:	f7f4 fd97 	bl	80024ac <BSP_TS_Init>
  BSP_TS_ITConfig();
 800d97e:	f7f4 fdf5 	bl	800256c <BSP_TS_ITConfig>

  jump:

  HAL_Delay(250);
 800d982:	20fa      	movs	r0, #250	; 0xfa
 800d984:	f7f4 ffcc 	bl	8002920 <HAL_Delay>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	f7f3 fe3e 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 800d990:	f7f3 fdc4 	bl	800151c <BSP_LCD_GetXSize>
 800d994:	4603      	mov	r3, r0
 800d996:	b29c      	uxth	r4, r3
 800d998:	f7f3 fdcc 	bl	8001534 <BSP_LCD_GetYSize>
 800d99c:	4603      	mov	r3, r0
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	3b32      	subs	r3, #50	; 0x32
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	2132      	movs	r1, #50	; 0x32
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	f7f4 f91b 	bl	8001be4 <BSP_LCD_FillRect>
  while(BSP_PB_GetState(BUTTON_WAKEUP)!=1){
 800d9ae:	e005      	b.n	800d9bc <main+0xc8>
	  menu_inicial();
 800d9b0:	f7fe fb58 	bl	800c064 <menu_inicial>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d9b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d9b8:	f7f3 fe28 	bl	800160c <BSP_LCD_SetTextColor>
  while(BSP_PB_GetState(BUTTON_WAKEUP)!=1){
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f7f3 fa43 	bl	8000e48 <BSP_PB_GetState>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d1f3      	bne.n	800d9b0 <main+0xbc>
  }
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9cc:	f7f3 fe1e 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 800d9d0:	f7f3 fda4 	bl	800151c <BSP_LCD_GetXSize>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	b29c      	uxth	r4, r3
 800d9d8:	f7f3 fdac 	bl	8001534 <BSP_LCD_GetYSize>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	3b32      	subs	r3, #50	; 0x32
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	2132      	movs	r1, #50	; 0x32
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	f7f4 f8fb 	bl	8001be4 <BSP_LCD_FillRect>

  ver_quem_joga = 1;
 800d9ee:	4b5f      	ldr	r3, [pc, #380]	; (800db6c <main+0x278>)
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	601a      	str	r2, [r3, #0]
  count = 0;
 800d9f4:	4b5e      	ldr	r3, [pc, #376]	; (800db70 <main+0x27c>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]
  deadline = 20;
 800d9fa:	4b5e      	ldr	r3, [pc, #376]	; (800db74 <main+0x280>)
 800d9fc:	2214      	movs	r2, #20
 800d9fe:	601a      	str	r2, [r3, #0]

  imprime_tabuleiro();
 800da00:	f7fe fc46 	bl	800c290 <imprime_tabuleiro>

  for (i = 0; i < 8; i++){
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e013      	b.n	800da32 <main+0x13e>
	  for (j = 0; j < 8; j++){
 800da0a:	2300      	movs	r3, #0
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	e00a      	b.n	800da26 <main+0x132>
		  tabuleiro[i][j] = SEM_PECA;
 800da10:	4a59      	ldr	r2, [pc, #356]	; (800db78 <main+0x284>)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	441a      	add	r2, r3
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	4413      	add	r3, r2
 800da1c:	224e      	movs	r2, #78	; 0x4e
 800da1e:	701a      	strb	r2, [r3, #0]
	  for (j = 0; j < 8; j++){
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	3301      	adds	r3, #1
 800da24:	613b      	str	r3, [r7, #16]
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b07      	cmp	r3, #7
 800da2a:	ddf1      	ble.n	800da10 <main+0x11c>
  for (i = 0; i < 8; i++){
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	3301      	adds	r3, #1
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b07      	cmp	r3, #7
 800da36:	dde8      	ble.n	800da0a <main+0x116>
	  }
  }


  imprime_pecas_iniciais();
 800da38:	f7fe fd82 	bl	800c540 <imprime_pecas_iniciais>

  jogadas_possiveis();
 800da3c:	f7ff f8be 	bl	800cbbc <jogadas_possiveis>
  actualiza_pecas_tabuleiro();
 800da40:	f7fe fe10 	bl	800c664 <actualiza_pecas_tabuleiro>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mostra_temperatura();
 800da44:	f7fe fcc0 	bl	800c3c8 <mostra_temperatura>
	  mostra_tempo();
 800da48:	f7fe fce0 	bl	800c40c <mostra_tempo>
	  mostra_deadline();
 800da4c:	f7fe fd00 	bl	800c450 <mostra_deadline>
	  mostra_quem_joga();
 800da50:	f7fe fd20 	bl	800c494 <mostra_quem_joga>
	  tocar_ecran();
 800da54:	f7ff fe44 	bl	800d6e0 <tocar_ecran>

	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1 && count>1){
 800da58:	2000      	movs	r0, #0
 800da5a:	f7f3 f9f5 	bl	8000e48 <BSP_PB_GetState>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b01      	cmp	r3, #1
 800da62:	d104      	bne.n	800da6e <main+0x17a>
 800da64:	4b42      	ldr	r3, [pc, #264]	; (800db70 <main+0x27c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	dd00      	ble.n	800da6e <main+0x17a>
		  goto jump;
 800da6c:	e789      	b.n	800d982 <main+0x8e>
	  }

	  if(deadline < 0){
 800da6e:	4b41      	ldr	r3, [pc, #260]	; (800db74 <main+0x280>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	da21      	bge.n	800daba <main+0x1c6>
		  deadline = 20;
 800da76:	4b3f      	ldr	r3, [pc, #252]	; (800db74 <main+0x280>)
 800da78:	2214      	movs	r2, #20
 800da7a:	601a      	str	r2, [r3, #0]

		  if (ver_quem_joga%2 == 1){
 800da7c:	4b3b      	ldr	r3, [pc, #236]	; (800db6c <main+0x278>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	bfb8      	it	lt
 800da88:	425b      	neglt	r3, r3
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d105      	bne.n	800da9a <main+0x1a6>
			  passa_jogada_um++;
 800da8e:	4b3b      	ldr	r3, [pc, #236]	; (800db7c <main+0x288>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	3301      	adds	r3, #1
 800da94:	4a39      	ldr	r2, [pc, #228]	; (800db7c <main+0x288>)
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	e004      	b.n	800daa4 <main+0x1b0>
		  }
		  else{
			  passa_jogada_dois++;
 800da9a:	4b39      	ldr	r3, [pc, #228]	; (800db80 <main+0x28c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3301      	adds	r3, #1
 800daa0:	4a37      	ldr	r2, [pc, #220]	; (800db80 <main+0x28c>)
 800daa2:	6013      	str	r3, [r2, #0]
		  }

		  ver_quem_joga++;
 800daa4:	4b31      	ldr	r3, [pc, #196]	; (800db6c <main+0x278>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	3301      	adds	r3, #1
 800daaa:	4a30      	ldr	r2, [pc, #192]	; (800db6c <main+0x278>)
 800daac:	6013      	str	r3, [r2, #0]
		  limpa_possibilidades();
 800daae:	f7fe febb 	bl	800c828 <limpa_possibilidades>
		  jogadas_possiveis();
 800dab2:	f7ff f883 	bl	800cbbc <jogadas_possiveis>
		  actualiza_pecas_tabuleiro();
 800dab6:	f7fe fdd5 	bl	800c664 <actualiza_pecas_tabuleiro>
	  }

	  if(!sem_mais_jogadas_possiveis() || passa_jogada_um >= 3 || passa_jogada_dois >= 3){
 800daba:	f7ff fee9 	bl	800d890 <sem_mais_jogadas_possiveis>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d007      	beq.n	800dad4 <main+0x1e0>
 800dac4:	4b2d      	ldr	r3, [pc, #180]	; (800db7c <main+0x288>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b02      	cmp	r3, #2
 800daca:	dc03      	bgt.n	800dad4 <main+0x1e0>
 800dacc:	4b2c      	ldr	r3, [pc, #176]	; (800db80 <main+0x28c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	ddb7      	ble.n	800da44 <main+0x150>
		  fim_do_jogo(jog_um, jog_dois, vencedor);
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	68b9      	ldr	r1, [r7, #8]
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7fe fb15 	bl	800c108 <fim_do_jogo>

			  if(f_mount(&SDFatFS, SDPath, 0)!= FR_OK){
 800dade:	2200      	movs	r2, #0
 800dae0:	4928      	ldr	r1, [pc, #160]	; (800db84 <main+0x290>)
 800dae2:	4829      	ldr	r0, [pc, #164]	; (800db88 <main+0x294>)
 800dae4:	f7fd fc96 	bl	800b414 <f_mount>
			  	  //Error_Handler();
			  }

			  if(f_open(&SDFile, "registo_reversi.txt", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK){
 800dae8:	220a      	movs	r2, #10
 800daea:	4928      	ldr	r1, [pc, #160]	; (800db8c <main+0x298>)
 800daec:	4828      	ldr	r0, [pc, #160]	; (800db90 <main+0x29c>)
 800daee:	f7fd fcd7 	bl	800b4a0 <f_open>
				  //Error_Handler();
			  }

			  if(vencedor == 0){
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d107      	bne.n	800db08 <main+0x214>
				  sprintf(desc, "Empate a %d! - %d segundos\n", jog_um, count);
 800daf8:	4b1d      	ldr	r3, [pc, #116]	; (800db70 <main+0x27c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	4925      	ldr	r1, [pc, #148]	; (800db94 <main+0x2a0>)
 800db00:	4825      	ldr	r0, [pc, #148]	; (800db98 <main+0x2a4>)
 800db02:	f001 f8e7 	bl	800ecd4 <siprintf>
 800db06:	e018      	b.n	800db3a <main+0x246>
			  }
			  else if(vencedor == 1){
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d109      	bne.n	800db22 <main+0x22e>
				  sprintf(desc, "Ganhou o jogador 1! - Jogador 1: %d, Jogador 2: %d - %d segundos\n", jog_um, jog_dois, count);
 800db0e:	4b18      	ldr	r3, [pc, #96]	; (800db70 <main+0x27c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4920      	ldr	r1, [pc, #128]	; (800db9c <main+0x2a8>)
 800db1a:	481f      	ldr	r0, [pc, #124]	; (800db98 <main+0x2a4>)
 800db1c:	f001 f8da 	bl	800ecd4 <siprintf>
 800db20:	e00b      	b.n	800db3a <main+0x246>
			  }
			  else if(vencedor == 2){
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d108      	bne.n	800db3a <main+0x246>
				  sprintf(desc, "Ganhou o jogador 2! - Jogador 1: %d, Jogador 2: %d - %d segundos\n", jog_um, jog_dois, count);
 800db28:	4b11      	ldr	r3, [pc, #68]	; (800db70 <main+0x27c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	491b      	ldr	r1, [pc, #108]	; (800dba0 <main+0x2ac>)
 800db34:	4818      	ldr	r0, [pc, #96]	; (800db98 <main+0x2a4>)
 800db36:	f001 f8cd 	bl	800ecd4 <siprintf>
			  }

			  if(f_write(&SDFile, desc, strlen(desc), &nBytes) != FR_OK){
 800db3a:	4817      	ldr	r0, [pc, #92]	; (800db98 <main+0x2a4>)
 800db3c:	f7f2 fb80 	bl	8000240 <strlen>
 800db40:	4602      	mov	r2, r0
 800db42:	463b      	mov	r3, r7
 800db44:	4914      	ldr	r1, [pc, #80]	; (800db98 <main+0x2a4>)
 800db46:	4812      	ldr	r0, [pc, #72]	; (800db90 <main+0x29c>)
 800db48:	f7fd fe68 	bl	800b81c <f_write>
				  //Error_Handler();
			  }

			  f_close(&SDFile);
 800db4c:	4810      	ldr	r0, [pc, #64]	; (800db90 <main+0x29c>)
 800db4e:	f7fe f858 	bl	800bc02 <f_close>

  		  while(BSP_PB_GetState(BUTTON_WAKEUP)!=1){
 800db52:	bf00      	nop
 800db54:	2000      	movs	r0, #0
 800db56:	f7f3 f977 	bl	8000e48 <BSP_PB_GetState>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d1f9      	bne.n	800db54 <main+0x260>
	  mostra_temperatura();
 800db60:	e770      	b.n	800da44 <main+0x150>
 800db62:	bf00      	nop
 800db64:	20000b00 	.word	0x20000b00
 800db68:	20000a74 	.word	0x20000a74
 800db6c:	20000074 	.word	0x20000074
 800db70:	20000348 	.word	0x20000348
 800db74:	20000070 	.word	0x20000070
 800db78:	20000abc 	.word	0x20000abc
 800db7c:	20000354 	.word	0x20000354
 800db80:	20000358 	.word	0x20000358
 800db84:	200004c4 	.word	0x200004c4
 800db88:	200006f8 	.word	0x200006f8
 800db8c:	0800f67c 	.word	0x0800f67c
 800db90:	200004c8 	.word	0x200004c8
 800db94:	0800f690 	.word	0x0800f690
 800db98:	20000b40 	.word	0x20000b40
 800db9c:	0800f6ac 	.word	0x0800f6ac
 800dba0:	0800f6f0 	.word	0x0800f6f0

0800dba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b0b8      	sub	sp, #224	; 0xe0
 800dba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dbaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800dbae:	2234      	movs	r2, #52	; 0x34
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f001 f886 	bl	800ecc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dbb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	605a      	str	r2, [r3, #4]
 800dbc2:	609a      	str	r2, [r3, #8]
 800dbc4:	60da      	str	r2, [r3, #12]
 800dbc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dbc8:	f107 0308 	add.w	r3, r7, #8
 800dbcc:	2290      	movs	r2, #144	; 0x90
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f001 f877 	bl	800ecc4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dbd6:	4b41      	ldr	r3, [pc, #260]	; (800dcdc <SystemClock_Config+0x138>)
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	4a40      	ldr	r2, [pc, #256]	; (800dcdc <SystemClock_Config+0x138>)
 800dbdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbe0:	6413      	str	r3, [r2, #64]	; 0x40
 800dbe2:	4b3e      	ldr	r3, [pc, #248]	; (800dcdc <SystemClock_Config+0x138>)
 800dbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbea:	607b      	str	r3, [r7, #4]
 800dbec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dbee:	4b3c      	ldr	r3, [pc, #240]	; (800dce0 <SystemClock_Config+0x13c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a3b      	ldr	r2, [pc, #236]	; (800dce0 <SystemClock_Config+0x13c>)
 800dbf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dbf8:	6013      	str	r3, [r2, #0]
 800dbfa:	4b39      	ldr	r3, [pc, #228]	; (800dce0 <SystemClock_Config+0x13c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dc02:	603b      	str	r3, [r7, #0]
 800dc04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dc06:	2301      	movs	r3, #1
 800dc08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dc0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dc10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dc14:	2302      	movs	r3, #2
 800dc16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dc1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dc1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800dc22:	2319      	movs	r3, #25
 800dc24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800dc28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800dc2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dc30:	2302      	movs	r3, #2
 800dc32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800dc36:	2308      	movs	r3, #8
 800dc38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dc3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7f8 fb41 	bl	80062c8 <HAL_RCC_OscConfig>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d001      	beq.n	800dc50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800dc4c:	f000 fc1c 	bl	800e488 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800dc50:	f7f8 faea 	bl	8006228 <HAL_PWREx_EnableOverDrive>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800dc5a:	f000 fc15 	bl	800e488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dc5e:	230f      	movs	r3, #15
 800dc60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dc64:	2302      	movs	r3, #2
 800dc66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dc70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dc74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dc78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800dc80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dc84:	2106      	movs	r1, #6
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7f8 fd90 	bl	80067ac <HAL_RCC_ClockConfig>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800dc92:	f000 fbf9 	bl	800e488 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800dc96:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <SystemClock_Config+0x140>)
 800dc98:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800dc9a:	23c0      	movs	r3, #192	; 0xc0
 800dc9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800dca2:	2302      	movs	r3, #2
 800dca4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800dca6:	2300      	movs	r3, #0
 800dca8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7f8 ff0c 	bl	8006ae0 <HAL_RCCEx_PeriphCLKConfig>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d001      	beq.n	800dcd2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800dcce:	f000 fbdb 	bl	800e488 <Error_Handler>
  }
}
 800dcd2:	bf00      	nop
 800dcd4:	37e0      	adds	r7, #224	; 0xe0
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	40023800 	.word	0x40023800
 800dce0:	40007000 	.word	0x40007000
 800dce4:	04200008 	.word	0x04200008

0800dce8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800dcee:	463b      	mov	r3, r7
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	609a      	str	r2, [r3, #8]
 800dcf8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800dcfa:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dcfc:	4a21      	ldr	r2, [pc, #132]	; (800dd84 <MX_ADC1_Init+0x9c>)
 800dcfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800dd00:	4b1f      	ldr	r3, [pc, #124]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800dd06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800dd08:	4b1d      	ldr	r3, [pc, #116]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800dd0e:	4b1c      	ldr	r3, [pc, #112]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800dd14:	4b1a      	ldr	r3, [pc, #104]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd16:	2201      	movs	r2, #1
 800dd18:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dd1a:	4b19      	ldr	r3, [pc, #100]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dd22:	4b17      	ldr	r3, [pc, #92]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800dd28:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd2a:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <MX_ADC1_Init+0xa0>)
 800dd2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dd2e:	4b14      	ldr	r3, [pc, #80]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800dd34:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd36:	2201      	movs	r2, #1
 800dd38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800dd42:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dd48:	480d      	ldr	r0, [pc, #52]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd4a:	f7f4 fe0b 	bl	8002964 <HAL_ADC_Init>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800dd54:	f000 fb98 	bl	800e488 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800dd58:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <MX_ADC1_Init+0xa4>)
 800dd5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dd60:	2303      	movs	r3, #3
 800dd62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dd64:	463b      	mov	r3, r7
 800dd66:	4619      	mov	r1, r3
 800dd68:	4805      	ldr	r0, [pc, #20]	; (800dd80 <MX_ADC1_Init+0x98>)
 800dd6a:	f7f4 ff0d 	bl	8002b88 <HAL_ADC_ConfigChannel>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800dd74:	f000 fb88 	bl	800e488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dd78:	bf00      	nop
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20000a74 	.word	0x20000a74
 800dd84:	40012000 	.word	0x40012000
 800dd88:	0f000001 	.word	0x0f000001
 800dd8c:	10000012 	.word	0x10000012

0800dd90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800dd94:	4b18      	ldr	r3, [pc, #96]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800dd96:	4a19      	ldr	r2, [pc, #100]	; (800ddfc <MX_DMA2D_Init+0x6c>)
 800dd98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800dd9a:	4b17      	ldr	r3, [pc, #92]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800dda0:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800dda6:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800ddac:	4b12      	ldr	r3, [pc, #72]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800ddb2:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ddb8:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ddbe:	4b0e      	ldr	r3, [pc, #56]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800ddca:	4b0b      	ldr	r3, [pc, #44]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ddd0:	4809      	ldr	r0, [pc, #36]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800ddd2:	f7f5 fbd5 	bl	8003580 <HAL_DMA2D_Init>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800dddc:	f000 fb54 	bl	800e488 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800dde0:	2101      	movs	r1, #1
 800dde2:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <MX_DMA2D_Init+0x68>)
 800dde4:	f7f5 fd3a 	bl	800385c <HAL_DMA2D_ConfigLayer>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800ddee:	f000 fb4b 	bl	800e488 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800ddf2:	bf00      	nop
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000ba4 	.word	0x20000ba4
 800ddfc:	4002b000 	.word	0x4002b000

0800de00 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b0aa      	sub	sp, #168	; 0xa8
 800de04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800de06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	605a      	str	r2, [r3, #4]
 800de10:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800de12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800de16:	2224      	movs	r2, #36	; 0x24
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 ff52 	bl	800ecc4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800de20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	605a      	str	r2, [r3, #4]
 800de2a:	609a      	str	r2, [r3, #8]
 800de2c:	60da      	str	r2, [r3, #12]
 800de2e:	611a      	str	r2, [r3, #16]
 800de30:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800de32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800de36:	2234      	movs	r2, #52	; 0x34
 800de38:	2100      	movs	r1, #0
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 ff42 	bl	800ecc4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800de40:	463b      	mov	r3, r7
 800de42:	222c      	movs	r2, #44	; 0x2c
 800de44:	2100      	movs	r1, #0
 800de46:	4618      	mov	r0, r3
 800de48:	f000 ff3c 	bl	800ecc4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800de4c:	4b64      	ldr	r3, [pc, #400]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800de4e:	4a65      	ldr	r2, [pc, #404]	; (800dfe4 <MX_DSIHOST_DSI_Init+0x1e4>)
 800de50:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800de52:	4b63      	ldr	r3, [pc, #396]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800de54:	2200      	movs	r2, #0
 800de56:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800de58:	4b61      	ldr	r3, [pc, #388]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800de5a:	2204      	movs	r2, #4
 800de5c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800de5e:	4b60      	ldr	r3, [pc, #384]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800de60:	2200      	movs	r2, #0
 800de62:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800de64:	2314      	movs	r3, #20
 800de66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800de6a:	2301      	movs	r3, #1
 800de6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800de70:	2300      	movs	r3, #0
 800de72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800de76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800de7a:	4619      	mov	r1, r3
 800de7c:	4858      	ldr	r0, [pc, #352]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800de7e:	f7f5 fe6f 	bl	8003b60 <HAL_DSI_Init>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d001      	beq.n	800de8c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800de88:	f000 fafe 	bl	800e488 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800de8c:	2301      	movs	r3, #1
 800de8e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800de94:	2300      	movs	r3, #0
 800de96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800deac:	2300      	movs	r3, #0
 800deae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800debe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dec2:	4619      	mov	r1, r3
 800dec4:	4846      	ldr	r0, [pc, #280]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800dec6:	f7f6 fc87 	bl	80047d8 <HAL_DSI_ConfigHostTimeouts>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800ded0:	f000 fada 	bl	800e488 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800ded4:	231c      	movs	r3, #28
 800ded6:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800ded8:	2321      	movs	r3, #33	; 0x21
 800deda:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800dedc:	230f      	movs	r3, #15
 800dede:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800dee0:	2319      	movs	r3, #25
 800dee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800deec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800def0:	4619      	mov	r1, r3
 800def2:	483b      	ldr	r0, [pc, #236]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800def4:	f7f6 fc06 	bl	8004704 <HAL_DSI_ConfigPhyTimer>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800defe:	f000 fac3 	bl	800e488 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800df02:	2104      	movs	r1, #4
 800df04:	4836      	ldr	r0, [pc, #216]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800df06:	f7f6 fbd5 	bl	80046b4 <HAL_DSI_ConfigFlowControl>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800df10:	f000 faba 	bl	800e488 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800df14:	f242 7110 	movw	r1, #10000	; 0x2710
 800df18:	4831      	ldr	r0, [pc, #196]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800df1a:	f7f6 fe1b 	bl	8004b54 <HAL_DSI_SetLowPowerRXFilter>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800df24:	f000 fab0 	bl	800e488 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800df28:	2100      	movs	r1, #0
 800df2a:	482d      	ldr	r0, [pc, #180]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800df2c:	f7f5 ffa6 	bl	8003e7c <HAL_DSI_ConfigErrorMonitor>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800df36:	f000 faa7 	bl	800e488 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800df3a:	2300      	movs	r3, #0
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800df3e:	2300      	movs	r3, #0
 800df40:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800df42:	2300      	movs	r3, #0
 800df44:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800df46:	2300      	movs	r3, #0
 800df48:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800df4a:	2300      	movs	r3, #0
 800df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800df4e:	2300      	movs	r3, #0
 800df50:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800df52:	2300      	movs	r3, #0
 800df54:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800df56:	2300      	movs	r3, #0
 800df58:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800df5a:	2300      	movs	r3, #0
 800df5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800df5e:	2300      	movs	r3, #0
 800df60:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800df62:	2300      	movs	r3, #0
 800df64:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800df66:	2300      	movs	r3, #0
 800df68:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800df6a:	2300      	movs	r3, #0
 800df6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800df6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df72:	4619      	mov	r1, r3
 800df74:	481a      	ldr	r0, [pc, #104]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800df76:	f7f6 fb3f 	bl	80045f8 <HAL_DSI_ConfigCommand>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800df80:	f000 fa82 	bl	800e488 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800df84:	2300      	movs	r3, #0
 800df86:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800df88:	2305      	movs	r3, #5
 800df8a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800df8c:	f44f 7320 	mov.w	r3, #640	; 0x280
 800df90:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800df92:	2310      	movs	r3, #16
 800df94:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800df96:	2300      	movs	r3, #0
 800df98:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800df9a:	2304      	movs	r3, #4
 800df9c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800df9e:	2302      	movs	r3, #2
 800dfa0:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800dfaa:	2340      	movs	r3, #64	; 0x40
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	480a      	ldr	r0, [pc, #40]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800dfb8:	f7f6 fa44 	bl	8004444 <HAL_DSI_ConfigAdaptedCommandMode>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800dfc2:	f000 fa61 	bl	800e488 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4805      	ldr	r0, [pc, #20]	; (800dfe0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800dfca:	f7f6 f813 	bl	8003ff4 <HAL_DSI_SetGenericVCID>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800dfd4:	f000 fa58 	bl	800e488 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800dfd8:	bf00      	nop
 800dfda:	37a8      	adds	r7, #168	; 0xa8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	2000092c 	.word	0x2000092c
 800dfe4:	40016c00 	.word	0x40016c00

0800dfe8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b09a      	sub	sp, #104	; 0x68
 800dfec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800dfee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dff2:	2234      	movs	r2, #52	; 0x34
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 fe64 	bl	800ecc4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800dffc:	463b      	mov	r3, r7
 800dffe:	2234      	movs	r2, #52	; 0x34
 800e000:	2100      	movs	r1, #0
 800e002:	4618      	mov	r0, r3
 800e004:	f000 fe5e 	bl	800ecc4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800e008:	4b4e      	ldr	r3, [pc, #312]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e00a:	4a4f      	ldr	r2, [pc, #316]	; (800e148 <MX_LTDC_Init+0x160>)
 800e00c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e00e:	4b4d      	ldr	r3, [pc, #308]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e010:	2200      	movs	r2, #0
 800e012:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800e014:	4b4b      	ldr	r3, [pc, #300]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e016:	2200      	movs	r2, #0
 800e018:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800e01a:	4b4a      	ldr	r3, [pc, #296]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e020:	4b48      	ldr	r3, [pc, #288]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e022:	2200      	movs	r2, #0
 800e024:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800e026:	4b47      	ldr	r3, [pc, #284]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e028:	2207      	movs	r2, #7
 800e02a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800e02c:	4b45      	ldr	r3, [pc, #276]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e02e:	2203      	movs	r2, #3
 800e030:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800e032:	4b44      	ldr	r3, [pc, #272]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e034:	220e      	movs	r2, #14
 800e036:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800e038:	4b42      	ldr	r3, [pc, #264]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e03a:	2205      	movs	r2, #5
 800e03c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800e03e:	4b41      	ldr	r3, [pc, #260]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e040:	f240 228e 	movw	r2, #654	; 0x28e
 800e044:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800e046:	4b3f      	ldr	r3, [pc, #252]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e048:	f240 12e5 	movw	r2, #485	; 0x1e5
 800e04c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800e04e:	4b3d      	ldr	r3, [pc, #244]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e050:	f44f 7225 	mov.w	r2, #660	; 0x294
 800e054:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800e056:	4b3b      	ldr	r3, [pc, #236]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e058:	f240 12e7 	movw	r2, #487	; 0x1e7
 800e05c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800e05e:	4b39      	ldr	r3, [pc, #228]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e060:	2200      	movs	r2, #0
 800e062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800e066:	4b37      	ldr	r3, [pc, #220]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800e06e:	4b35      	ldr	r3, [pc, #212]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800e076:	4833      	ldr	r0, [pc, #204]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e078:	f7f7 fdde 	bl	8005c38 <HAL_LTDC_Init>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800e082:	f000 fa01 	bl	800e488 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e096:	2300      	movs	r3, #0
 800e098:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e0a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0a6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e0a8:	2305      	movs	r3, #5
 800e0aa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800e0ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	481c      	ldr	r0, [pc, #112]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e0d4:	f7f7 fe80 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800e0de:	f000 f9d3 	bl	800e488 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e102:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e104:	2305      	movs	r3, #5
 800e106:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800e110:	2300      	movs	r3, #0
 800e112:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800e114:	2300      	movs	r3, #0
 800e116:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800e126:	463b      	mov	r3, r7
 800e128:	2201      	movs	r2, #1
 800e12a:	4619      	mov	r1, r3
 800e12c:	4805      	ldr	r0, [pc, #20]	; (800e144 <MX_LTDC_Init+0x15c>)
 800e12e:	f7f7 fe53 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800e138:	f000 f9a6 	bl	800e488 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800e13c:	bf00      	nop
 800e13e:	3768      	adds	r7, #104	; 0x68
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	200009cc 	.word	0x200009cc
 800e148:	40016800 	.word	0x40016800

0800e14c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800e150:	4b0c      	ldr	r3, [pc, #48]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e152:	4a0d      	ldr	r2, [pc, #52]	; (800e188 <MX_SDMMC2_SD_Init+0x3c>)
 800e154:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800e156:	4b0b      	ldr	r3, [pc, #44]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e158:	2200      	movs	r2, #0
 800e15a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800e15c:	4b09      	ldr	r3, [pc, #36]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e15e:	2200      	movs	r2, #0
 800e160:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e162:	4b08      	ldr	r3, [pc, #32]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e164:	2200      	movs	r2, #0
 800e166:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800e168:	4b06      	ldr	r3, [pc, #24]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e16e:	4b05      	ldr	r3, [pc, #20]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e170:	2200      	movs	r2, #0
 800e172:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800e174:	4b03      	ldr	r3, [pc, #12]	; (800e184 <MX_SDMMC2_SD_Init+0x38>)
 800e176:	2200      	movs	r2, #0
 800e178:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800e17a:	bf00      	nop
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	20000948 	.word	0x20000948
 800e188:	40011c00 	.word	0x40011c00

0800e18c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e192:	1d3b      	adds	r3, r7, #4
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e19c:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e19e:	4a16      	ldr	r2, [pc, #88]	; (800e1f8 <MX_TIM6_Init+0x6c>)
 800e1a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800e1a2:	4b14      	ldr	r3, [pc, #80]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1a4:	f242 720f 	movw	r2, #9999	; 0x270f
 800e1a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e1aa:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800e1b0:	4b10      	ldr	r3, [pc, #64]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1b2:	f242 720f 	movw	r2, #9999	; 0x270f
 800e1b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e1b8:	4b0e      	ldr	r3, [pc, #56]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e1be:	480d      	ldr	r0, [pc, #52]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1c0:	f7fa fab2 	bl	8008728 <HAL_TIM_Base_Init>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e1ca:	f000 f95d 	bl	800e488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e1d6:	1d3b      	adds	r3, r7, #4
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4806      	ldr	r0, [pc, #24]	; (800e1f4 <MX_TIM6_Init+0x68>)
 800e1dc:	f7fa fce2 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800e1e6:	f000 f94f 	bl	800e488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e1ea:	bf00      	nop
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20000b00 	.word	0x20000b00
 800e1f8:	40001000 	.word	0x40001000

0800e1fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800e202:	1d3b      	adds	r3, r7, #4
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	605a      	str	r2, [r3, #4]
 800e20a:	609a      	str	r2, [r3, #8]
 800e20c:	60da      	str	r2, [r3, #12]
 800e20e:	611a      	str	r2, [r3, #16]
 800e210:	615a      	str	r2, [r3, #20]
 800e212:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e214:	4b1e      	ldr	r3, [pc, #120]	; (800e290 <MX_FMC_Init+0x94>)
 800e216:	4a1f      	ldr	r2, [pc, #124]	; (800e294 <MX_FMC_Init+0x98>)
 800e218:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800e21a:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <MX_FMC_Init+0x94>)
 800e21c:	2201      	movs	r2, #1
 800e21e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800e220:	4b1b      	ldr	r3, [pc, #108]	; (800e290 <MX_FMC_Init+0x94>)
 800e222:	2200      	movs	r2, #0
 800e224:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800e226:	4b1a      	ldr	r3, [pc, #104]	; (800e290 <MX_FMC_Init+0x94>)
 800e228:	2208      	movs	r2, #8
 800e22a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800e22c:	4b18      	ldr	r3, [pc, #96]	; (800e290 <MX_FMC_Init+0x94>)
 800e22e:	2220      	movs	r2, #32
 800e230:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e232:	4b17      	ldr	r3, [pc, #92]	; (800e290 <MX_FMC_Init+0x94>)
 800e234:	2240      	movs	r2, #64	; 0x40
 800e236:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800e238:	4b15      	ldr	r3, [pc, #84]	; (800e290 <MX_FMC_Init+0x94>)
 800e23a:	2280      	movs	r2, #128	; 0x80
 800e23c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e23e:	4b14      	ldr	r3, [pc, #80]	; (800e290 <MX_FMC_Init+0x94>)
 800e240:	2200      	movs	r2, #0
 800e242:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800e244:	4b12      	ldr	r3, [pc, #72]	; (800e290 <MX_FMC_Init+0x94>)
 800e246:	2200      	movs	r2, #0
 800e248:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800e24a:	4b11      	ldr	r3, [pc, #68]	; (800e290 <MX_FMC_Init+0x94>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e250:	4b0f      	ldr	r3, [pc, #60]	; (800e290 <MX_FMC_Init+0x94>)
 800e252:	2200      	movs	r2, #0
 800e254:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800e256:	2310      	movs	r3, #16
 800e258:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800e25a:	2310      	movs	r3, #16
 800e25c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800e25e:	2310      	movs	r3, #16
 800e260:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800e262:	2310      	movs	r3, #16
 800e264:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800e266:	2310      	movs	r3, #16
 800e268:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800e26a:	2310      	movs	r3, #16
 800e26c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800e26e:	2310      	movs	r3, #16
 800e270:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800e272:	1d3b      	adds	r3, r7, #4
 800e274:	4619      	mov	r1, r3
 800e276:	4806      	ldr	r0, [pc, #24]	; (800e290 <MX_FMC_Init+0x94>)
 800e278:	f7fa f9d7 	bl	800862a <HAL_SDRAM_Init>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800e282:	f000 f901 	bl	800e488 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800e286:	bf00      	nop
 800e288:	3720      	adds	r7, #32
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	20000c08 	.word	0x20000c08
 800e294:	a0000140 	.word	0xa0000140

0800e298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08e      	sub	sp, #56	; 0x38
 800e29c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	605a      	str	r2, [r3, #4]
 800e2a8:	609a      	str	r2, [r3, #8]
 800e2aa:	60da      	str	r2, [r3, #12]
 800e2ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e2ae:	4b43      	ldr	r3, [pc, #268]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b2:	4a42      	ldr	r2, [pc, #264]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2b4:	f043 0302 	orr.w	r3, r3, #2
 800e2b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ba:	4b40      	ldr	r3, [pc, #256]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	623b      	str	r3, [r7, #32]
 800e2c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e2c6:	4b3d      	ldr	r3, [pc, #244]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ca:	4a3c      	ldr	r2, [pc, #240]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2cc:	f043 0308 	orr.w	r3, r3, #8
 800e2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e2d2:	4b3a      	ldr	r3, [pc, #232]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d6:	f003 0308 	and.w	r3, r3, #8
 800e2da:	61fb      	str	r3, [r7, #28]
 800e2dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e2de:	4b37      	ldr	r3, [pc, #220]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e2:	4a36      	ldr	r2, [pc, #216]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ea:	4b34      	ldr	r3, [pc, #208]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f2:	61bb      	str	r3, [r7, #24]
 800e2f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800e2f6:	4b31      	ldr	r3, [pc, #196]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fa:	4a30      	ldr	r2, [pc, #192]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e2fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e300:	6313      	str	r3, [r2, #48]	; 0x30
 800e302:	4b2e      	ldr	r3, [pc, #184]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e30e:	4b2b      	ldr	r3, [pc, #172]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	4a2a      	ldr	r2, [pc, #168]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e314:	f043 0320 	orr.w	r3, r3, #32
 800e318:	6313      	str	r3, [r2, #48]	; 0x30
 800e31a:	4b28      	ldr	r3, [pc, #160]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	f003 0320 	and.w	r3, r3, #32
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e326:	4b25      	ldr	r3, [pc, #148]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32a:	4a24      	ldr	r2, [pc, #144]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e330:	6313      	str	r3, [r2, #48]	; 0x30
 800e332:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e33e:	4b1f      	ldr	r3, [pc, #124]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e342:	4a1e      	ldr	r2, [pc, #120]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e344:	f043 0310 	orr.w	r3, r3, #16
 800e348:	6313      	str	r3, [r2, #48]	; 0x30
 800e34a:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34e:	f003 0310 	and.w	r3, r3, #16
 800e352:	60bb      	str	r3, [r7, #8]
 800e354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e356:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35a:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e35c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e360:	6313      	str	r3, [r2, #48]	; 0x30
 800e362:	4b16      	ldr	r3, [pc, #88]	; (800e3bc <MX_GPIO_Init+0x124>)
 800e364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e36a:	607b      	str	r3, [r7, #4]
 800e36c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e36e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e374:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <MX_GPIO_Init+0x128>)
 800e376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e37c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e380:	4619      	mov	r1, r3
 800e382:	4810      	ldr	r0, [pc, #64]	; (800e3c4 <MX_GPIO_Init+0x12c>)
 800e384:	f7f6 fc14 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800e388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e38e:	2300      	movs	r3, #0
 800e390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e392:	2300      	movs	r3, #0
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e39a:	4619      	mov	r1, r3
 800e39c:	4809      	ldr	r0, [pc, #36]	; (800e3c4 <MX_GPIO_Init+0x12c>)
 800e39e:	f7f6 fc07 	bl	8004bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	2028      	movs	r0, #40	; 0x28
 800e3a8:	f7f4 fef7 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e3ac:	2028      	movs	r0, #40	; 0x28
 800e3ae:	f7f4 ff10 	bl	80031d2 <HAL_NVIC_EnableIRQ>

}
 800e3b2:	bf00      	nop
 800e3b4:	3738      	adds	r7, #56	; 0x38
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	40023800 	.word	0x40023800
 800e3c0:	10110000 	.word	0x10110000
 800e3c4:	40022000 	.word	0x40022000

0800e3c8 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800e3d2:	f7f2 ff1e 	bl	8001212 <BSP_LCD_Init>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1fc      	bne.n	800e3da <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800e3e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f7f3 f8b1 	bl	800154c <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	f7f3 f959 	bl	80016a4 <BSP_LCD_Clear>

  /* Set LCD Example description */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800e3f2:	481e      	ldr	r0, [pc, #120]	; (800e46c <LCD_Config+0xa4>)
 800e3f4:	f7f3 f90a 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 800e3f8:	481d      	ldr	r0, [pc, #116]	; (800e470 <LCD_Config+0xa8>)
 800e3fa:	f7f3 f939 	bl	8001670 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"Copyright (c) Laufeyson 2019", CENTER_MODE);
 800e3fe:	f7f3 f899 	bl	8001534 <BSP_LCD_GetYSize>
 800e402:	4603      	mov	r3, r0
 800e404:	b29b      	uxth	r3, r3
 800e406:	3b14      	subs	r3, #20
 800e408:	b299      	uxth	r1, r3
 800e40a:	2301      	movs	r3, #1
 800e40c:	4a19      	ldr	r2, [pc, #100]	; (800e474 <LCD_Config+0xac>)
 800e40e:	2000      	movs	r0, #0
 800e410:	f7f3 f9b4 	bl	800177c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800e414:	4818      	ldr	r0, [pc, #96]	; (800e478 <LCD_Config+0xb0>)
 800e416:	f7f3 f8f9 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 50);
 800e41a:	f7f3 f87f 	bl	800151c <BSP_LCD_GetXSize>
 800e41e:	4603      	mov	r3, r0
 800e420:	b29a      	uxth	r2, r3
 800e422:	2332      	movs	r3, #50	; 0x32
 800e424:	2100      	movs	r1, #0
 800e426:	2000      	movs	r0, #0
 800e428:	f7f3 fbdc 	bl	8001be4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295
 800e430:	f7f3 f8ec 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 800e434:	4810      	ldr	r0, [pc, #64]	; (800e478 <LCD_Config+0xb0>)
 800e436:	f7f3 f901 	bl	800163c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800e43a:	4810      	ldr	r0, [pc, #64]	; (800e47c <LCD_Config+0xb4>)
 800e43c:	f7f3 f918 	bl	8001670 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);
 800e440:	2301      	movs	r3, #1
 800e442:	4a0f      	ldr	r2, [pc, #60]	; (800e480 <LCD_Config+0xb8>)
 800e444:	210a      	movs	r1, #10
 800e446:	2000      	movs	r0, #0
 800e448:	f7f3 f998 	bl	800177c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 800e44c:	480d      	ldr	r0, [pc, #52]	; (800e484 <LCD_Config+0xbc>)
 800e44e:	f7f3 f90f 	bl	8001670 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800e452:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800e456:	f7f3 f8d9 	bl	800160c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295
 800e45e:	f7f3 f8ed 	bl	800163c <BSP_LCD_SetBackColor>
}
 800e462:	bf00      	nop
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	ff000080 	.word	0xff000080
 800e470:	20000054 	.word	0x20000054
 800e474:	0800f734 	.word	0x0800f734
 800e478:	ffffa500 	.word	0xffffa500
 800e47c:	2000003c 	.word	0x2000003c
 800e480:	0800f53c 	.word	0x0800f53c
 800e484:	2000004c 	.word	0x2000004c

0800e488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		BSP_LED_Toggle(LED_RED);
 800e48c:	2000      	movs	r0, #0
 800e48e:	f7f2 fc6d 	bl	8000d6c <BSP_LED_Toggle>
		HAL_Delay(500);
 800e492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e496:	f7f4 fa43 	bl	8002920 <HAL_Delay>
		BSP_LED_Toggle(LED_RED);
 800e49a:	e7f7      	b.n	800e48c <Error_Handler+0x4>

0800e49c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <SD_CheckStatus+0x38>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e4ac:	f7fd fc92 	bl	800bdd4 <BSP_SD_GetCardState>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d107      	bne.n	800e4c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e4b6:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <SD_CheckStatus+0x38>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f023 0301 	bic.w	r3, r3, #1
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	4b04      	ldr	r3, [pc, #16]	; (800e4d4 <SD_CheckStatus+0x38>)
 800e4c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e4c6:	4b03      	ldr	r3, [pc, #12]	; (800e4d4 <SD_CheckStatus+0x38>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	b2db      	uxtb	r3, r3
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	20000078 	.word	0x20000078

0800e4d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e4e2:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <SD_initialize+0x38>)
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e4e8:	f7fd fc12 	bl	800bd10 <BSP_SD_Init>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d107      	bne.n	800e502 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff ffd1 	bl	800e49c <SD_CheckStatus>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	4b04      	ldr	r3, [pc, #16]	; (800e510 <SD_initialize+0x38>)
 800e500:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e502:	4b03      	ldr	r3, [pc, #12]	; (800e510 <SD_initialize+0x38>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	b2db      	uxtb	r3, r3
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	20000078 	.word	0x20000078

0800e514 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff ffbb 	bl	800e49c <SD_CheckStatus>
 800e526:	4603      	mov	r3, r0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e544:	f04f 33ff 	mov.w	r3, #4294967295
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	6879      	ldr	r1, [r7, #4]
 800e54c:	68b8      	ldr	r0, [r7, #8]
 800e54e:	f7fd fc05 	bl	800bd5c <BSP_SD_ReadBlocks>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d107      	bne.n	800e568 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e558:	bf00      	nop
 800e55a:	f7fd fc3b 	bl	800bdd4 <BSP_SD_GetCardState>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1fa      	bne.n	800e55a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e568:	7dfb      	ldrb	r3, [r7, #23]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b086      	sub	sp, #24
 800e576:	af00      	add	r7, sp, #0
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	603b      	str	r3, [r7, #0]
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e586:	f04f 33ff 	mov.w	r3, #4294967295
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	6879      	ldr	r1, [r7, #4]
 800e58e:	68b8      	ldr	r0, [r7, #8]
 800e590:	f7fd fc02 	bl	800bd98 <BSP_SD_WriteBlocks>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d107      	bne.n	800e5aa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e59a:	bf00      	nop
 800e59c:	f7fd fc1a 	bl	800bdd4 <BSP_SD_GetCardState>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1fa      	bne.n	800e59c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08c      	sub	sp, #48	; 0x30
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	603a      	str	r2, [r7, #0]
 800e5be:	71fb      	strb	r3, [r7, #7]
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e5ca:	4b25      	ldr	r3, [pc, #148]	; (800e660 <SD_ioctl+0xac>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	f003 0301 	and.w	r3, r3, #1
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <SD_ioctl+0x28>
 800e5d8:	2303      	movs	r3, #3
 800e5da:	e03c      	b.n	800e656 <SD_ioctl+0xa2>

  switch (cmd)
 800e5dc:	79bb      	ldrb	r3, [r7, #6]
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d834      	bhi.n	800e64c <SD_ioctl+0x98>
 800e5e2:	a201      	add	r2, pc, #4	; (adr r2, 800e5e8 <SD_ioctl+0x34>)
 800e5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e8:	0800e5f9 	.word	0x0800e5f9
 800e5ec:	0800e601 	.word	0x0800e601
 800e5f0:	0800e619 	.word	0x0800e619
 800e5f4:	0800e633 	.word	0x0800e633
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5fe:	e028      	b.n	800e652 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e600:	f107 030c 	add.w	r3, r7, #12
 800e604:	4618      	mov	r0, r3
 800e606:	f7fd fbf5 	bl	800bdf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e616:	e01c      	b.n	800e652 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd fbe9 	bl	800bdf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	b29a      	uxth	r2, r3
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e62a:	2300      	movs	r3, #0
 800e62c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e630:	e00f      	b.n	800e652 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e632:	f107 030c 	add.w	r3, r7, #12
 800e636:	4618      	mov	r0, r3
 800e638:	f7fd fbdc 	bl	800bdf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	0a5a      	lsrs	r2, r3, #9
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e64a:	e002      	b.n	800e652 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e64c:	2304      	movs	r3, #4
 800e64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e656:	4618      	mov	r0, r3
 800e658:	3730      	adds	r7, #48	; 0x30
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20000078 	.word	0x20000078

0800e664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e66a:	4b0f      	ldr	r3, [pc, #60]	; (800e6a8 <HAL_MspInit+0x44>)
 800e66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66e:	4a0e      	ldr	r2, [pc, #56]	; (800e6a8 <HAL_MspInit+0x44>)
 800e670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e674:	6413      	str	r3, [r2, #64]	; 0x40
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <HAL_MspInit+0x44>)
 800e678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e67e:	607b      	str	r3, [r7, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e682:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <HAL_MspInit+0x44>)
 800e684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e686:	4a08      	ldr	r2, [pc, #32]	; (800e6a8 <HAL_MspInit+0x44>)
 800e688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e68c:	6453      	str	r3, [r2, #68]	; 0x44
 800e68e:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <HAL_MspInit+0x44>)
 800e690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e696:	603b      	str	r3, [r7, #0]
 800e698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	40023800 	.word	0x40023800

0800e6ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a0a      	ldr	r2, [pc, #40]	; (800e6e4 <HAL_ADC_MspInit+0x38>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d10b      	bne.n	800e6d6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <HAL_ADC_MspInit+0x3c>)
 800e6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c2:	4a09      	ldr	r2, [pc, #36]	; (800e6e8 <HAL_ADC_MspInit+0x3c>)
 800e6c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6c8:	6453      	str	r3, [r2, #68]	; 0x44
 800e6ca:	4b07      	ldr	r3, [pc, #28]	; (800e6e8 <HAL_ADC_MspInit+0x3c>)
 800e6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e6d6:	bf00      	nop
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	40012000 	.word	0x40012000
 800e6e8:	40023800 	.word	0x40023800

0800e6ec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a0a      	ldr	r2, [pc, #40]	; (800e724 <HAL_DMA2D_MspInit+0x38>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d10b      	bne.n	800e716 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <HAL_DMA2D_MspInit+0x3c>)
 800e700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e702:	4a09      	ldr	r2, [pc, #36]	; (800e728 <HAL_DMA2D_MspInit+0x3c>)
 800e704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e708:	6313      	str	r3, [r2, #48]	; 0x30
 800e70a:	4b07      	ldr	r3, [pc, #28]	; (800e728 <HAL_DMA2D_MspInit+0x3c>)
 800e70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	4002b000 	.word	0x4002b000
 800e728:	40023800 	.word	0x40023800

0800e72c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08a      	sub	sp, #40	; 0x28
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e734:	f107 0314 	add.w	r3, r7, #20
 800e738:	2200      	movs	r2, #0
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	605a      	str	r2, [r3, #4]
 800e73e:	609a      	str	r2, [r3, #8]
 800e740:	60da      	str	r2, [r3, #12]
 800e742:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a17      	ldr	r2, [pc, #92]	; (800e7a8 <HAL_DSI_MspInit+0x7c>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d127      	bne.n	800e79e <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800e74e:	4b17      	ldr	r3, [pc, #92]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e752:	4a16      	ldr	r2, [pc, #88]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e758:	6453      	str	r3, [r2, #68]	; 0x44
 800e75a:	4b14      	ldr	r3, [pc, #80]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e75e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e766:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76a:	4a10      	ldr	r2, [pc, #64]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e76c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e770:	6313      	str	r3, [r2, #48]	; 0x30
 800e772:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <HAL_DSI_MspInit+0x80>)
 800e774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e77e:	2304      	movs	r3, #4
 800e780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e782:	2302      	movs	r3, #2
 800e784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e786:	2300      	movs	r3, #0
 800e788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e78a:	2300      	movs	r3, #0
 800e78c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800e78e:	230d      	movs	r3, #13
 800e790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e792:	f107 0314 	add.w	r3, r7, #20
 800e796:	4619      	mov	r1, r3
 800e798:	4805      	ldr	r0, [pc, #20]	; (800e7b0 <HAL_DSI_MspInit+0x84>)
 800e79a:	f7f6 fa09 	bl	8004bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800e79e:	bf00      	nop
 800e7a0:	3728      	adds	r7, #40	; 0x28
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	40016c00 	.word	0x40016c00
 800e7ac:	40023800 	.word	0x40023800
 800e7b0:	40022400 	.word	0x40022400

0800e7b4 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a08      	ldr	r2, [pc, #32]	; (800e7e4 <HAL_DSI_MspDeInit+0x30>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d109      	bne.n	800e7da <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800e7c6:	4b08      	ldr	r3, [pc, #32]	; (800e7e8 <HAL_DSI_MspDeInit+0x34>)
 800e7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ca:	4a07      	ldr	r2, [pc, #28]	; (800e7e8 <HAL_DSI_MspDeInit+0x34>)
 800e7cc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e7d0:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800e7d2:	2104      	movs	r1, #4
 800e7d4:	4805      	ldr	r0, [pc, #20]	; (800e7ec <HAL_DSI_MspDeInit+0x38>)
 800e7d6:	f7f6 fb95 	bl	8004f04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	40016c00 	.word	0x40016c00
 800e7e8:	40023800 	.word	0x40023800
 800e7ec:	40022400 	.word	0x40022400

0800e7f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a0a      	ldr	r2, [pc, #40]	; (800e828 <HAL_LTDC_MspInit+0x38>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d10b      	bne.n	800e81a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e802:	4b0a      	ldr	r3, [pc, #40]	; (800e82c <HAL_LTDC_MspInit+0x3c>)
 800e804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e806:	4a09      	ldr	r2, [pc, #36]	; (800e82c <HAL_LTDC_MspInit+0x3c>)
 800e808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e80c:	6453      	str	r3, [r2, #68]	; 0x44
 800e80e:	4b07      	ldr	r3, [pc, #28]	; (800e82c <HAL_LTDC_MspInit+0x3c>)
 800e810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e81a:	bf00      	nop
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	40016800 	.word	0x40016800
 800e82c:	40023800 	.word	0x40023800

0800e830 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b08c      	sub	sp, #48	; 0x30
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e838:	f107 031c 	add.w	r3, r7, #28
 800e83c:	2200      	movs	r2, #0
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	605a      	str	r2, [r3, #4]
 800e842:	609a      	str	r2, [r3, #8]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a33      	ldr	r2, [pc, #204]	; (800e91c <HAL_SD_MspInit+0xec>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d160      	bne.n	800e914 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800e852:	4b33      	ldr	r3, [pc, #204]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e856:	4a32      	ldr	r2, [pc, #200]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e85c:	6453      	str	r3, [r2, #68]	; 0x44
 800e85e:	4b30      	ldr	r3, [pc, #192]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e866:	61bb      	str	r3, [r7, #24]
 800e868:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e86a:	4b2d      	ldr	r3, [pc, #180]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e86e:	4a2c      	ldr	r2, [pc, #176]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e870:	f043 0302 	orr.w	r3, r3, #2
 800e874:	6313      	str	r3, [r2, #48]	; 0x30
 800e876:	4b2a      	ldr	r3, [pc, #168]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87a:	f003 0302 	and.w	r3, r3, #2
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e882:	4b27      	ldr	r3, [pc, #156]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e886:	4a26      	ldr	r2, [pc, #152]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e888:	f043 0308 	orr.w	r3, r3, #8
 800e88c:	6313      	str	r3, [r2, #48]	; 0x30
 800e88e:	4b24      	ldr	r3, [pc, #144]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e892:	f003 0308 	and.w	r3, r3, #8
 800e896:	613b      	str	r3, [r7, #16]
 800e898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e89a:	4b21      	ldr	r3, [pc, #132]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	4a20      	ldr	r2, [pc, #128]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8a6:	4b1e      	ldr	r3, [pc, #120]	; (800e920 <HAL_SD_MspInit+0xf0>)
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800e8b2:	2318      	movs	r3, #24
 800e8b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8c6:	f107 031c 	add.w	r3, r7, #28
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4815      	ldr	r0, [pc, #84]	; (800e924 <HAL_SD_MspInit+0xf4>)
 800e8ce:	f7f6 f96f 	bl	8004bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800e8d2:	23c0      	movs	r3, #192	; 0xc0
 800e8d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e8e2:	230b      	movs	r3, #11
 800e8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e8e6:	f107 031c 	add.w	r3, r7, #28
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	480e      	ldr	r0, [pc, #56]	; (800e928 <HAL_SD_MspInit+0xf8>)
 800e8ee:	f7f6 f95f 	bl	8004bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800e8f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e8f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f8:	2302      	movs	r3, #2
 800e8fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e900:	2303      	movs	r3, #3
 800e902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e904:	230b      	movs	r3, #11
 800e906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e908:	f107 031c 	add.w	r3, r7, #28
 800e90c:	4619      	mov	r1, r3
 800e90e:	4807      	ldr	r0, [pc, #28]	; (800e92c <HAL_SD_MspInit+0xfc>)
 800e910:	f7f6 f94e 	bl	8004bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800e914:	bf00      	nop
 800e916:	3730      	adds	r7, #48	; 0x30
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	40011c00 	.word	0x40011c00
 800e920:	40023800 	.word	0x40023800
 800e924:	40020400 	.word	0x40020400
 800e928:	40020c00 	.word	0x40020c00
 800e92c:	40021800 	.word	0x40021800

0800e930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a0d      	ldr	r2, [pc, #52]	; (800e974 <HAL_TIM_Base_MspInit+0x44>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d113      	bne.n	800e96a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e942:	4b0d      	ldr	r3, [pc, #52]	; (800e978 <HAL_TIM_Base_MspInit+0x48>)
 800e944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e946:	4a0c      	ldr	r2, [pc, #48]	; (800e978 <HAL_TIM_Base_MspInit+0x48>)
 800e948:	f043 0310 	orr.w	r3, r3, #16
 800e94c:	6413      	str	r3, [r2, #64]	; 0x40
 800e94e:	4b0a      	ldr	r3, [pc, #40]	; (800e978 <HAL_TIM_Base_MspInit+0x48>)
 800e950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e952:	f003 0310 	and.w	r3, r3, #16
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e95a:	2200      	movs	r2, #0
 800e95c:	2100      	movs	r1, #0
 800e95e:	2036      	movs	r0, #54	; 0x36
 800e960:	f7f4 fc1b 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e964:	2036      	movs	r0, #54	; 0x36
 800e966:	f7f4 fc34 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e96a:	bf00      	nop
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	40001000 	.word	0x40001000
 800e978:	40023800 	.word	0x40023800

0800e97c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800e982:	1d3b      	adds	r3, r7, #4
 800e984:	2200      	movs	r2, #0
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	605a      	str	r2, [r3, #4]
 800e98a:	609a      	str	r2, [r3, #8]
 800e98c:	60da      	str	r2, [r3, #12]
 800e98e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800e990:	4b43      	ldr	r3, [pc, #268]	; (800eaa0 <HAL_FMC_MspInit+0x124>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d17e      	bne.n	800ea96 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800e998:	4b41      	ldr	r3, [pc, #260]	; (800eaa0 <HAL_FMC_MspInit+0x124>)
 800e99a:	2201      	movs	r2, #1
 800e99c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e99e:	4b41      	ldr	r3, [pc, #260]	; (800eaa4 <HAL_FMC_MspInit+0x128>)
 800e9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a2:	4a40      	ldr	r2, [pc, #256]	; (800eaa4 <HAL_FMC_MspInit+0x128>)
 800e9a4:	f043 0301 	orr.w	r3, r3, #1
 800e9a8:	6393      	str	r3, [r2, #56]	; 0x38
 800e9aa:	4b3e      	ldr	r3, [pc, #248]	; (800eaa4 <HAL_FMC_MspInit+0x128>)
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	603b      	str	r3, [r7, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800e9b6:	2360      	movs	r3, #96	; 0x60
 800e9b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ba:	2302      	movs	r3, #2
 800e9bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9c6:	230c      	movs	r3, #12
 800e9c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9ca:	1d3b      	adds	r3, r7, #4
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4836      	ldr	r0, [pc, #216]	; (800eaa8 <HAL_FMC_MspInit+0x12c>)
 800e9d0:	f7f6 f8ee 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800e9d4:	f248 1337 	movw	r3, #33079	; 0x8137
 800e9d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9da:	2302      	movs	r3, #2
 800e9dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9e6:	230c      	movs	r3, #12
 800e9e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e9ea:	1d3b      	adds	r3, r7, #4
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	482f      	ldr	r0, [pc, #188]	; (800eaac <HAL_FMC_MspInit+0x130>)
 800e9f0:	f7f6 f8de 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800e9f4:	f24c 7303 	movw	r3, #50947	; 0xc703
 800e9f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea02:	2303      	movs	r3, #3
 800ea04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ea06:	230c      	movs	r3, #12
 800ea08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ea0a:	1d3b      	adds	r3, r7, #4
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4828      	ldr	r0, [pc, #160]	; (800eab0 <HAL_FMC_MspInit+0x134>)
 800ea10:	f7f6 f8ce 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 800ea14:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800ea18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea1a:	2302      	movs	r3, #2
 800ea1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea22:	2303      	movs	r3, #3
 800ea24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ea26:	230c      	movs	r3, #12
 800ea28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ea2a:	1d3b      	adds	r3, r7, #4
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	4821      	ldr	r0, [pc, #132]	; (800eab4 <HAL_FMC_MspInit+0x138>)
 800ea30:	f7f6 f8be 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800ea34:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ea38:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea42:	2303      	movs	r3, #3
 800ea44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ea46:	230c      	movs	r3, #12
 800ea48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ea4a:	1d3b      	adds	r3, r7, #4
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	481a      	ldr	r0, [pc, #104]	; (800eab8 <HAL_FMC_MspInit+0x13c>)
 800ea50:	f7f6 f8ae 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800ea54:	f64f 7320 	movw	r3, #65312	; 0xff20
 800ea58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea62:	2303      	movs	r3, #3
 800ea64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ea66:	230c      	movs	r3, #12
 800ea68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ea6a:	1d3b      	adds	r3, r7, #4
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4813      	ldr	r0, [pc, #76]	; (800eabc <HAL_FMC_MspInit+0x140>)
 800ea70:	f7f6 f89e 	bl	8004bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 800ea74:	f64f 7380 	movw	r3, #65408	; 0xff80
 800ea78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea82:	2303      	movs	r3, #3
 800ea84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ea86:	230c      	movs	r3, #12
 800ea88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ea8a:	1d3b      	adds	r3, r7, #4
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	480c      	ldr	r0, [pc, #48]	; (800eac0 <HAL_FMC_MspInit+0x144>)
 800ea90:	f7f6 f88e 	bl	8004bb0 <HAL_GPIO_Init>
 800ea94:	e000      	b.n	800ea98 <HAL_FMC_MspInit+0x11c>
    return;
 800ea96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	2000035c 	.word	0x2000035c
 800eaa4:	40023800 	.word	0x40023800
 800eaa8:	40020400 	.word	0x40020400
 800eaac:	40021800 	.word	0x40021800
 800eab0:	40020c00 	.word	0x40020c00
 800eab4:	40022000 	.word	0x40022000
 800eab8:	40021400 	.word	0x40021400
 800eabc:	40021c00 	.word	0x40021c00
 800eac0:	40021000 	.word	0x40021000

0800eac4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800eacc:	f7ff ff56 	bl	800e97c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ead8:	b480      	push	{r7}
 800eada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800eadc:	bf00      	nop
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eae6:	b480      	push	{r7}
 800eae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eaea:	e7fe      	b.n	800eaea <HardFault_Handler+0x4>

0800eaec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800eaec:	b480      	push	{r7}
 800eaee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800eaf0:	e7fe      	b.n	800eaf0 <MemManage_Handler+0x4>

0800eaf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800eaf6:	e7fe      	b.n	800eaf6 <BusFault_Handler+0x4>

0800eaf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800eafc:	e7fe      	b.n	800eafc <UsageFault_Handler+0x4>

0800eafe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eafe:	b480      	push	{r7}
 800eb00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800eb02:	bf00      	nop
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800eb10:	bf00      	nop
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800eb1e:	bf00      	nop
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800eb2c:	f7f3 fed8 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800eb30:	bf00      	nop
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800eb38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800eb3c:	f7f6 fb38 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800eb40:	bf00      	nop
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800eb48:	4802      	ldr	r0, [pc, #8]	; (800eb54 <TIM6_DAC_IRQHandler+0x10>)
 800eb4a:	f7f9 fe43 	bl	80087d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800eb4e:	bf00      	nop
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20000b00 	.word	0x20000b00

0800eb58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800eb60:	4b11      	ldr	r3, [pc, #68]	; (800eba8 <_sbrk+0x50>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <_sbrk+0x16>
		heap_end = &end;
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <_sbrk+0x50>)
 800eb6a:	4a10      	ldr	r2, [pc, #64]	; (800ebac <_sbrk+0x54>)
 800eb6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <_sbrk+0x50>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800eb74:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <_sbrk+0x50>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	466a      	mov	r2, sp
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d907      	bls.n	800eb92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800eb82:	f000 f875 	bl	800ec70 <__errno>
 800eb86:	4602      	mov	r2, r0
 800eb88:	230c      	movs	r3, #12
 800eb8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800eb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb90:	e006      	b.n	800eba0 <_sbrk+0x48>
	}

	heap_end += incr;
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <_sbrk+0x50>)
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4413      	add	r3, r2
 800eb9a:	4a03      	ldr	r2, [pc, #12]	; (800eba8 <_sbrk+0x50>)
 800eb9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	20000360 	.word	0x20000360
 800ebac:	20000c40 	.word	0x20000c40

0800ebb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ebb4:	4b15      	ldr	r3, [pc, #84]	; (800ec0c <SystemInit+0x5c>)
 800ebb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebba:	4a14      	ldr	r2, [pc, #80]	; (800ec0c <SystemInit+0x5c>)
 800ebbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ebc4:	4b12      	ldr	r3, [pc, #72]	; (800ec10 <SystemInit+0x60>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a11      	ldr	r2, [pc, #68]	; (800ec10 <SystemInit+0x60>)
 800ebca:	f043 0301 	orr.w	r3, r3, #1
 800ebce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ebd0:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <SystemInit+0x60>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ebd6:	4b0e      	ldr	r3, [pc, #56]	; (800ec10 <SystemInit+0x60>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	490d      	ldr	r1, [pc, #52]	; (800ec10 <SystemInit+0x60>)
 800ebdc:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <SystemInit+0x64>)
 800ebde:	4013      	ands	r3, r2
 800ebe0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <SystemInit+0x60>)
 800ebe4:	4a0c      	ldr	r2, [pc, #48]	; (800ec18 <SystemInit+0x68>)
 800ebe6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ebe8:	4b09      	ldr	r3, [pc, #36]	; (800ec10 <SystemInit+0x60>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a08      	ldr	r2, [pc, #32]	; (800ec10 <SystemInit+0x60>)
 800ebee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ebf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ebf4:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <SystemInit+0x60>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ebfa:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <SystemInit+0x5c>)
 800ebfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ec00:	609a      	str	r2, [r3, #8]
#endif
}
 800ec02:	bf00      	nop
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	e000ed00 	.word	0xe000ed00
 800ec10:	40023800 	.word	0x40023800
 800ec14:	fef6ffff 	.word	0xfef6ffff
 800ec18:	24003010 	.word	0x24003010

0800ec1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ec1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ec20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ec22:	e003      	b.n	800ec2c <LoopCopyDataInit>

0800ec24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ec24:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ec26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ec28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ec2a:	3104      	adds	r1, #4

0800ec2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ec2c:	480b      	ldr	r0, [pc, #44]	; (800ec5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ec30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ec32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ec34:	d3f6      	bcc.n	800ec24 <CopyDataInit>
  ldr  r2, =_sbss
 800ec36:	4a0b      	ldr	r2, [pc, #44]	; (800ec64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ec38:	e002      	b.n	800ec40 <LoopFillZerobss>

0800ec3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ec3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ec3c:	f842 3b04 	str.w	r3, [r2], #4

0800ec40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ec40:	4b09      	ldr	r3, [pc, #36]	; (800ec68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ec42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ec44:	d3f9      	bcc.n	800ec3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ec46:	f7ff ffb3 	bl	800ebb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec4a:	f000 f817 	bl	800ec7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec4e:	f7fe fe51 	bl	800d8f4 <main>
  bx  lr    
 800ec52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ec54:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800ec58:	0801343c 	.word	0x0801343c
  ldr  r0, =_sdata
 800ec5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ec60:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 800ec64:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 800ec68:	20000c40 	.word	0x20000c40

0800ec6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec6c:	e7fe      	b.n	800ec6c <ADC_IRQHandler>
	...

0800ec70 <__errno>:
 800ec70:	4b01      	ldr	r3, [pc, #4]	; (800ec78 <__errno+0x8>)
 800ec72:	6818      	ldr	r0, [r3, #0]
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	20000080 	.word	0x20000080

0800ec7c <__libc_init_array>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	4e0d      	ldr	r6, [pc, #52]	; (800ecb4 <__libc_init_array+0x38>)
 800ec80:	4c0d      	ldr	r4, [pc, #52]	; (800ecb8 <__libc_init_array+0x3c>)
 800ec82:	1ba4      	subs	r4, r4, r6
 800ec84:	10a4      	asrs	r4, r4, #2
 800ec86:	2500      	movs	r5, #0
 800ec88:	42a5      	cmp	r5, r4
 800ec8a:	d109      	bne.n	800eca0 <__libc_init_array+0x24>
 800ec8c:	4e0b      	ldr	r6, [pc, #44]	; (800ecbc <__libc_init_array+0x40>)
 800ec8e:	4c0c      	ldr	r4, [pc, #48]	; (800ecc0 <__libc_init_array+0x44>)
 800ec90:	f000 fc26 	bl	800f4e0 <_init>
 800ec94:	1ba4      	subs	r4, r4, r6
 800ec96:	10a4      	asrs	r4, r4, #2
 800ec98:	2500      	movs	r5, #0
 800ec9a:	42a5      	cmp	r5, r4
 800ec9c:	d105      	bne.n	800ecaa <__libc_init_array+0x2e>
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}
 800eca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eca4:	4798      	blx	r3
 800eca6:	3501      	adds	r5, #1
 800eca8:	e7ee      	b.n	800ec88 <__libc_init_array+0xc>
 800ecaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ecae:	4798      	blx	r3
 800ecb0:	3501      	adds	r5, #1
 800ecb2:	e7f2      	b.n	800ec9a <__libc_init_array+0x1e>
 800ecb4:	08013434 	.word	0x08013434
 800ecb8:	08013434 	.word	0x08013434
 800ecbc:	08013434 	.word	0x08013434
 800ecc0:	08013438 	.word	0x08013438

0800ecc4 <memset>:
 800ecc4:	4402      	add	r2, r0
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d100      	bne.n	800ecce <memset+0xa>
 800eccc:	4770      	bx	lr
 800ecce:	f803 1b01 	strb.w	r1, [r3], #1
 800ecd2:	e7f9      	b.n	800ecc8 <memset+0x4>

0800ecd4 <siprintf>:
 800ecd4:	b40e      	push	{r1, r2, r3}
 800ecd6:	b500      	push	{lr}
 800ecd8:	b09c      	sub	sp, #112	; 0x70
 800ecda:	ab1d      	add	r3, sp, #116	; 0x74
 800ecdc:	9002      	str	r0, [sp, #8]
 800ecde:	9006      	str	r0, [sp, #24]
 800ece0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ece4:	4809      	ldr	r0, [pc, #36]	; (800ed0c <siprintf+0x38>)
 800ece6:	9107      	str	r1, [sp, #28]
 800ece8:	9104      	str	r1, [sp, #16]
 800ecea:	4909      	ldr	r1, [pc, #36]	; (800ed10 <siprintf+0x3c>)
 800ecec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf0:	9105      	str	r1, [sp, #20]
 800ecf2:	6800      	ldr	r0, [r0, #0]
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	a902      	add	r1, sp, #8
 800ecf8:	f000 f866 	bl	800edc8 <_svfiprintf_r>
 800ecfc:	9b02      	ldr	r3, [sp, #8]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	701a      	strb	r2, [r3, #0]
 800ed02:	b01c      	add	sp, #112	; 0x70
 800ed04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed08:	b003      	add	sp, #12
 800ed0a:	4770      	bx	lr
 800ed0c:	20000080 	.word	0x20000080
 800ed10:	ffff0208 	.word	0xffff0208

0800ed14 <__ssputs_r>:
 800ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed18:	688e      	ldr	r6, [r1, #8]
 800ed1a:	429e      	cmp	r6, r3
 800ed1c:	4682      	mov	sl, r0
 800ed1e:	460c      	mov	r4, r1
 800ed20:	4690      	mov	r8, r2
 800ed22:	4699      	mov	r9, r3
 800ed24:	d837      	bhi.n	800ed96 <__ssputs_r+0x82>
 800ed26:	898a      	ldrh	r2, [r1, #12]
 800ed28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed2c:	d031      	beq.n	800ed92 <__ssputs_r+0x7e>
 800ed2e:	6825      	ldr	r5, [r4, #0]
 800ed30:	6909      	ldr	r1, [r1, #16]
 800ed32:	1a6f      	subs	r7, r5, r1
 800ed34:	6965      	ldr	r5, [r4, #20]
 800ed36:	2302      	movs	r3, #2
 800ed38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed3c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ed40:	f109 0301 	add.w	r3, r9, #1
 800ed44:	443b      	add	r3, r7
 800ed46:	429d      	cmp	r5, r3
 800ed48:	bf38      	it	cc
 800ed4a:	461d      	movcc	r5, r3
 800ed4c:	0553      	lsls	r3, r2, #21
 800ed4e:	d530      	bpl.n	800edb2 <__ssputs_r+0x9e>
 800ed50:	4629      	mov	r1, r5
 800ed52:	f000 fb2b 	bl	800f3ac <_malloc_r>
 800ed56:	4606      	mov	r6, r0
 800ed58:	b950      	cbnz	r0, 800ed70 <__ssputs_r+0x5c>
 800ed5a:	230c      	movs	r3, #12
 800ed5c:	f8ca 3000 	str.w	r3, [sl]
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed66:	81a3      	strh	r3, [r4, #12]
 800ed68:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed70:	463a      	mov	r2, r7
 800ed72:	6921      	ldr	r1, [r4, #16]
 800ed74:	f000 faa8 	bl	800f2c8 <memcpy>
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed82:	81a3      	strh	r3, [r4, #12]
 800ed84:	6126      	str	r6, [r4, #16]
 800ed86:	6165      	str	r5, [r4, #20]
 800ed88:	443e      	add	r6, r7
 800ed8a:	1bed      	subs	r5, r5, r7
 800ed8c:	6026      	str	r6, [r4, #0]
 800ed8e:	60a5      	str	r5, [r4, #8]
 800ed90:	464e      	mov	r6, r9
 800ed92:	454e      	cmp	r6, r9
 800ed94:	d900      	bls.n	800ed98 <__ssputs_r+0x84>
 800ed96:	464e      	mov	r6, r9
 800ed98:	4632      	mov	r2, r6
 800ed9a:	4641      	mov	r1, r8
 800ed9c:	6820      	ldr	r0, [r4, #0]
 800ed9e:	f000 fa9e 	bl	800f2de <memmove>
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	1b9b      	subs	r3, r3, r6
 800eda6:	60a3      	str	r3, [r4, #8]
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	441e      	add	r6, r3
 800edac:	6026      	str	r6, [r4, #0]
 800edae:	2000      	movs	r0, #0
 800edb0:	e7dc      	b.n	800ed6c <__ssputs_r+0x58>
 800edb2:	462a      	mov	r2, r5
 800edb4:	f000 fb54 	bl	800f460 <_realloc_r>
 800edb8:	4606      	mov	r6, r0
 800edba:	2800      	cmp	r0, #0
 800edbc:	d1e2      	bne.n	800ed84 <__ssputs_r+0x70>
 800edbe:	6921      	ldr	r1, [r4, #16]
 800edc0:	4650      	mov	r0, sl
 800edc2:	f000 faa5 	bl	800f310 <_free_r>
 800edc6:	e7c8      	b.n	800ed5a <__ssputs_r+0x46>

0800edc8 <_svfiprintf_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	461d      	mov	r5, r3
 800edce:	898b      	ldrh	r3, [r1, #12]
 800edd0:	061f      	lsls	r7, r3, #24
 800edd2:	b09d      	sub	sp, #116	; 0x74
 800edd4:	4680      	mov	r8, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	4616      	mov	r6, r2
 800edda:	d50f      	bpl.n	800edfc <_svfiprintf_r+0x34>
 800eddc:	690b      	ldr	r3, [r1, #16]
 800edde:	b96b      	cbnz	r3, 800edfc <_svfiprintf_r+0x34>
 800ede0:	2140      	movs	r1, #64	; 0x40
 800ede2:	f000 fae3 	bl	800f3ac <_malloc_r>
 800ede6:	6020      	str	r0, [r4, #0]
 800ede8:	6120      	str	r0, [r4, #16]
 800edea:	b928      	cbnz	r0, 800edf8 <_svfiprintf_r+0x30>
 800edec:	230c      	movs	r3, #12
 800edee:	f8c8 3000 	str.w	r3, [r8]
 800edf2:	f04f 30ff 	mov.w	r0, #4294967295
 800edf6:	e0c8      	b.n	800ef8a <_svfiprintf_r+0x1c2>
 800edf8:	2340      	movs	r3, #64	; 0x40
 800edfa:	6163      	str	r3, [r4, #20]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ee00:	2320      	movs	r3, #32
 800ee02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee06:	2330      	movs	r3, #48	; 0x30
 800ee08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee0c:	9503      	str	r5, [sp, #12]
 800ee0e:	f04f 0b01 	mov.w	fp, #1
 800ee12:	4637      	mov	r7, r6
 800ee14:	463d      	mov	r5, r7
 800ee16:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee1a:	b10b      	cbz	r3, 800ee20 <_svfiprintf_r+0x58>
 800ee1c:	2b25      	cmp	r3, #37	; 0x25
 800ee1e:	d13e      	bne.n	800ee9e <_svfiprintf_r+0xd6>
 800ee20:	ebb7 0a06 	subs.w	sl, r7, r6
 800ee24:	d00b      	beq.n	800ee3e <_svfiprintf_r+0x76>
 800ee26:	4653      	mov	r3, sl
 800ee28:	4632      	mov	r2, r6
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	4640      	mov	r0, r8
 800ee2e:	f7ff ff71 	bl	800ed14 <__ssputs_r>
 800ee32:	3001      	adds	r0, #1
 800ee34:	f000 80a4 	beq.w	800ef80 <_svfiprintf_r+0x1b8>
 800ee38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee3a:	4453      	add	r3, sl
 800ee3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee3e:	783b      	ldrb	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f000 809d 	beq.w	800ef80 <_svfiprintf_r+0x1b8>
 800ee46:	2300      	movs	r3, #0
 800ee48:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	9307      	str	r3, [sp, #28]
 800ee54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee58:	931a      	str	r3, [sp, #104]	; 0x68
 800ee5a:	462f      	mov	r7, r5
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ee62:	4850      	ldr	r0, [pc, #320]	; (800efa4 <_svfiprintf_r+0x1dc>)
 800ee64:	f7f1 f9f4 	bl	8000250 <memchr>
 800ee68:	9b04      	ldr	r3, [sp, #16]
 800ee6a:	b9d0      	cbnz	r0, 800eea2 <_svfiprintf_r+0xda>
 800ee6c:	06d9      	lsls	r1, r3, #27
 800ee6e:	bf44      	itt	mi
 800ee70:	2220      	movmi	r2, #32
 800ee72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee76:	071a      	lsls	r2, r3, #28
 800ee78:	bf44      	itt	mi
 800ee7a:	222b      	movmi	r2, #43	; 0x2b
 800ee7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee80:	782a      	ldrb	r2, [r5, #0]
 800ee82:	2a2a      	cmp	r2, #42	; 0x2a
 800ee84:	d015      	beq.n	800eeb2 <_svfiprintf_r+0xea>
 800ee86:	9a07      	ldr	r2, [sp, #28]
 800ee88:	462f      	mov	r7, r5
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	250a      	movs	r5, #10
 800ee8e:	4639      	mov	r1, r7
 800ee90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee94:	3b30      	subs	r3, #48	; 0x30
 800ee96:	2b09      	cmp	r3, #9
 800ee98:	d94d      	bls.n	800ef36 <_svfiprintf_r+0x16e>
 800ee9a:	b1b8      	cbz	r0, 800eecc <_svfiprintf_r+0x104>
 800ee9c:	e00f      	b.n	800eebe <_svfiprintf_r+0xf6>
 800ee9e:	462f      	mov	r7, r5
 800eea0:	e7b8      	b.n	800ee14 <_svfiprintf_r+0x4c>
 800eea2:	4a40      	ldr	r2, [pc, #256]	; (800efa4 <_svfiprintf_r+0x1dc>)
 800eea4:	1a80      	subs	r0, r0, r2
 800eea6:	fa0b f000 	lsl.w	r0, fp, r0
 800eeaa:	4318      	orrs	r0, r3
 800eeac:	9004      	str	r0, [sp, #16]
 800eeae:	463d      	mov	r5, r7
 800eeb0:	e7d3      	b.n	800ee5a <_svfiprintf_r+0x92>
 800eeb2:	9a03      	ldr	r2, [sp, #12]
 800eeb4:	1d11      	adds	r1, r2, #4
 800eeb6:	6812      	ldr	r2, [r2, #0]
 800eeb8:	9103      	str	r1, [sp, #12]
 800eeba:	2a00      	cmp	r2, #0
 800eebc:	db01      	blt.n	800eec2 <_svfiprintf_r+0xfa>
 800eebe:	9207      	str	r2, [sp, #28]
 800eec0:	e004      	b.n	800eecc <_svfiprintf_r+0x104>
 800eec2:	4252      	negs	r2, r2
 800eec4:	f043 0302 	orr.w	r3, r3, #2
 800eec8:	9207      	str	r2, [sp, #28]
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	783b      	ldrb	r3, [r7, #0]
 800eece:	2b2e      	cmp	r3, #46	; 0x2e
 800eed0:	d10c      	bne.n	800eeec <_svfiprintf_r+0x124>
 800eed2:	787b      	ldrb	r3, [r7, #1]
 800eed4:	2b2a      	cmp	r3, #42	; 0x2a
 800eed6:	d133      	bne.n	800ef40 <_svfiprintf_r+0x178>
 800eed8:	9b03      	ldr	r3, [sp, #12]
 800eeda:	1d1a      	adds	r2, r3, #4
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	9203      	str	r2, [sp, #12]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	bfb8      	it	lt
 800eee4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eee8:	3702      	adds	r7, #2
 800eeea:	9305      	str	r3, [sp, #20]
 800eeec:	4d2e      	ldr	r5, [pc, #184]	; (800efa8 <_svfiprintf_r+0x1e0>)
 800eeee:	7839      	ldrb	r1, [r7, #0]
 800eef0:	2203      	movs	r2, #3
 800eef2:	4628      	mov	r0, r5
 800eef4:	f7f1 f9ac 	bl	8000250 <memchr>
 800eef8:	b138      	cbz	r0, 800ef0a <_svfiprintf_r+0x142>
 800eefa:	2340      	movs	r3, #64	; 0x40
 800eefc:	1b40      	subs	r0, r0, r5
 800eefe:	fa03 f000 	lsl.w	r0, r3, r0
 800ef02:	9b04      	ldr	r3, [sp, #16]
 800ef04:	4303      	orrs	r3, r0
 800ef06:	3701      	adds	r7, #1
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	7839      	ldrb	r1, [r7, #0]
 800ef0c:	4827      	ldr	r0, [pc, #156]	; (800efac <_svfiprintf_r+0x1e4>)
 800ef0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef12:	2206      	movs	r2, #6
 800ef14:	1c7e      	adds	r6, r7, #1
 800ef16:	f7f1 f99b 	bl	8000250 <memchr>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d038      	beq.n	800ef90 <_svfiprintf_r+0x1c8>
 800ef1e:	4b24      	ldr	r3, [pc, #144]	; (800efb0 <_svfiprintf_r+0x1e8>)
 800ef20:	bb13      	cbnz	r3, 800ef68 <_svfiprintf_r+0x1a0>
 800ef22:	9b03      	ldr	r3, [sp, #12]
 800ef24:	3307      	adds	r3, #7
 800ef26:	f023 0307 	bic.w	r3, r3, #7
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef30:	444b      	add	r3, r9
 800ef32:	9309      	str	r3, [sp, #36]	; 0x24
 800ef34:	e76d      	b.n	800ee12 <_svfiprintf_r+0x4a>
 800ef36:	fb05 3202 	mla	r2, r5, r2, r3
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	460f      	mov	r7, r1
 800ef3e:	e7a6      	b.n	800ee8e <_svfiprintf_r+0xc6>
 800ef40:	2300      	movs	r3, #0
 800ef42:	3701      	adds	r7, #1
 800ef44:	9305      	str	r3, [sp, #20]
 800ef46:	4619      	mov	r1, r3
 800ef48:	250a      	movs	r5, #10
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef50:	3a30      	subs	r2, #48	; 0x30
 800ef52:	2a09      	cmp	r2, #9
 800ef54:	d903      	bls.n	800ef5e <_svfiprintf_r+0x196>
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d0c8      	beq.n	800eeec <_svfiprintf_r+0x124>
 800ef5a:	9105      	str	r1, [sp, #20]
 800ef5c:	e7c6      	b.n	800eeec <_svfiprintf_r+0x124>
 800ef5e:	fb05 2101 	mla	r1, r5, r1, r2
 800ef62:	2301      	movs	r3, #1
 800ef64:	4607      	mov	r7, r0
 800ef66:	e7f0      	b.n	800ef4a <_svfiprintf_r+0x182>
 800ef68:	ab03      	add	r3, sp, #12
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	4b11      	ldr	r3, [pc, #68]	; (800efb4 <_svfiprintf_r+0x1ec>)
 800ef70:	a904      	add	r1, sp, #16
 800ef72:	4640      	mov	r0, r8
 800ef74:	f3af 8000 	nop.w
 800ef78:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef7c:	4681      	mov	r9, r0
 800ef7e:	d1d6      	bne.n	800ef2e <_svfiprintf_r+0x166>
 800ef80:	89a3      	ldrh	r3, [r4, #12]
 800ef82:	065b      	lsls	r3, r3, #25
 800ef84:	f53f af35 	bmi.w	800edf2 <_svfiprintf_r+0x2a>
 800ef88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef8a:	b01d      	add	sp, #116	; 0x74
 800ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef90:	ab03      	add	r3, sp, #12
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4622      	mov	r2, r4
 800ef96:	4b07      	ldr	r3, [pc, #28]	; (800efb4 <_svfiprintf_r+0x1ec>)
 800ef98:	a904      	add	r1, sp, #16
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	f000 f882 	bl	800f0a4 <_printf_i>
 800efa0:	e7ea      	b.n	800ef78 <_svfiprintf_r+0x1b0>
 800efa2:	bf00      	nop
 800efa4:	080133f8 	.word	0x080133f8
 800efa8:	080133fe 	.word	0x080133fe
 800efac:	08013402 	.word	0x08013402
 800efb0:	00000000 	.word	0x00000000
 800efb4:	0800ed15 	.word	0x0800ed15

0800efb8 <_printf_common>:
 800efb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	4691      	mov	r9, r2
 800efbe:	461f      	mov	r7, r3
 800efc0:	688a      	ldr	r2, [r1, #8]
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc8:	4293      	cmp	r3, r2
 800efca:	bfb8      	it	lt
 800efcc:	4613      	movlt	r3, r2
 800efce:	f8c9 3000 	str.w	r3, [r9]
 800efd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efd6:	4606      	mov	r6, r0
 800efd8:	460c      	mov	r4, r1
 800efda:	b112      	cbz	r2, 800efe2 <_printf_common+0x2a>
 800efdc:	3301      	adds	r3, #1
 800efde:	f8c9 3000 	str.w	r3, [r9]
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	0699      	lsls	r1, r3, #26
 800efe6:	bf42      	ittt	mi
 800efe8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800efec:	3302      	addmi	r3, #2
 800efee:	f8c9 3000 	strmi.w	r3, [r9]
 800eff2:	6825      	ldr	r5, [r4, #0]
 800eff4:	f015 0506 	ands.w	r5, r5, #6
 800eff8:	d107      	bne.n	800f00a <_printf_common+0x52>
 800effa:	f104 0a19 	add.w	sl, r4, #25
 800effe:	68e3      	ldr	r3, [r4, #12]
 800f000:	f8d9 2000 	ldr.w	r2, [r9]
 800f004:	1a9b      	subs	r3, r3, r2
 800f006:	42ab      	cmp	r3, r5
 800f008:	dc28      	bgt.n	800f05c <_printf_common+0xa4>
 800f00a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f00e:	6822      	ldr	r2, [r4, #0]
 800f010:	3300      	adds	r3, #0
 800f012:	bf18      	it	ne
 800f014:	2301      	movne	r3, #1
 800f016:	0692      	lsls	r2, r2, #26
 800f018:	d42d      	bmi.n	800f076 <_printf_common+0xbe>
 800f01a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f01e:	4639      	mov	r1, r7
 800f020:	4630      	mov	r0, r6
 800f022:	47c0      	blx	r8
 800f024:	3001      	adds	r0, #1
 800f026:	d020      	beq.n	800f06a <_printf_common+0xb2>
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	68e5      	ldr	r5, [r4, #12]
 800f02c:	f8d9 2000 	ldr.w	r2, [r9]
 800f030:	f003 0306 	and.w	r3, r3, #6
 800f034:	2b04      	cmp	r3, #4
 800f036:	bf08      	it	eq
 800f038:	1aad      	subeq	r5, r5, r2
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	bf0c      	ite	eq
 800f040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f044:	2500      	movne	r5, #0
 800f046:	4293      	cmp	r3, r2
 800f048:	bfc4      	itt	gt
 800f04a:	1a9b      	subgt	r3, r3, r2
 800f04c:	18ed      	addgt	r5, r5, r3
 800f04e:	f04f 0900 	mov.w	r9, #0
 800f052:	341a      	adds	r4, #26
 800f054:	454d      	cmp	r5, r9
 800f056:	d11a      	bne.n	800f08e <_printf_common+0xd6>
 800f058:	2000      	movs	r0, #0
 800f05a:	e008      	b.n	800f06e <_printf_common+0xb6>
 800f05c:	2301      	movs	r3, #1
 800f05e:	4652      	mov	r2, sl
 800f060:	4639      	mov	r1, r7
 800f062:	4630      	mov	r0, r6
 800f064:	47c0      	blx	r8
 800f066:	3001      	adds	r0, #1
 800f068:	d103      	bne.n	800f072 <_printf_common+0xba>
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f072:	3501      	adds	r5, #1
 800f074:	e7c3      	b.n	800effe <_printf_common+0x46>
 800f076:	18e1      	adds	r1, r4, r3
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	2030      	movs	r0, #48	; 0x30
 800f07c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f080:	4422      	add	r2, r4
 800f082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f086:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f08a:	3302      	adds	r3, #2
 800f08c:	e7c5      	b.n	800f01a <_printf_common+0x62>
 800f08e:	2301      	movs	r3, #1
 800f090:	4622      	mov	r2, r4
 800f092:	4639      	mov	r1, r7
 800f094:	4630      	mov	r0, r6
 800f096:	47c0      	blx	r8
 800f098:	3001      	adds	r0, #1
 800f09a:	d0e6      	beq.n	800f06a <_printf_common+0xb2>
 800f09c:	f109 0901 	add.w	r9, r9, #1
 800f0a0:	e7d8      	b.n	800f054 <_printf_common+0x9c>
	...

0800f0a4 <_printf_i>:
 800f0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f0ac:	460c      	mov	r4, r1
 800f0ae:	7e09      	ldrb	r1, [r1, #24]
 800f0b0:	b085      	sub	sp, #20
 800f0b2:	296e      	cmp	r1, #110	; 0x6e
 800f0b4:	4617      	mov	r7, r2
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	4698      	mov	r8, r3
 800f0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0bc:	f000 80b3 	beq.w	800f226 <_printf_i+0x182>
 800f0c0:	d822      	bhi.n	800f108 <_printf_i+0x64>
 800f0c2:	2963      	cmp	r1, #99	; 0x63
 800f0c4:	d036      	beq.n	800f134 <_printf_i+0x90>
 800f0c6:	d80a      	bhi.n	800f0de <_printf_i+0x3a>
 800f0c8:	2900      	cmp	r1, #0
 800f0ca:	f000 80b9 	beq.w	800f240 <_printf_i+0x19c>
 800f0ce:	2958      	cmp	r1, #88	; 0x58
 800f0d0:	f000 8083 	beq.w	800f1da <_printf_i+0x136>
 800f0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f0dc:	e032      	b.n	800f144 <_printf_i+0xa0>
 800f0de:	2964      	cmp	r1, #100	; 0x64
 800f0e0:	d001      	beq.n	800f0e6 <_printf_i+0x42>
 800f0e2:	2969      	cmp	r1, #105	; 0x69
 800f0e4:	d1f6      	bne.n	800f0d4 <_printf_i+0x30>
 800f0e6:	6820      	ldr	r0, [r4, #0]
 800f0e8:	6813      	ldr	r3, [r2, #0]
 800f0ea:	0605      	lsls	r5, r0, #24
 800f0ec:	f103 0104 	add.w	r1, r3, #4
 800f0f0:	d52a      	bpl.n	800f148 <_printf_i+0xa4>
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	6011      	str	r1, [r2, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	da03      	bge.n	800f102 <_printf_i+0x5e>
 800f0fa:	222d      	movs	r2, #45	; 0x2d
 800f0fc:	425b      	negs	r3, r3
 800f0fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f102:	486f      	ldr	r0, [pc, #444]	; (800f2c0 <_printf_i+0x21c>)
 800f104:	220a      	movs	r2, #10
 800f106:	e039      	b.n	800f17c <_printf_i+0xd8>
 800f108:	2973      	cmp	r1, #115	; 0x73
 800f10a:	f000 809d 	beq.w	800f248 <_printf_i+0x1a4>
 800f10e:	d808      	bhi.n	800f122 <_printf_i+0x7e>
 800f110:	296f      	cmp	r1, #111	; 0x6f
 800f112:	d020      	beq.n	800f156 <_printf_i+0xb2>
 800f114:	2970      	cmp	r1, #112	; 0x70
 800f116:	d1dd      	bne.n	800f0d4 <_printf_i+0x30>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	f043 0320 	orr.w	r3, r3, #32
 800f11e:	6023      	str	r3, [r4, #0]
 800f120:	e003      	b.n	800f12a <_printf_i+0x86>
 800f122:	2975      	cmp	r1, #117	; 0x75
 800f124:	d017      	beq.n	800f156 <_printf_i+0xb2>
 800f126:	2978      	cmp	r1, #120	; 0x78
 800f128:	d1d4      	bne.n	800f0d4 <_printf_i+0x30>
 800f12a:	2378      	movs	r3, #120	; 0x78
 800f12c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f130:	4864      	ldr	r0, [pc, #400]	; (800f2c4 <_printf_i+0x220>)
 800f132:	e055      	b.n	800f1e0 <_printf_i+0x13c>
 800f134:	6813      	ldr	r3, [r2, #0]
 800f136:	1d19      	adds	r1, r3, #4
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6011      	str	r1, [r2, #0]
 800f13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f144:	2301      	movs	r3, #1
 800f146:	e08c      	b.n	800f262 <_printf_i+0x1be>
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6011      	str	r1, [r2, #0]
 800f14c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f150:	bf18      	it	ne
 800f152:	b21b      	sxthne	r3, r3
 800f154:	e7cf      	b.n	800f0f6 <_printf_i+0x52>
 800f156:	6813      	ldr	r3, [r2, #0]
 800f158:	6825      	ldr	r5, [r4, #0]
 800f15a:	1d18      	adds	r0, r3, #4
 800f15c:	6010      	str	r0, [r2, #0]
 800f15e:	0628      	lsls	r0, r5, #24
 800f160:	d501      	bpl.n	800f166 <_printf_i+0xc2>
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	e002      	b.n	800f16c <_printf_i+0xc8>
 800f166:	0668      	lsls	r0, r5, #25
 800f168:	d5fb      	bpl.n	800f162 <_printf_i+0xbe>
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	4854      	ldr	r0, [pc, #336]	; (800f2c0 <_printf_i+0x21c>)
 800f16e:	296f      	cmp	r1, #111	; 0x6f
 800f170:	bf14      	ite	ne
 800f172:	220a      	movne	r2, #10
 800f174:	2208      	moveq	r2, #8
 800f176:	2100      	movs	r1, #0
 800f178:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f17c:	6865      	ldr	r5, [r4, #4]
 800f17e:	60a5      	str	r5, [r4, #8]
 800f180:	2d00      	cmp	r5, #0
 800f182:	f2c0 8095 	blt.w	800f2b0 <_printf_i+0x20c>
 800f186:	6821      	ldr	r1, [r4, #0]
 800f188:	f021 0104 	bic.w	r1, r1, #4
 800f18c:	6021      	str	r1, [r4, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d13d      	bne.n	800f20e <_printf_i+0x16a>
 800f192:	2d00      	cmp	r5, #0
 800f194:	f040 808e 	bne.w	800f2b4 <_printf_i+0x210>
 800f198:	4665      	mov	r5, ip
 800f19a:	2a08      	cmp	r2, #8
 800f19c:	d10b      	bne.n	800f1b6 <_printf_i+0x112>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	07db      	lsls	r3, r3, #31
 800f1a2:	d508      	bpl.n	800f1b6 <_printf_i+0x112>
 800f1a4:	6923      	ldr	r3, [r4, #16]
 800f1a6:	6862      	ldr	r2, [r4, #4]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	bfde      	ittt	le
 800f1ac:	2330      	movle	r3, #48	; 0x30
 800f1ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1b6:	ebac 0305 	sub.w	r3, ip, r5
 800f1ba:	6123      	str	r3, [r4, #16]
 800f1bc:	f8cd 8000 	str.w	r8, [sp]
 800f1c0:	463b      	mov	r3, r7
 800f1c2:	aa03      	add	r2, sp, #12
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7ff fef6 	bl	800efb8 <_printf_common>
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d14d      	bne.n	800f26c <_printf_i+0x1c8>
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	b005      	add	sp, #20
 800f1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1da:	4839      	ldr	r0, [pc, #228]	; (800f2c0 <_printf_i+0x21c>)
 800f1dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f1e0:	6813      	ldr	r3, [r2, #0]
 800f1e2:	6821      	ldr	r1, [r4, #0]
 800f1e4:	1d1d      	adds	r5, r3, #4
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	6015      	str	r5, [r2, #0]
 800f1ea:	060a      	lsls	r2, r1, #24
 800f1ec:	d50b      	bpl.n	800f206 <_printf_i+0x162>
 800f1ee:	07ca      	lsls	r2, r1, #31
 800f1f0:	bf44      	itt	mi
 800f1f2:	f041 0120 	orrmi.w	r1, r1, #32
 800f1f6:	6021      	strmi	r1, [r4, #0]
 800f1f8:	b91b      	cbnz	r3, 800f202 <_printf_i+0x15e>
 800f1fa:	6822      	ldr	r2, [r4, #0]
 800f1fc:	f022 0220 	bic.w	r2, r2, #32
 800f200:	6022      	str	r2, [r4, #0]
 800f202:	2210      	movs	r2, #16
 800f204:	e7b7      	b.n	800f176 <_printf_i+0xd2>
 800f206:	064d      	lsls	r5, r1, #25
 800f208:	bf48      	it	mi
 800f20a:	b29b      	uxthmi	r3, r3
 800f20c:	e7ef      	b.n	800f1ee <_printf_i+0x14a>
 800f20e:	4665      	mov	r5, ip
 800f210:	fbb3 f1f2 	udiv	r1, r3, r2
 800f214:	fb02 3311 	mls	r3, r2, r1, r3
 800f218:	5cc3      	ldrb	r3, [r0, r3]
 800f21a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f21e:	460b      	mov	r3, r1
 800f220:	2900      	cmp	r1, #0
 800f222:	d1f5      	bne.n	800f210 <_printf_i+0x16c>
 800f224:	e7b9      	b.n	800f19a <_printf_i+0xf6>
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	6825      	ldr	r5, [r4, #0]
 800f22a:	6961      	ldr	r1, [r4, #20]
 800f22c:	1d18      	adds	r0, r3, #4
 800f22e:	6010      	str	r0, [r2, #0]
 800f230:	0628      	lsls	r0, r5, #24
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	d501      	bpl.n	800f23a <_printf_i+0x196>
 800f236:	6019      	str	r1, [r3, #0]
 800f238:	e002      	b.n	800f240 <_printf_i+0x19c>
 800f23a:	066a      	lsls	r2, r5, #25
 800f23c:	d5fb      	bpl.n	800f236 <_printf_i+0x192>
 800f23e:	8019      	strh	r1, [r3, #0]
 800f240:	2300      	movs	r3, #0
 800f242:	6123      	str	r3, [r4, #16]
 800f244:	4665      	mov	r5, ip
 800f246:	e7b9      	b.n	800f1bc <_printf_i+0x118>
 800f248:	6813      	ldr	r3, [r2, #0]
 800f24a:	1d19      	adds	r1, r3, #4
 800f24c:	6011      	str	r1, [r2, #0]
 800f24e:	681d      	ldr	r5, [r3, #0]
 800f250:	6862      	ldr	r2, [r4, #4]
 800f252:	2100      	movs	r1, #0
 800f254:	4628      	mov	r0, r5
 800f256:	f7f0 fffb 	bl	8000250 <memchr>
 800f25a:	b108      	cbz	r0, 800f260 <_printf_i+0x1bc>
 800f25c:	1b40      	subs	r0, r0, r5
 800f25e:	6060      	str	r0, [r4, #4]
 800f260:	6863      	ldr	r3, [r4, #4]
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	2300      	movs	r3, #0
 800f266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f26a:	e7a7      	b.n	800f1bc <_printf_i+0x118>
 800f26c:	6923      	ldr	r3, [r4, #16]
 800f26e:	462a      	mov	r2, r5
 800f270:	4639      	mov	r1, r7
 800f272:	4630      	mov	r0, r6
 800f274:	47c0      	blx	r8
 800f276:	3001      	adds	r0, #1
 800f278:	d0aa      	beq.n	800f1d0 <_printf_i+0x12c>
 800f27a:	6823      	ldr	r3, [r4, #0]
 800f27c:	079b      	lsls	r3, r3, #30
 800f27e:	d413      	bmi.n	800f2a8 <_printf_i+0x204>
 800f280:	68e0      	ldr	r0, [r4, #12]
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	4298      	cmp	r0, r3
 800f286:	bfb8      	it	lt
 800f288:	4618      	movlt	r0, r3
 800f28a:	e7a3      	b.n	800f1d4 <_printf_i+0x130>
 800f28c:	2301      	movs	r3, #1
 800f28e:	464a      	mov	r2, r9
 800f290:	4639      	mov	r1, r7
 800f292:	4630      	mov	r0, r6
 800f294:	47c0      	blx	r8
 800f296:	3001      	adds	r0, #1
 800f298:	d09a      	beq.n	800f1d0 <_printf_i+0x12c>
 800f29a:	3501      	adds	r5, #1
 800f29c:	68e3      	ldr	r3, [r4, #12]
 800f29e:	9a03      	ldr	r2, [sp, #12]
 800f2a0:	1a9b      	subs	r3, r3, r2
 800f2a2:	42ab      	cmp	r3, r5
 800f2a4:	dcf2      	bgt.n	800f28c <_printf_i+0x1e8>
 800f2a6:	e7eb      	b.n	800f280 <_printf_i+0x1dc>
 800f2a8:	2500      	movs	r5, #0
 800f2aa:	f104 0919 	add.w	r9, r4, #25
 800f2ae:	e7f5      	b.n	800f29c <_printf_i+0x1f8>
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d1ac      	bne.n	800f20e <_printf_i+0x16a>
 800f2b4:	7803      	ldrb	r3, [r0, #0]
 800f2b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2be:	e76c      	b.n	800f19a <_printf_i+0xf6>
 800f2c0:	08013409 	.word	0x08013409
 800f2c4:	0801341a 	.word	0x0801341a

0800f2c8 <memcpy>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	1e43      	subs	r3, r0, #1
 800f2cc:	440a      	add	r2, r1
 800f2ce:	4291      	cmp	r1, r2
 800f2d0:	d100      	bne.n	800f2d4 <memcpy+0xc>
 800f2d2:	bd10      	pop	{r4, pc}
 800f2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2dc:	e7f7      	b.n	800f2ce <memcpy+0x6>

0800f2de <memmove>:
 800f2de:	4288      	cmp	r0, r1
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	eb01 0302 	add.w	r3, r1, r2
 800f2e6:	d807      	bhi.n	800f2f8 <memmove+0x1a>
 800f2e8:	1e42      	subs	r2, r0, #1
 800f2ea:	4299      	cmp	r1, r3
 800f2ec:	d00a      	beq.n	800f304 <memmove+0x26>
 800f2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f2f6:	e7f8      	b.n	800f2ea <memmove+0xc>
 800f2f8:	4283      	cmp	r3, r0
 800f2fa:	d9f5      	bls.n	800f2e8 <memmove+0xa>
 800f2fc:	1881      	adds	r1, r0, r2
 800f2fe:	1ad2      	subs	r2, r2, r3
 800f300:	42d3      	cmn	r3, r2
 800f302:	d100      	bne.n	800f306 <memmove+0x28>
 800f304:	bd10      	pop	{r4, pc}
 800f306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f30a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f30e:	e7f7      	b.n	800f300 <memmove+0x22>

0800f310 <_free_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4605      	mov	r5, r0
 800f314:	2900      	cmp	r1, #0
 800f316:	d045      	beq.n	800f3a4 <_free_r+0x94>
 800f318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f31c:	1f0c      	subs	r4, r1, #4
 800f31e:	2b00      	cmp	r3, #0
 800f320:	bfb8      	it	lt
 800f322:	18e4      	addlt	r4, r4, r3
 800f324:	f000 f8d2 	bl	800f4cc <__malloc_lock>
 800f328:	4a1f      	ldr	r2, [pc, #124]	; (800f3a8 <_free_r+0x98>)
 800f32a:	6813      	ldr	r3, [r2, #0]
 800f32c:	4610      	mov	r0, r2
 800f32e:	b933      	cbnz	r3, 800f33e <_free_r+0x2e>
 800f330:	6063      	str	r3, [r4, #4]
 800f332:	6014      	str	r4, [r2, #0]
 800f334:	4628      	mov	r0, r5
 800f336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f33a:	f000 b8c8 	b.w	800f4ce <__malloc_unlock>
 800f33e:	42a3      	cmp	r3, r4
 800f340:	d90c      	bls.n	800f35c <_free_r+0x4c>
 800f342:	6821      	ldr	r1, [r4, #0]
 800f344:	1862      	adds	r2, r4, r1
 800f346:	4293      	cmp	r3, r2
 800f348:	bf04      	itt	eq
 800f34a:	681a      	ldreq	r2, [r3, #0]
 800f34c:	685b      	ldreq	r3, [r3, #4]
 800f34e:	6063      	str	r3, [r4, #4]
 800f350:	bf04      	itt	eq
 800f352:	1852      	addeq	r2, r2, r1
 800f354:	6022      	streq	r2, [r4, #0]
 800f356:	6004      	str	r4, [r0, #0]
 800f358:	e7ec      	b.n	800f334 <_free_r+0x24>
 800f35a:	4613      	mov	r3, r2
 800f35c:	685a      	ldr	r2, [r3, #4]
 800f35e:	b10a      	cbz	r2, 800f364 <_free_r+0x54>
 800f360:	42a2      	cmp	r2, r4
 800f362:	d9fa      	bls.n	800f35a <_free_r+0x4a>
 800f364:	6819      	ldr	r1, [r3, #0]
 800f366:	1858      	adds	r0, r3, r1
 800f368:	42a0      	cmp	r0, r4
 800f36a:	d10b      	bne.n	800f384 <_free_r+0x74>
 800f36c:	6820      	ldr	r0, [r4, #0]
 800f36e:	4401      	add	r1, r0
 800f370:	1858      	adds	r0, r3, r1
 800f372:	4282      	cmp	r2, r0
 800f374:	6019      	str	r1, [r3, #0]
 800f376:	d1dd      	bne.n	800f334 <_free_r+0x24>
 800f378:	6810      	ldr	r0, [r2, #0]
 800f37a:	6852      	ldr	r2, [r2, #4]
 800f37c:	605a      	str	r2, [r3, #4]
 800f37e:	4401      	add	r1, r0
 800f380:	6019      	str	r1, [r3, #0]
 800f382:	e7d7      	b.n	800f334 <_free_r+0x24>
 800f384:	d902      	bls.n	800f38c <_free_r+0x7c>
 800f386:	230c      	movs	r3, #12
 800f388:	602b      	str	r3, [r5, #0]
 800f38a:	e7d3      	b.n	800f334 <_free_r+0x24>
 800f38c:	6820      	ldr	r0, [r4, #0]
 800f38e:	1821      	adds	r1, r4, r0
 800f390:	428a      	cmp	r2, r1
 800f392:	bf04      	itt	eq
 800f394:	6811      	ldreq	r1, [r2, #0]
 800f396:	6852      	ldreq	r2, [r2, #4]
 800f398:	6062      	str	r2, [r4, #4]
 800f39a:	bf04      	itt	eq
 800f39c:	1809      	addeq	r1, r1, r0
 800f39e:	6021      	streq	r1, [r4, #0]
 800f3a0:	605c      	str	r4, [r3, #4]
 800f3a2:	e7c7      	b.n	800f334 <_free_r+0x24>
 800f3a4:	bd38      	pop	{r3, r4, r5, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20000364 	.word	0x20000364

0800f3ac <_malloc_r>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	1ccd      	adds	r5, r1, #3
 800f3b0:	f025 0503 	bic.w	r5, r5, #3
 800f3b4:	3508      	adds	r5, #8
 800f3b6:	2d0c      	cmp	r5, #12
 800f3b8:	bf38      	it	cc
 800f3ba:	250c      	movcc	r5, #12
 800f3bc:	2d00      	cmp	r5, #0
 800f3be:	4606      	mov	r6, r0
 800f3c0:	db01      	blt.n	800f3c6 <_malloc_r+0x1a>
 800f3c2:	42a9      	cmp	r1, r5
 800f3c4:	d903      	bls.n	800f3ce <_malloc_r+0x22>
 800f3c6:	230c      	movs	r3, #12
 800f3c8:	6033      	str	r3, [r6, #0]
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	bd70      	pop	{r4, r5, r6, pc}
 800f3ce:	f000 f87d 	bl	800f4cc <__malloc_lock>
 800f3d2:	4a21      	ldr	r2, [pc, #132]	; (800f458 <_malloc_r+0xac>)
 800f3d4:	6814      	ldr	r4, [r2, #0]
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	b991      	cbnz	r1, 800f400 <_malloc_r+0x54>
 800f3da:	4c20      	ldr	r4, [pc, #128]	; (800f45c <_malloc_r+0xb0>)
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	b91b      	cbnz	r3, 800f3e8 <_malloc_r+0x3c>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f000 f863 	bl	800f4ac <_sbrk_r>
 800f3e6:	6020      	str	r0, [r4, #0]
 800f3e8:	4629      	mov	r1, r5
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 f85e 	bl	800f4ac <_sbrk_r>
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	d124      	bne.n	800f43e <_malloc_r+0x92>
 800f3f4:	230c      	movs	r3, #12
 800f3f6:	6033      	str	r3, [r6, #0]
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f000 f868 	bl	800f4ce <__malloc_unlock>
 800f3fe:	e7e4      	b.n	800f3ca <_malloc_r+0x1e>
 800f400:	680b      	ldr	r3, [r1, #0]
 800f402:	1b5b      	subs	r3, r3, r5
 800f404:	d418      	bmi.n	800f438 <_malloc_r+0x8c>
 800f406:	2b0b      	cmp	r3, #11
 800f408:	d90f      	bls.n	800f42a <_malloc_r+0x7e>
 800f40a:	600b      	str	r3, [r1, #0]
 800f40c:	50cd      	str	r5, [r1, r3]
 800f40e:	18cc      	adds	r4, r1, r3
 800f410:	4630      	mov	r0, r6
 800f412:	f000 f85c 	bl	800f4ce <__malloc_unlock>
 800f416:	f104 000b 	add.w	r0, r4, #11
 800f41a:	1d23      	adds	r3, r4, #4
 800f41c:	f020 0007 	bic.w	r0, r0, #7
 800f420:	1ac3      	subs	r3, r0, r3
 800f422:	d0d3      	beq.n	800f3cc <_malloc_r+0x20>
 800f424:	425a      	negs	r2, r3
 800f426:	50e2      	str	r2, [r4, r3]
 800f428:	e7d0      	b.n	800f3cc <_malloc_r+0x20>
 800f42a:	428c      	cmp	r4, r1
 800f42c:	684b      	ldr	r3, [r1, #4]
 800f42e:	bf16      	itet	ne
 800f430:	6063      	strne	r3, [r4, #4]
 800f432:	6013      	streq	r3, [r2, #0]
 800f434:	460c      	movne	r4, r1
 800f436:	e7eb      	b.n	800f410 <_malloc_r+0x64>
 800f438:	460c      	mov	r4, r1
 800f43a:	6849      	ldr	r1, [r1, #4]
 800f43c:	e7cc      	b.n	800f3d8 <_malloc_r+0x2c>
 800f43e:	1cc4      	adds	r4, r0, #3
 800f440:	f024 0403 	bic.w	r4, r4, #3
 800f444:	42a0      	cmp	r0, r4
 800f446:	d005      	beq.n	800f454 <_malloc_r+0xa8>
 800f448:	1a21      	subs	r1, r4, r0
 800f44a:	4630      	mov	r0, r6
 800f44c:	f000 f82e 	bl	800f4ac <_sbrk_r>
 800f450:	3001      	adds	r0, #1
 800f452:	d0cf      	beq.n	800f3f4 <_malloc_r+0x48>
 800f454:	6025      	str	r5, [r4, #0]
 800f456:	e7db      	b.n	800f410 <_malloc_r+0x64>
 800f458:	20000364 	.word	0x20000364
 800f45c:	20000368 	.word	0x20000368

0800f460 <_realloc_r>:
 800f460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f462:	4607      	mov	r7, r0
 800f464:	4614      	mov	r4, r2
 800f466:	460e      	mov	r6, r1
 800f468:	b921      	cbnz	r1, 800f474 <_realloc_r+0x14>
 800f46a:	4611      	mov	r1, r2
 800f46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f470:	f7ff bf9c 	b.w	800f3ac <_malloc_r>
 800f474:	b922      	cbnz	r2, 800f480 <_realloc_r+0x20>
 800f476:	f7ff ff4b 	bl	800f310 <_free_r>
 800f47a:	4625      	mov	r5, r4
 800f47c:	4628      	mov	r0, r5
 800f47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f480:	f000 f826 	bl	800f4d0 <_malloc_usable_size_r>
 800f484:	42a0      	cmp	r0, r4
 800f486:	d20f      	bcs.n	800f4a8 <_realloc_r+0x48>
 800f488:	4621      	mov	r1, r4
 800f48a:	4638      	mov	r0, r7
 800f48c:	f7ff ff8e 	bl	800f3ac <_malloc_r>
 800f490:	4605      	mov	r5, r0
 800f492:	2800      	cmp	r0, #0
 800f494:	d0f2      	beq.n	800f47c <_realloc_r+0x1c>
 800f496:	4631      	mov	r1, r6
 800f498:	4622      	mov	r2, r4
 800f49a:	f7ff ff15 	bl	800f2c8 <memcpy>
 800f49e:	4631      	mov	r1, r6
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7ff ff35 	bl	800f310 <_free_r>
 800f4a6:	e7e9      	b.n	800f47c <_realloc_r+0x1c>
 800f4a8:	4635      	mov	r5, r6
 800f4aa:	e7e7      	b.n	800f47c <_realloc_r+0x1c>

0800f4ac <_sbrk_r>:
 800f4ac:	b538      	push	{r3, r4, r5, lr}
 800f4ae:	4c06      	ldr	r4, [pc, #24]	; (800f4c8 <_sbrk_r+0x1c>)
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	4605      	mov	r5, r0
 800f4b4:	4608      	mov	r0, r1
 800f4b6:	6023      	str	r3, [r4, #0]
 800f4b8:	f7ff fb4e 	bl	800eb58 <_sbrk>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	d102      	bne.n	800f4c6 <_sbrk_r+0x1a>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	b103      	cbz	r3, 800f4c6 <_sbrk_r+0x1a>
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	bd38      	pop	{r3, r4, r5, pc}
 800f4c8:	20000c3c 	.word	0x20000c3c

0800f4cc <__malloc_lock>:
 800f4cc:	4770      	bx	lr

0800f4ce <__malloc_unlock>:
 800f4ce:	4770      	bx	lr

0800f4d0 <_malloc_usable_size_r>:
 800f4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d4:	1f18      	subs	r0, r3, #4
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	bfbc      	itt	lt
 800f4da:	580b      	ldrlt	r3, [r1, r0]
 800f4dc:	18c0      	addlt	r0, r0, r3
 800f4de:	4770      	bx	lr

0800f4e0 <_init>:
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e2:	bf00      	nop
 800f4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4e6:	bc08      	pop	{r3}
 800f4e8:	469e      	mov	lr, r3
 800f4ea:	4770      	bx	lr

0800f4ec <_fini>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	bf00      	nop
 800f4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f2:	bc08      	pop	{r3}
 800f4f4:	469e      	mov	lr, r3
 800f4f6:	4770      	bx	lr
