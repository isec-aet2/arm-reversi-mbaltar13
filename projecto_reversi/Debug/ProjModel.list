
ProjModel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad0  08003ad0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08003ae4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003ae4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0d0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc9  00000000  00000000  0002d10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0002f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f9a  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b28  00000000  00000000  0003221a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b0e8  00000000  00000000  0003bd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  00146ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003aa0 	.word	0x08003aa0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003aa0 	.word	0x08003aa0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f90b 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 f89a 	bl	8003680 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f917 	bl	80007a6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f8ed 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000002c 	.word	0x2000002c

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000002c 	.word	0x2000002c

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e049      	b.n	8000866 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d106      	bne.n	80007ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f002 ff6e 	bl	80036c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2202      	movs	r2, #2
 80007f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000810:	f023 0107 	bic.w	r1, r3, #7
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	430a      	orrs	r2, r1
 800081e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_DMA2D_Init+0xb0>)
 8000828:	4013      	ands	r3, r2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68d1      	ldr	r1, [r2, #12]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	430b      	orrs	r3, r1
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	051a      	lsls	r2, r3, #20
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	055b      	lsls	r3, r3, #21
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2201      	movs	r2, #1
 8000860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	ffffc000 	.word	0xffffc000

08000874 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800088c:	2b01      	cmp	r3, #1
 800088e:	d101      	bne.n	8000894 <HAL_DMA2D_ConfigLayer+0x20>
 8000890:	2302      	movs	r3, #2
 8000892:	e084      	b.n	800099e <HAL_DMA2D_ConfigLayer+0x12a>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2201      	movs	r2, #1
 8000898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2202      	movs	r2, #2
 80008a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	3320      	adds	r3, #32
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	041b      	lsls	r3, r3, #16
 80008c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80008c8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80008d0:	4313      	orrs	r3, r2
 80008d2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_DMA2D_ConfigLayer+0x138>)
 80008d6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b0a      	cmp	r3, #10
 80008de:	d003      	beq.n	80008e8 <HAL_DMA2D_ConfigLayer+0x74>
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b09      	cmp	r3, #9
 80008e6:	d107      	bne.n	80008f8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e005      	b.n	8000904 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	061b      	lsls	r3, r3, #24
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d120      	bne.n	800094c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	43db      	mvns	r3, r3
 8000914:	ea02 0103 	and.w	r1, r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	430a      	orrs	r2, r1
 8000920:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b0a      	cmp	r3, #10
 8000932:	d003      	beq.n	800093c <HAL_DMA2D_ConfigLayer+0xc8>
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b09      	cmp	r3, #9
 800093a:	d127      	bne.n	800098c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
 800094a:	e01f      	b.n	800098c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	69da      	ldr	r2, [r3, #28]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	43db      	mvns	r3, r3
 8000956:	ea02 0103 	and.w	r1, r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	430a      	orrs	r2, r1
 8000962:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d003      	beq.n	800097e <HAL_DMA2D_ConfigLayer+0x10a>
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b09      	cmp	r3, #9
 800097c:	d106      	bne.n	800098c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	68da      	ldr	r2, [r3, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800098a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	ff33000f 	.word	0xff33000f

080009b0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e106      	b.n	8000bd2 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7c5b      	ldrb	r3, [r3, #17]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f002 fe9a 	bl	8003708 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2203      	movs	r2, #3
 80009d8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80009ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80009fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a02:	f7ff fdeb 	bl	80005dc <HAL_GetTick>
 8000a06:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8000a08:	e009      	b.n	8000a1e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8000a0a:	f7ff fde7 	bl	80005dc <HAL_GetTick>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a18:	d901      	bls.n	8000a1e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e0d9      	b.n	8000bd2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0ed      	beq.n	8000a0a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <HAL_DSI_Init+0x22c>)
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	009a      	lsls	r2, r3, #2
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	02db      	lsls	r3, r3, #11
 8000a56:	431a      	orrs	r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 0201 	orr.w	r2, r2, #1
 8000a7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a92:	f7ff fda3 	bl	80005dc <HAL_GetTick>
 8000a96:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8000a98:	e009      	b.n	8000aae <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fd9f 	bl	80005dc <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aa8:	d901      	bls.n	8000aae <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e091      	b.n	8000bd2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0ed      	beq.n	8000a9a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 0206 	orr.w	r2, r2, #6
 8000ace:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0203 	bic.w	r2, r2, #3
 8000ae2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0201 	orr.w	r2, r2, #1
 8000afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0203 	bic.w	r2, r2, #3
 8000b10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	430a      	orrs	r2, r1
 8000b26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b38:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6899      	ldr	r1, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HAL_DSI_Init+0x1aa>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	e000      	b.n	8000b5c <HAL_DSI_Init+0x1ac>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_DSI_Init+0x230>)
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000b78:	fb01 f303 	mul.w	r3, r1, r3
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000b92:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	fffc8603 	.word	0xfffc8603
 8000be0:	003d0900 	.word	0x003d0900

08000be4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7c1b      	ldrb	r3, [r3, #16]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_DSI_ConfigErrorMonitor+0x16>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e0aa      	b.n	8000d50 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00a      	beq.n	8000c3a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	430b      	orrs	r3, r1
 8000c36:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d009      	beq.n	8000c58 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8000c54:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 0202 	orr.w	r2, r2, #2
 8000c90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d009      	beq.n	8000cb2 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 020c 	orr.w	r2, r2, #12
 8000cae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f003 0320 	and.w	r3, r3, #32
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d009      	beq.n	8000cd0 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0210 	orr.w	r2, r2, #16
 8000ccc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0220 	orr.w	r2, r2, #32
 8000cea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d009      	beq.n	8000d0c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d08:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d009      	beq.n	8000d2a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8000d44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7c1b      	ldrb	r3, [r3, #16]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_DSI_SetGenericVCID+0x16>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e016      	b.n	8000da0 <HAL_DSI_SetGenericVCID+0x44>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0203 	bic.w	r2, r2, #3
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7c1b      	ldrb	r3, [r3, #16]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e0c5      	b.n	8000f4e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0203 	bic.w	r2, r2, #3
 8000e0e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68d9      	ldr	r1, [r3, #12]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0207 	bic.w	r2, r2, #7
 8000e30:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6959      	ldr	r1, [r3, #20]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 020f 	bic.w	r2, r2, #15
 8000e5e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6919      	ldr	r1, [r3, #16]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020e 	bic.w	r2, r2, #14
 8000e82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	005a      	lsls	r2, r3, #1
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8000eaa:	400b      	ands	r3, r1
 8000eac:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ed0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0202 	orr.w	r2, r2, #2
 8000f42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	ffff0000 	.word	0xffff0000

08000f60 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7c1b      	ldrb	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_DSI_ConfigCommand+0x16>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e049      	b.n	800100a <HAL_DSI_ConfigCommand+0xaa>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_DSI_ConfigCommand+0xb8>)
 8000f88:	400b      	ands	r3, r1
 8000f8a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8000f9a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8000fa0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8000fa6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8000fac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8000fb2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8000fb8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8000fbe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8000fc4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8000fca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8000fd0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8000fd6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0202 	bic.w	r2, r2, #2
 8000fee:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	fef080ff 	.word	0xfef080ff

0800101c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7c1b      	ldrb	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_DSI_ConfigFlowControl+0x16>
 800102e:	2302      	movs	r3, #2
 8001030:	e016      	b.n	8001060 <HAL_DSI_ConfigFlowControl+0x44>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 021f 	bic.w	r2, r2, #31
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7c1b      	ldrb	r3, [r3, #16]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_DSI_ConfigPhyTimer+0x16>
 800107e:	2302      	movs	r3, #2
 8001080:	e058      	b.n	8001134 <HAL_DSI_ConfigPhyTimer+0xc8>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4293      	cmp	r3, r2
 8001092:	bf38      	it	cc
 8001094:	4613      	movcc	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80010a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	041a      	lsls	r2, r3, #16
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80010d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001110:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	021a      	lsls	r2, r3, #8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7c1b      	ldrb	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_DSI_ConfigHostTimeouts+0x16>
 8001152:	2302      	movs	r3, #2
 8001154:	e0b4      	b.n	80012c0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800116a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	021a      	lsls	r2, r3, #8
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b292      	uxth	r2, r2
 800118c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80011ae:	400b      	ands	r3, r1
 80011b0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80011d0:	400b      	ands	r3, r1
 80011d2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80011f4:	400b      	ands	r3, r1
 80011f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800121e:	400b      	ands	r3, r1
 8001220:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800124a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001272:	400b      	ands	r3, r1
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800129c:	400b      	ands	r3, r1
 800129e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6a1a      	ldr	r2, [r3, #32]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	ffff0000 	.word	0xffff0000

080012d0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e01b      	b.n	800131e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80012fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	065a      	lsls	r2, r3, #25
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e175      	b.n	8001638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8164 	bne.w	8001632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x4e>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b12      	cmp	r3, #18
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0203 	and.w	r2, r3, #3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00b      	beq.n	8001416 <HAL_GPIO_Init+0xea>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140a:	2b11      	cmp	r3, #17
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b12      	cmp	r3, #18
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80be 	beq.w	8001632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_GPIO_Init+0x320>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a64      	ldr	r2, [pc, #400]	; (800164c <HAL_GPIO_Init+0x320>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_GPIO_Init+0x320>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014ce:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_GPIO_Init+0x324>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a57      	ldr	r2, [pc, #348]	; (8001654 <HAL_GPIO_Init+0x328>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d037      	beq.n	800156a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a56      	ldr	r2, [pc, #344]	; (8001658 <HAL_GPIO_Init+0x32c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d031      	beq.n	8001566 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <HAL_GPIO_Init+0x330>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02b      	beq.n	8001562 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <HAL_GPIO_Init+0x334>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a53      	ldr	r2, [pc, #332]	; (8001664 <HAL_GPIO_Init+0x338>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x33c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x22a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_GPIO_Init+0x340>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x226>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a50      	ldr	r2, [pc, #320]	; (8001670 <HAL_GPIO_Init+0x344>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x222>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x348>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x21e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_GPIO_Init+0x34c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x21a>
 8001542:	2309      	movs	r3, #9
 8001544:	e012      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001546:	230a      	movs	r3, #10
 8001548:	e010      	b.n	800156c <HAL_GPIO_Init+0x240>
 800154a:	2308      	movs	r3, #8
 800154c:	e00e      	b.n	800156c <HAL_GPIO_Init+0x240>
 800154e:	2307      	movs	r3, #7
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001552:	2306      	movs	r3, #6
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x240>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x240>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x240>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x240>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800157c:	4934      	ldr	r1, [pc, #208]	; (8001650 <HAL_GPIO_Init+0x324>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <HAL_GPIO_Init+0x350>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ae:	4a33      	ldr	r2, [pc, #204]	; (800167c <HAL_GPIO_Init+0x350>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_GPIO_Init+0x350>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_GPIO_Init+0x350>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_GPIO_Init+0x350>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_GPIO_Init+0x350>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_GPIO_Init+0x350>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_GPIO_Init+0x350>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae86 	bls.w	800134c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	3724      	adds	r7, #36	; 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40021400 	.word	0x40021400
 800166c:	40021800 	.word	0x40021800
 8001670:	40021c00 	.word	0x40021c00
 8001674:	40022000 	.word	0x40022000
 8001678:	40022400 	.word	0x40022400
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0bf      	b.n	8001812 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f002 f872 	bl	8003790 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80016c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6999      	ldr	r1, [r3, #24]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_LTDC_Init+0x19c>)
 80016f4:	400b      	ands	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_LTDC_Init+0x19c>)
 8001722:	400b      	ands	r3, r1
 8001724:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68d9      	ldr	r1, [r3, #12]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_LTDC_Init+0x19c>)
 8001750:	400b      	ands	r3, r1
 8001752:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6919      	ldr	r1, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6959      	ldr	r1, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_LTDC_Init+0x19c>)
 800177e:	400b      	ands	r3, r1
 8001780:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6959      	ldr	r1, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0206 	orr.w	r2, r2, #6
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	f000f800 	.word	0xf000f800

08001820 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_LTDC_ConfigLayer+0x1a>
 8001836:	2302      	movs	r3, #2
 8001838:	e02c      	b.n	8001894 <HAL_LTDC_ConfigLayer+0x74>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2202      	movs	r2, #2
 8001846:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2134      	movs	r1, #52	; 0x34
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f811 	bl	800189c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}

0800189c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	4413      	add	r3, r2
 80018ba:	041b      	lsls	r3, r3, #16
 80018bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	4413      	add	r3, r2
 80018ca:	3384      	adds	r3, #132	; 0x84
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	01d2      	lsls	r2, r2, #7
 80018d8:	440a      	add	r2, r1
 80018da:	3284      	adds	r2, #132	; 0x84
 80018dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	4413      	add	r3, r2
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	440b      	add	r3, r1
 8001902:	3384      	adds	r3, #132	; 0x84
 8001904:	4619      	mov	r1, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191a:	4413      	add	r3, r2
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	3384      	adds	r3, #132	; 0x84
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	01d2      	lsls	r2, r2, #7
 800193a:	440a      	add	r2, r1
 800193c:	3284      	adds	r2, #132	; 0x84
 800193e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001942:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001952:	4413      	add	r3, r2
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	440b      	add	r3, r1
 8001962:	3384      	adds	r3, #132	; 0x84
 8001964:	4619      	mov	r1, r3
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	4413      	add	r3, r2
 8001978:	3384      	adds	r3, #132	; 0x84
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4611      	mov	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	440a      	add	r2, r1
 8001988:	3284      	adds	r2, #132	; 0x84
 800198a:	f023 0307 	bic.w	r3, r3, #7
 800198e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	01db      	lsls	r3, r3, #7
 800199a:	4413      	add	r3, r2
 800199c:	3384      	adds	r3, #132	; 0x84
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	061b      	lsls	r3, r3, #24
 80019c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4413      	add	r3, r2
 80019ce:	3384      	adds	r3, #132	; 0x84
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	4413      	add	r3, r2
 80019de:	3384      	adds	r3, #132	; 0x84
 80019e0:	461a      	mov	r2, r3
 80019e2:	2300      	movs	r3, #0
 80019e4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ec:	461a      	mov	r2, r3
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	440b      	add	r3, r1
 8001a02:	3384      	adds	r3, #132	; 0x84
 8001a04:	4619      	mov	r1, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	01db      	lsls	r3, r3, #7
 8001a16:	4413      	add	r3, r2
 8001a18:	3384      	adds	r3, #132	; 0x84
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	4611      	mov	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	01d2      	lsls	r2, r2, #7
 8001a26:	440a      	add	r2, r1
 8001a28:	3284      	adds	r2, #132	; 0x84
 8001a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a2e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	01db      	lsls	r3, r3, #7
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3384      	adds	r3, #132	; 0x84
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	01db      	lsls	r3, r3, #7
 8001a50:	4413      	add	r3, r2
 8001a52:	3384      	adds	r3, #132	; 0x84
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	01db      	lsls	r3, r3, #7
 8001a60:	440b      	add	r3, r1
 8001a62:	3384      	adds	r3, #132	; 0x84
 8001a64:	4619      	mov	r1, r3
 8001a66:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <LTDC_SetConfig+0x32c>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	01c9      	lsls	r1, r1, #7
 8001a7e:	4401      	add	r1, r0
 8001a80:	3184      	adds	r1, #132	; 0x84
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	01db      	lsls	r3, r3, #7
 8001a90:	4413      	add	r3, r2
 8001a92:	3384      	adds	r3, #132	; 0x84
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3384      	adds	r3, #132	; 0x84
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3384      	adds	r3, #132	; 0x84
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e01b      	b.n	8001b06 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e014      	b.n	8001b06 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d00b      	beq.n	8001afc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d003      	beq.n	8001afc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	d102      	bne.n	8001b02 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	e001      	b.n	8001b06 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	4413      	add	r3, r2
 8001b12:	3384      	adds	r3, #132	; 0x84
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	01d2      	lsls	r2, r2, #7
 8001b20:	440a      	add	r2, r1
 8001b22:	3284      	adds	r2, #132	; 0x84
 8001b24:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001b28:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1acb      	subs	r3, r1, r3
 8001b40:	69f9      	ldr	r1, [r7, #28]
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	3303      	adds	r3, #3
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	01c9      	lsls	r1, r1, #7
 8001b52:	4401      	add	r1, r0
 8001b54:	3184      	adds	r1, #132	; 0x84
 8001b56:	4313      	orrs	r3, r2
 8001b58:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	01db      	lsls	r3, r3, #7
 8001b64:	4413      	add	r3, r2
 8001b66:	3384      	adds	r3, #132	; 0x84
 8001b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	01db      	lsls	r3, r3, #7
 8001b74:	440b      	add	r3, r1
 8001b76:	3384      	adds	r3, #132	; 0x84
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <LTDC_SetConfig+0x330>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	01db      	lsls	r3, r3, #7
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3384      	adds	r3, #132	; 0x84
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3384      	adds	r3, #132	; 0x84
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4611      	mov	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	01d2      	lsls	r2, r2, #7
 8001bb0:	440a      	add	r2, r1
 8001bb2:	3284      	adds	r2, #132	; 0x84
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	fffff8f8 	.word	0xfffff8f8
 8001bcc:	fffff800 	.word	0xfffff800

08001bd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfe:	f7fe fced 	bl	80005dc <HAL_GetTick>
 8001c02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c04:	e009      	b.n	8001c1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c06:	f7fe fce9 	bl	80005dc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c14:	d901      	bls.n	8001c1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e022      	b.n	8001c60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d1ee      	bne.n	8001c06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c34:	f7fe fcd2 	bl	80005dc <HAL_GetTick>
 8001c38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c3a:	e009      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c3c:	f7fe fcce 	bl	80005dc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4a:	d901      	bls.n	8001c50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e007      	b.n	8001c60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e25e      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b96      	ldr	r3, [pc, #600]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca0:	4b93      	ldr	r3, [pc, #588]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
 8001cac:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x130>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e238      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x7a>
 8001cdc:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a83      	ldr	r2, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x9c>
 8001cf2:	4b7f      	ldr	r3, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7e      	ldr	r2, [pc, #504]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7b      	ldr	r2, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xc0>
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b73      	ldr	r3, [pc, #460]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a72      	ldr	r2, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001d30:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6e      	ldr	r2, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6b      	ldr	r2, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fc44 	bl	80005dc <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fc40 	bl	80005dc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1ec      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe8>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fc30 	bl	80005dc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe fc2c 	bl	80005dc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1d8      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x110>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d069      	beq.n	8001e82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x190>
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x17a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1ac      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	493d      	ldr	r1, [pc, #244]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a38      	ldr	r2, [pc, #224]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe fbe2 	bl	80005dc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fbde 	bl	80005dc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e18a      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4929      	ldr	r1, [pc, #164]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
 8001e4e:	e018      	b.n	8001e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fbbe 	bl	80005dc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fbba 	bl	80005dc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e166      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d038      	beq.n	8001f00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7fe fb9b 	bl	80005dc <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fb97 	bl	80005dc <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e143      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x23a>
 8001ec8:	e01a      	b.n	8001f00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fb81 	bl	80005dc <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ede:	f7fe fb7d 	bl	80005dc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d903      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e129      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
 8001ef0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b95      	ldr	r3, [pc, #596]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a4 	beq.w	8002056 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b8f      	ldr	r3, [pc, #572]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a8b      	ldr	r2, [pc, #556]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f36:	4b86      	ldr	r3, [pc, #536]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f42:	4b83      	ldr	r3, [pc, #524]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a82      	ldr	r2, [pc, #520]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe fb45 	bl	80005dc <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7fe fb41 	bl	80005dc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0ed      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <HAL_RCC_OscConfig+0x4e0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x31a>
 8001f7c:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a72      	ldr	r2, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	e02d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x376>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x33c>
 8001f92:	4b6e      	ldr	r3, [pc, #440]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a6d      	ldr	r2, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9e:	4b6b      	ldr	r3, [pc, #428]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	e01c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x376>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x35e>
 8001fb4:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a64      	ldr	r2, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc0:	4b62      	ldr	r3, [pc, #392]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	4a61      	ldr	r2, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x376>
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a5b      	ldr	r2, [pc, #364]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d015      	beq.n	800201a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7fe faf5 	bl	80005dc <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe faf1 	bl	80005dc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e09b      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ee      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x386>
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7fe fadf 	bl	80005dc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fadb 	bl	80005dc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e085      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ee      	bne.n	8002022 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d071      	beq.n	8002142 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d069      	beq.n	800213e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d14b      	bne.n	800210a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a35      	ldr	r2, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe faad 	bl	80005dc <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe faa9 	bl	80005dc <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e055      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	019b      	lsls	r3, r3, #6
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	061b      	lsls	r3, r3, #24
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	071b      	lsls	r3, r3, #28
 80020d0:	491e      	ldr	r1, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fa7b 	bl	80005dc <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fa77 	bl	80005dc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e023      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x47a>
 8002108:	e01b      	b.n	8002142 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fa61 	bl	80005dc <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe fa5d 	bl	80005dc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e009      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_OscConfig+0x4dc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x4ae>
 800213c:	e001      	b.n	8002142 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0ce      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b69      	ldr	r3, [pc, #420]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b66      	ldr	r3, [pc, #408]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 020f 	bic.w	r2, r3, #15
 8002182:	4964      	ldr	r1, [pc, #400]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b62      	ldr	r3, [pc, #392]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b6      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b4f      	ldr	r3, [pc, #316]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494c      	ldr	r1, [pc, #304]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d040      	beq.n	8002278 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07d      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e071      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e069      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4935      	ldr	r1, [pc, #212]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7fe f9c8 	bl	80005dc <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe f9c4 	bl	80005dc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e051      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d210      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 020f 	bic.w	r2, r3, #15
 800228e:	4921      	ldr	r1, [pc, #132]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e030      	b.n	800230a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4915      	ldr	r1, [pc, #84]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490d      	ldr	r1, [pc, #52]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f81d 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022ea:	4601      	mov	r1, r0
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	fa21 f303 	lsr.w	r3, r1, r3
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x1cc>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe f926 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00
 8002318:	40023800 	.word	0x40023800
 800231c:	08003ab8 	.word	0x08003ab8
 8002320:	20000008 	.word	0x20000008

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d007      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x32>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d008      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x38>
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 808d 	bne.w	800246a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002352:	60bb      	str	r3, [r7, #8]
       break;
 8002354:	e08c      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_RCC_GetSysClockFreq+0x160>)
 8002358:	60bb      	str	r3, [r7, #8]
      break;
 800235a:	e089      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b42      	ldr	r3, [pc, #264]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	ea03 0501 	and.w	r5, r3, r1
 8002388:	ea04 0602 	and.w	r6, r4, r2
 800238c:	4a3d      	ldr	r2, [pc, #244]	; (8002484 <HAL_RCC_GetSysClockFreq+0x160>)
 800238e:	fb02 f106 	mul.w	r1, r2, r6
 8002392:	2200      	movs	r2, #0
 8002394:	fb02 f205 	mul.w	r2, r2, r5
 8002398:	440a      	add	r2, r1
 800239a:	493a      	ldr	r1, [pc, #232]	; (8002484 <HAL_RCC_GetSysClockFreq+0x160>)
 800239c:	fba5 0101 	umull	r0, r1, r5, r1
 80023a0:	1853      	adds	r3, r2, r1
 80023a2:	4619      	mov	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f04f 0400 	mov.w	r4, #0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	f7fd ff43 	bl	8000238 <__aeabi_uldivmod>
 80023b2:	4603      	mov	r3, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e049      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	f04f 0400 	mov.w	r4, #0
 80023c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	ea03 0501 	and.w	r5, r3, r1
 80023d0:	ea04 0602 	and.w	r6, r4, r2
 80023d4:	4629      	mov	r1, r5
 80023d6:	4632      	mov	r2, r6
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	0154      	lsls	r4, r2, #5
 80023e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023e6:	014b      	lsls	r3, r1, #5
 80023e8:	4619      	mov	r1, r3
 80023ea:	4622      	mov	r2, r4
 80023ec:	1b49      	subs	r1, r1, r5
 80023ee:	eb62 0206 	sbc.w	r2, r2, r6
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	0194      	lsls	r4, r2, #6
 80023fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002400:	018b      	lsls	r3, r1, #6
 8002402:	1a5b      	subs	r3, r3, r1
 8002404:	eb64 0402 	sbc.w	r4, r4, r2
 8002408:	f04f 0100 	mov.w	r1, #0
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	00e2      	lsls	r2, r4, #3
 8002412:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002416:	00d9      	lsls	r1, r3, #3
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	195b      	adds	r3, r3, r5
 800241e:	eb44 0406 	adc.w	r4, r4, r6
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	02a2      	lsls	r2, r4, #10
 800242c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002430:	0299      	lsls	r1, r3, #10
 8002432:	460b      	mov	r3, r1
 8002434:	4614      	mov	r4, r2
 8002436:	4618      	mov	r0, r3
 8002438:	4621      	mov	r1, r4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f04f 0400 	mov.w	r4, #0
 8002440:	461a      	mov	r2, r3
 8002442:	4623      	mov	r3, r4
 8002444:	f7fd fef8 	bl	8000238 <__aeabi_uldivmod>
 8002448:	4603      	mov	r3, r0
 800244a:	460c      	mov	r4, r1
 800244c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_GetSysClockFreq+0x158>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	3301      	adds	r3, #1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	60bb      	str	r3, [r7, #8]
      break;
 8002468:	e002      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetSysClockFreq+0x15c>)
 800246c:	60bb      	str	r3, [r7, #8]
      break;
 800246e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002470:	68bb      	ldr	r3, [r7, #8]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	017d7840 	.word	0x017d7840

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b0:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a68      	ldr	r2, [pc, #416]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ba:	6093      	str	r3, [r2, #8]
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	4964      	ldr	r1, [pc, #400]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	4959      	ldr	r1, [pc, #356]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d017      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251e:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002524:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	494a      	ldr	r1, [pc, #296]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800254a:	2301      	movs	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 808b 	beq.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002576:	6413      	str	r3, [r2, #64]	; 0x40
 8002578:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe f824 	bl	80005dc <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe f820 	bl	80005dc <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e38d      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d035      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d02e      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d114      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fd ffe8 	bl	80005dc <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fd ffe4 	bl	80005dc <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e34f      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ee      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263e:	d111      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800264e:	400b      	ands	r3, r1
 8002650:	4901      	ldr	r1, [pc, #4]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
 8002656:	e00b      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	0ffffcff 	.word	0x0ffffcff
 8002664:	4bb3      	ldr	r3, [pc, #716]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4ab2      	ldr	r2, [pc, #712]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800266a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800266e:	6093      	str	r3, [r2, #8]
 8002670:	4bb0      	ldr	r3, [pc, #704]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	49ad      	ldr	r1, [pc, #692]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800267e:	4313      	orrs	r3, r2
 8002680:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268e:	4ba9      	ldr	r3, [pc, #676]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002694:	4aa7      	ldr	r2, [pc, #668]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800269e:	4ba5      	ldr	r3, [pc, #660]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	49a2      	ldr	r1, [pc, #648]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026bc:	4b9d      	ldr	r3, [pc, #628]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ca:	499a      	ldr	r1, [pc, #616]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026de:	4b95      	ldr	r3, [pc, #596]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ec:	4991      	ldr	r1, [pc, #580]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270e:	4989      	ldr	r1, [pc, #548]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002722:	4b84      	ldr	r3, [pc, #528]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4980      	ldr	r1, [pc, #512]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002744:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4978      	ldr	r1, [pc, #480]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002766:	4b73      	ldr	r3, [pc, #460]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f023 020c 	bic.w	r2, r3, #12
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	496f      	ldr	r1, [pc, #444]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	4967      	ldr	r1, [pc, #412]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027aa:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	495e      	ldr	r1, [pc, #376]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	4956      	ldr	r1, [pc, #344]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ee:	4b51      	ldr	r3, [pc, #324]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002810:	4b48      	ldr	r3, [pc, #288]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	4945      	ldr	r1, [pc, #276]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002832:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002840:	493c      	ldr	r1, [pc, #240]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d011      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002884:	492b      	ldr	r1, [pc, #172]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	491b      	ldr	r1, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e8:	4912      	ldr	r1, [pc, #72]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290c:	4909      	ldr	r1, [pc, #36]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00f      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002926:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	e002      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	4985      	ldr	r1, [pc, #532]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002952:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295c:	497c      	ldr	r1, [pc, #496]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002972:	f040 80d6 	bne.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800297c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002982:	f7fd fe2b 	bl	80005dc <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800298a:	f7fd fe27 	bl	80005dc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e194      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d021      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	0e1b      	lsrs	r3, r3, #24
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	019a      	lsls	r2, r3, #6
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	071b      	lsls	r3, r3, #28
 80029f0:	4957      	ldr	r1, [pc, #348]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02e      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a22:	d129      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a24:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0f1b      	lsrs	r3, r3, #28
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	071b      	lsls	r3, r3, #28
 8002a58:	493d      	ldr	r1, [pc, #244]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a66:	f023 021f 	bic.w	r2, r3, #31
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4937      	ldr	r1, [pc, #220]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01d      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	0f1b      	lsrs	r3, r3, #28
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	019a      	lsls	r2, r3, #6
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	019a      	lsls	r2, r3, #6
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	071b      	lsls	r3, r3, #28
 8002ae8:	4919      	ldr	r1, [pc, #100]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fd fd6e 	bl	80005dc <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b04:	f7fd fd6a 	bl	80005dc <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0d7      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	f040 80cd 	bne.w	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b36:	f7fd fd51 	bl	80005dc <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b3e:	f7fd fd4d 	bl	80005dc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0ba      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002b50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b60:	d0ed      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d12a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b98:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	0f1b      	lsrs	r3, r3, #28
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	4944      	ldr	r1, [pc, #272]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	493d      	ldr	r1, [pc, #244]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d022      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf4:	d11d      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	0f1b      	lsrs	r3, r3, #28
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	4929      	ldr	r1, [pc, #164]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	0e1b      	lsrs	r3, r3, #24
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	019a      	lsls	r2, r3, #6
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4911      	ldr	r1, [pc, #68]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fd fc9e 	bl	80005dc <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca4:	f7fd fc9a 	bl	80005dc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e007      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc2:	d1ef      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e025      	b.n	8002d34 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fe0b 	bl	8003918 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 f811 	bl	8002d3c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	f000 f87b 	bl	8002e20 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d027      	beq.n	8002da6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <FMC_SDRAM_Init+0xe0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002d6c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8002d72:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8002d78:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8002d7e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8002d84:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8002d8a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8002d90:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002d96:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e032      	b.n	8002e0c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002dbc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002dc2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <FMC_SDRAM_Init+0xe0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002de0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8002de6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8002dec:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8002df2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8002df8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	ffff8000 	.word	0xffff8000

08002e20 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d02e      	beq.n	8002e98 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e46:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002e56:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8002e60:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002e6a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002e74:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002e7e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	e039      	b.n	8002f0c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <FMC_SDRAM_Timing_Init+0xfc>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002eca:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002eda:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002ee4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8002eee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	ff0f0fff 	.word	0xff0f0fff

08002f20 <SCB_EnableICache>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f28:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <SCB_EnableICache+0x3c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002f34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f38:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <SCB_EnableICache+0x3c>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <SCB_EnableICache+0x3c>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f4c:	f3bf 8f6f 	isb	sy
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <SCB_EnableDCache>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <SCB_EnableDCache+0x7c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002f6e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <SCB_EnableDCache+0x7c>)
 8002f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f78:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0b5b      	lsrs	r3, r3, #13
 8002f7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f82:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002f96:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002f9c:	490f      	ldr	r1, [pc, #60]	; (8002fdc <SCB_EnableDCache+0x7c>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	60ba      	str	r2, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ef      	bne.n	8002f8e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e5a      	subs	r2, r3, #1
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <SCB_EnableDCache+0x24>
 8002fb8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <SCB_EnableDCache+0x7c>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <SCB_EnableDCache+0x7c>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6153      	str	r3, [r2, #20]
 8002fc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fcc:	f3bf 8f6f 	isb	sy
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002fe4:	f7ff ff9c 	bl	8002f20 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002fe8:	f7ff ffba 	bl	8002f60 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fec:	f7fd faa4 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ff0:	f000 f80c 	bl	800300c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ff4:	f000 fad0 	bl	8003598 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8002ff8:	f000 f8a2 	bl	8003140 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002ffc:	f000 fa7e 	bl	80034fc <MX_FMC_Init>
  MX_LTDC_Init();
 8003000:	f000 f9ca 	bl	8003398 <MX_LTDC_Init>
  MX_DSIHOST_DSI_Init();
 8003004:	f000 f8d4 	bl	80031b0 <MX_DSIHOST_DSI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003008:	e7fe      	b.n	8003008 <main+0x28>
	...

0800300c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0b8      	sub	sp, #224	; 0xe0
 8003010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003012:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003016:	2234      	movs	r2, #52	; 0x34
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd38 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	2290      	movs	r2, #144	; 0x90
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fd29 	bl	8003a90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <SystemClock_Config+0x12c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a3d      	ldr	r2, [pc, #244]	; (8003138 <SystemClock_Config+0x12c>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <SystemClock_Config+0x12c>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <SystemClock_Config+0x130>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <SystemClock_Config+0x130>)
 800305c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <SystemClock_Config+0x130>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800306e:	2301      	movs	r3, #1
 8003070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800308a:	2319      	movs	r3, #25
 800308c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003090:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800309e:	2302      	movs	r3, #2
 80030a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fde1 	bl	8001c70 <HAL_RCC_OscConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80030b4:	f000 fadc 	bl	8003670 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80030b8:	f7fe fd8a 	bl	8001bd0 <HAL_PWREx_EnableOverDrive>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80030c2:	f000 fad5 	bl	8003670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c6:	230f      	movs	r3, #15
 80030c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030cc:	2302      	movs	r3, #2
 80030ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80030e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030ec:	2106      	movs	r1, #6
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f830 	bl	8002154 <HAL_RCC_ClockConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80030fa:	f000 fab9 	bl	8003670 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030fe:	2308      	movs	r3, #8
 8003100:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003102:	23c0      	movs	r3, #192	; 0xc0
 8003104:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003106:	2302      	movs	r3, #2
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800310e:	2300      	movs	r3, #0
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003112:	2301      	movs	r3, #1
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f9b2 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800312a:	f000 faa1 	bl	8003670 <Error_Handler>
  }
}
 800312e:	bf00      	nop
 8003130:	37e0      	adds	r7, #224	; 0xe0
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000

08003140 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <MX_DMA2D_Init+0x6c>)
 8003148:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <MX_DMA2D_Init+0x68>)
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <MX_DMA2D_Init+0x68>)
 800315e:	2200      	movs	r2, #0
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003164:	2200      	movs	r2, #0
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <MX_DMA2D_Init+0x68>)
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003170:	2200      	movs	r2, #0
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003176:	2200      	movs	r2, #0
 8003178:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <MX_DMA2D_Init+0x68>)
 800317c:	2200      	movs	r2, #0
 800317e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003180:	4809      	ldr	r0, [pc, #36]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003182:	f7fd fb1d 	bl	80007c0 <HAL_DMA2D_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800318c:	f000 fa70 	bl	8003670 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003190:	2101      	movs	r1, #1
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <MX_DMA2D_Init+0x68>)
 8003194:	f7fd fb6e 	bl	8000874 <HAL_DMA2D_ConfigLayer>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800319e:	f000 fa67 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200000f4 	.word	0x200000f4
 80031ac:	4002b000 	.word	0x4002b000

080031b0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0aa      	sub	sp, #168	; 0xa8
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80031b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80031c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc60 	bl	8003a90 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80031d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80031e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e6:	2234      	movs	r2, #52	; 0x34
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fc50 	bl	8003a90 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80031f0:	463b      	mov	r3, r7
 80031f2:	222c      	movs	r2, #44	; 0x2c
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fc4a 	bl	8003a90 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80031fc:	4b64      	ldr	r3, [pc, #400]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 80031fe:	4a65      	ldr	r2, [pc, #404]	; (8003394 <MX_DSIHOST_DSI_Init+0x1e4>)
 8003200:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8003208:	4b61      	ldr	r3, [pc, #388]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 800320a:	2204      	movs	r2, #4
 800320c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800320e:	4b60      	ldr	r3, [pc, #384]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8003214:	2314      	movs	r3, #20
 8003216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800321a:	2301      	movs	r3, #1
 800321c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003226:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800322a:	4619      	mov	r1, r3
 800322c:	4858      	ldr	r0, [pc, #352]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 800322e:	f7fd fbbf 	bl	80009b0 <HAL_DSI_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8003238:	f000 fa1a 	bl	8003670 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800326e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003272:	4619      	mov	r1, r3
 8003274:	4846      	ldr	r0, [pc, #280]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 8003276:	f7fd ff63 	bl	8001140 <HAL_DSI_ConfigHostTimeouts>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8003280:	f000 f9f6 	bl	8003670 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8003284:	231c      	movs	r3, #28
 8003286:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8003288:	2321      	movs	r3, #33	; 0x21
 800328a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800328c:	230f      	movs	r3, #15
 800328e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8003290:	2319      	movs	r3, #25
 8003292:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800329c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032a0:	4619      	mov	r1, r3
 80032a2:	483b      	ldr	r0, [pc, #236]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 80032a4:	f7fd fee2 	bl	800106c <HAL_DSI_ConfigPhyTimer>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80032ae:	f000 f9df 	bl	8003670 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80032b2:	2104      	movs	r1, #4
 80032b4:	4836      	ldr	r0, [pc, #216]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 80032b6:	f7fd feb1 	bl	800101c <HAL_DSI_ConfigFlowControl>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80032c0:	f000 f9d6 	bl	8003670 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80032c4:	f242 7110 	movw	r1, #10000	; 0x2710
 80032c8:	4831      	ldr	r0, [pc, #196]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 80032ca:	f7fe f801 	bl	80012d0 <HAL_DSI_SetLowPowerRXFilter>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80032d4:	f000 f9cc 	bl	8003670 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80032d8:	2100      	movs	r1, #0
 80032da:	482d      	ldr	r0, [pc, #180]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 80032dc:	f7fd fc82 	bl	8000be4 <HAL_DSI_ConfigErrorMonitor>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80032e6:	f000 f9c3 	bl	8003670 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800331e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003322:	4619      	mov	r1, r3
 8003324:	481a      	ldr	r0, [pc, #104]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 8003326:	f7fd fe1b 	bl	8000f60 <HAL_DSI_ConfigCommand>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8003330:	f000 f99e 	bl	8003670 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8003338:	2305      	movs	r3, #5
 800333a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800333c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003340:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003342:	2310      	movs	r3, #16
 8003344:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800334a:	2304      	movs	r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003362:	463b      	mov	r3, r7
 8003364:	4619      	mov	r1, r3
 8003366:	480a      	ldr	r0, [pc, #40]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 8003368:	f7fd fd20 	bl	8000dac <HAL_DSI_ConfigAdaptedCommandMode>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8003372:	f000 f97d 	bl	8003670 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003376:	2100      	movs	r1, #0
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_DSIHOST_DSI_Init+0x1e0>)
 800337a:	f7fd fcef 	bl	8000d5c <HAL_DSI_SetGenericVCID>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8003384:	f000 f974 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	37a8      	adds	r7, #168	; 0xa8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000030 	.word	0x20000030
 8003394:	40016c00 	.word	0x40016c00

08003398 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b09a      	sub	sp, #104	; 0x68
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800339e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033a2:	2234      	movs	r2, #52	; 0x34
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb72 	bl	8003a90 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80033ac:	463b      	mov	r3, r7
 80033ae:	2234      	movs	r2, #52	; 0x34
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb6c 	bl	8003a90 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80033b8:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033ba:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <MX_LTDC_Init+0x160>)
 80033bc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80033c4:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80033ca:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80033d0:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033d8:	2207      	movs	r2, #7
 80033da:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80033dc:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033de:	2203      	movs	r2, #3
 80033e0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033e4:	220e      	movs	r2, #14
 80033e6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033ea:	2205      	movs	r2, #5
 80033ec:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033f0:	f240 228e 	movw	r2, #654	; 0x28e
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80033f6:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80033f8:	f240 12e5 	movw	r2, #485	; 0x1e5
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003400:	f44f 7225 	mov.w	r2, #660	; 0x294
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003408:	f240 12e7 	movw	r2, #487	; 0x1e7
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800341e:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003426:	4833      	ldr	r0, [pc, #204]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003428:	f7fe f92a 	bl	8001680 <HAL_LTDC_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003432:	f000 f91d 	bl	8003670 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003446:	2300      	movs	r3, #0
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003458:	2305      	movs	r3, #5
 800345a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800347a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800347e:	2200      	movs	r2, #0
 8003480:	4619      	mov	r1, r3
 8003482:	481c      	ldr	r0, [pc, #112]	; (80034f4 <MX_LTDC_Init+0x15c>)
 8003484:	f7fe f9cc 	bl	8001820 <HAL_LTDC_ConfigLayer>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800348e:	f000 f8ef 	bl	8003670 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80034ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80034b4:	2305      	movs	r3, #5
 80034b6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80034d6:	463b      	mov	r3, r7
 80034d8:	2201      	movs	r2, #1
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_LTDC_Init+0x15c>)
 80034de:	f7fe f99f 	bl	8001820 <HAL_LTDC_ConfigLayer>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80034e8:	f000 f8c2 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80034ec:	bf00      	nop
 80034ee:	3768      	adds	r7, #104	; 0x68
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000004c 	.word	0x2000004c
 80034f8:	40016800 	.word	0x40016800

080034fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003514:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <MX_FMC_Init+0x94>)
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <MX_FMC_Init+0x98>)
 8003518:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <MX_FMC_Init+0x94>)
 800351c:	2201      	movs	r2, #1
 800351e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <MX_FMC_Init+0x94>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <MX_FMC_Init+0x94>)
 8003528:	2208      	movs	r2, #8
 800352a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <MX_FMC_Init+0x94>)
 800352e:	2220      	movs	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_FMC_Init+0x94>)
 8003534:	2240      	movs	r2, #64	; 0x40
 8003536:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <MX_FMC_Init+0x94>)
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_FMC_Init+0x94>)
 8003540:	2200      	movs	r2, #0
 8003542:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_FMC_Init+0x94>)
 8003546:	2200      	movs	r2, #0
 8003548:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_FMC_Init+0x94>)
 800354c:	2200      	movs	r2, #0
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_FMC_Init+0x94>)
 8003552:	2200      	movs	r2, #0
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8003556:	2310      	movs	r3, #16
 8003558:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800355a:	2310      	movs	r3, #16
 800355c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800355e:	2310      	movs	r3, #16
 8003560:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8003562:	2310      	movs	r3, #16
 8003564:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8003566:	2310      	movs	r3, #16
 8003568:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800356a:	2310      	movs	r3, #16
 800356c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800356e:	2310      	movs	r3, #16
 8003570:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <MX_FMC_Init+0x94>)
 8003578:	f7ff fbac 	bl	8002cd4 <HAL_SDRAM_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8003582:	f000 f875 	bl	8003670 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003586:	bf00      	nop
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000014c 	.word	0x2000014c
 8003594:	a0000140 	.word	0xa0000140

08003598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <MX_GPIO_Init+0xd4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a32      	ldr	r2, [pc, #200]	; (800366c <MX_GPIO_Init+0xd4>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <MX_GPIO_Init+0xd4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <MX_GPIO_Init+0xd4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <MX_GPIO_Init+0xd4>)
 80035bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <MX_GPIO_Init+0xd4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <MX_GPIO_Init+0xd4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a26      	ldr	r2, [pc, #152]	; (800366c <MX_GPIO_Init+0xd4>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <MX_GPIO_Init+0xd4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <MX_GPIO_Init+0xd4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <MX_GPIO_Init+0xd4>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b1e      	ldr	r3, [pc, #120]	; (800366c <MX_GPIO_Init+0xd4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <MX_GPIO_Init+0xd4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a1a      	ldr	r2, [pc, #104]	; (800366c <MX_GPIO_Init+0xd4>)
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <MX_GPIO_Init+0xd4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <MX_GPIO_Init+0xd4>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <MX_GPIO_Init+0xd4>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <MX_GPIO_Init+0xd4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <MX_GPIO_Init+0xd4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a0e      	ldr	r2, [pc, #56]	; (800366c <MX_GPIO_Init+0xd4>)
 8003634:	f043 0310 	orr.w	r3, r3, #16
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MX_GPIO_Init+0xd4>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_GPIO_Init+0xd4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <MX_GPIO_Init+0xd4>)
 800364c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_GPIO_Init+0xd4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	683b      	ldr	r3, [r7, #0]

}
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800

08003670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_MspInit+0x44>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_MspInit+0x44>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_MspInit+0x44>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_MspInit+0x44>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <HAL_MspInit+0x44>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	; 0x44
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_MspInit+0x44>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_DMA2D_MspInit+0x38>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10b      	bne.n	80036f2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_DMA2D_MspInit+0x3c>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_DMA2D_MspInit+0x3c>)
 80036e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_DMA2D_MspInit+0x3c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	4002b000 	.word	0x4002b000
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_DSI_MspInit+0x7c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d127      	bne.n	800377a <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_DSI_MspInit+0x80>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_DSI_MspInit+0x80>)
 8003730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_DSI_MspInit+0x80>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_DSI_MspInit+0x80>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_DSI_MspInit+0x80>)
 8003748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <HAL_DSI_MspInit+0x80>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800375a:	2304      	movs	r3, #4
 800375c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800376a:	230d      	movs	r3, #13
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	4619      	mov	r1, r3
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <HAL_DSI_MspInit+0x84>)
 8003776:	f7fd fdd9 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800377a:	bf00      	nop
 800377c:	3728      	adds	r7, #40	; 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40016c00 	.word	0x40016c00
 8003788:	40023800 	.word	0x40023800
 800378c:	40022400 	.word	0x40022400

08003790 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_LTDC_MspInit+0x38>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10b      	bne.n	80037ba <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_LTDC_MspInit+0x3c>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_LTDC_MspInit+0x3c>)
 80037a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_LTDC_MspInit+0x3c>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40016800 	.word	0x40016800
 80037cc:	40023800 	.word	0x40023800

080037d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_FMC_MspInit+0x124>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d17e      	bne.n	80038ea <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_FMC_MspInit+0x124>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_FMC_MspInit+0x128>)
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <HAL_FMC_MspInit+0x128>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6393      	str	r3, [r2, #56]	; 0x38
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <HAL_FMC_MspInit+0x128>)
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800380a:	2360      	movs	r3, #96	; 0x60
 800380c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800381a:	230c      	movs	r3, #12
 800381c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4836      	ldr	r0, [pc, #216]	; (80038fc <HAL_FMC_MspInit+0x12c>)
 8003824:	f7fd fd82 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8003828:	f248 1337 	movw	r3, #33079	; 0x8137
 800382c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003836:	2303      	movs	r3, #3
 8003838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800383a:	230c      	movs	r3, #12
 800383c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800383e:	1d3b      	adds	r3, r7, #4
 8003840:	4619      	mov	r1, r3
 8003842:	482f      	ldr	r0, [pc, #188]	; (8003900 <HAL_FMC_MspInit+0x130>)
 8003844:	f7fd fd72 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8003848:	f24c 7303 	movw	r3, #50947	; 0xc703
 800384c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800385a:	230c      	movs	r3, #12
 800385c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4828      	ldr	r0, [pc, #160]	; (8003904 <HAL_FMC_MspInit+0x134>)
 8003864:	f7fd fd62 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 8003868:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800386c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800387a:	230c      	movs	r3, #12
 800387c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4821      	ldr	r0, [pc, #132]	; (8003908 <HAL_FMC_MspInit+0x138>)
 8003884:	f7fd fd52 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003888:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800388c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800389a:	230c      	movs	r3, #12
 800389c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	481a      	ldr	r0, [pc, #104]	; (800390c <HAL_FMC_MspInit+0x13c>)
 80038a4:	f7fd fd42 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 80038a8:	f64f 7320 	movw	r3, #65312	; 0xff20
 80038ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ba:	230c      	movs	r3, #12
 80038bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4813      	ldr	r0, [pc, #76]	; (8003910 <HAL_FMC_MspInit+0x140>)
 80038c4:	f7fd fd32 	bl	800132c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 80038c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80038cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d6:	2303      	movs	r3, #3
 80038d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038da:	230c      	movs	r3, #12
 80038dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	480c      	ldr	r0, [pc, #48]	; (8003914 <HAL_FMC_MspInit+0x144>)
 80038e4:	f7fd fd22 	bl	800132c <HAL_GPIO_Init>
 80038e8:	e000      	b.n	80038ec <HAL_FMC_MspInit+0x11c>
    return;
 80038ea:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000028 	.word	0x20000028
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020400 	.word	0x40020400
 8003900:	40021800 	.word	0x40021800
 8003904:	40020c00 	.word	0x40020c00
 8003908:	40022000 	.word	0x40022000
 800390c:	40021400 	.word	0x40021400
 8003910:	40021c00 	.word	0x40021c00
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003920:	f7ff ff56 	bl	80037d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <MemManage_Handler+0x4>

08003946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <UsageFault_Handler+0x4>

08003952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003980:	f7fc fe18 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <SystemInit+0x5c>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <SystemInit+0x5c>)
 8003994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <SystemInit+0x60>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <SystemInit+0x60>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <SystemInit+0x60>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <SystemInit+0x60>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	490d      	ldr	r1, [pc, #52]	; (80039e8 <SystemInit+0x60>)
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <SystemInit+0x64>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <SystemInit+0x60>)
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <SystemInit+0x68>)
 80039be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <SystemInit+0x60>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <SystemInit+0x60>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <SystemInit+0x60>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <SystemInit+0x5c>)
 80039d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d8:	609a      	str	r2, [r3, #8]
#endif
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	40023800 	.word	0x40023800
 80039ec:	fef6ffff 	.word	0xfef6ffff
 80039f0:	24003010 	.word	0x24003010

080039f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039fa:	e003      	b.n	8003a04 <LoopCopyDataInit>

080039fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a02:	3104      	adds	r1, #4

08003a04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a0c:	d3f6      	bcc.n	80039fc <CopyDataInit>
  ldr  r2, =_sbss
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a10:	e002      	b.n	8003a18 <LoopFillZerobss>

08003a12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a14:	f842 3b04 	str.w	r3, [r2], #4

08003a18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a1c:	d3f9      	bcc.n	8003a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a1e:	f7ff ffb3 	bl	8003988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a22:	f000 f811 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a26:	f7ff fadb 	bl	8002fe0 <main>
  bx  lr    
 8003a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a2c:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8003a30:	08003ad8 	.word	0x08003ad8
  ldr  r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a38:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003a3c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003a40:	20000180 	.word	0x20000180

08003a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a44:	e7fe      	b.n	8003a44 <ADC_IRQHandler>
	...

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4e0d      	ldr	r6, [pc, #52]	; (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1ba4      	subs	r4, r4, r6
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2500      	movs	r5, #0
 8003a54:	42a5      	cmp	r5, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4e0b      	ldr	r6, [pc, #44]	; (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	; (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f000 f820 	bl	8003aa0 <_init>
 8003a60:	1ba4      	subs	r4, r4, r6
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2500      	movs	r5, #0
 8003a66:	42a5      	cmp	r5, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a70:	4798      	blx	r3
 8003a72:	3501      	adds	r5, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a7a:	4798      	blx	r3
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	08003ad0 	.word	0x08003ad0
 8003a84:	08003ad0 	.word	0x08003ad0
 8003a88:	08003ad0 	.word	0x08003ad0
 8003a8c:	08003ad4 	.word	0x08003ad4

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <_init>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr

08003aac <_fini>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr
