
projecto_reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d90  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eac8  0800eac8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eac8  0800eac8  0001eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead0  0800ead0  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead0  0800ead0  0001ead0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ead4  0800ead4  0001ead4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800ead8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  200000dc  0800ebb4  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800ebb4  00020710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f63f  00000000  00000000  0002010a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000397d  00000000  00000000  0003f749  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001928  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  000449f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f75b  00000000  00000000  00046150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014d71  00000000  00000000  000758ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123397  00000000  00000000  0008a61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad9b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e00  00000000  00000000  001ada30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000dc 	.word	0x200000dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ad20 	.word	0x0800ad20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e0 	.word	0x200000e0
 800023c:	0800ad20 	.word	0x0800ad20

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fd89 	bl	800112c <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000f8 	.word	0x200000f8

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fd70 	bl	800112c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd8e 	bl	8001174 <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd69 	bl	8001174 <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000fc 	.word	0x200000fc

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fd46 	bl	80011b0 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000fc 	.word	0x200000fc

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcd8 	bl	8001140 <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fcc4 	bl	8001140 <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000f8 	.word	0x200000f8

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fab3 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 faaf 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 faab 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 faa7 	bl	8001dc8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 faa3 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fa9f 	bl	8001dc8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fcae 	bl	80011ec <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fa98 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fa94 	bl	8001dc8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fca3 	bl	80011ec <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fa8d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fa89 	bl	8001dc8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa85 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa81 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa7d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa79 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa75 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa71 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa6d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa69 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa65 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa61 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa5d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa59 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa55 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa51 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa4d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fa49 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa45 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fa41 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa3d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa39 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa35 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa31 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa2d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa29 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa25 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa21 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa1d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 fa19 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa15 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fa11 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa0d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 fa09 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa05 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa01 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f9fd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 f9f9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9f5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 f9f1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9ed 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 f9e9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9e5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 f9e1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9dd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9d9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9d5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 f9d1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9cd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 f9c9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9c5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9c1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9bd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f9b9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9b5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9b1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9ad 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9a9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9a5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f9a1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f99d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f999 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f995 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f991 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f98d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f989 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f985 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f981 	bl	8001dc8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f97d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f979 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f975 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f971 	bl	8001dc8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f96d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f969 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f965 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f961 	bl	8001dc8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f95d 	bl	8001dc8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f959 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f955 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f951 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f94d 	bl	8001dc8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f949 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 fb58 	bl	80011ec <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f93b 	bl	8001dc8 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800afcc 	.word	0x0800afcc
 8000b58:	0800ae84 	.word	0x0800ae84
 8000b5c:	0800afd0 	.word	0x0800afd0
 8000b60:	0800ae88 	.word	0x0800ae88
 8000b64:	0800afd4 	.word	0x0800afd4
 8000b68:	0800afd8 	.word	0x0800afd8
 8000b6c:	0800afdc 	.word	0x0800afdc
 8000b70:	0800afe0 	.word	0x0800afe0
 8000b74:	0800afe4 	.word	0x0800afe4
 8000b78:	0800afe8 	.word	0x0800afe8
 8000b7c:	0800afec 	.word	0x0800afec
 8000b80:	0800aff0 	.word	0x0800aff0
 8000b84:	0800aff4 	.word	0x0800aff4
 8000b88:	0800aff8 	.word	0x0800aff8
 8000b8c:	0800affc 	.word	0x0800affc
 8000b90:	0800b000 	.word	0x0800b000
 8000b94:	0800b004 	.word	0x0800b004
 8000b98:	0800b008 	.word	0x0800b008
 8000b9c:	0800b00c 	.word	0x0800b00c
 8000ba0:	0800b010 	.word	0x0800b010
 8000ba4:	0800b014 	.word	0x0800b014
 8000ba8:	0800aeb4 	.word	0x0800aeb4
 8000bac:	0800b018 	.word	0x0800b018
 8000bb0:	0800b01c 	.word	0x0800b01c
 8000bb4:	0800b020 	.word	0x0800b020
 8000bb8:	0800b024 	.word	0x0800b024
 8000bbc:	0800b028 	.word	0x0800b028
 8000bc0:	0800b02c 	.word	0x0800b02c
 8000bc4:	0800b030 	.word	0x0800b030
 8000bc8:	0800b034 	.word	0x0800b034
 8000bcc:	0800b038 	.word	0x0800b038
 8000bd0:	0800aeb8 	.word	0x0800aeb8
 8000bd4:	0800aebc 	.word	0x0800aebc
 8000bd8:	0800b03c 	.word	0x0800b03c
 8000bdc:	0800aec4 	.word	0x0800aec4
 8000be0:	0800b040 	.word	0x0800b040
 8000be4:	0800aed4 	.word	0x0800aed4
 8000be8:	0800b044 	.word	0x0800b044
 8000bec:	0800aee4 	.word	0x0800aee4
 8000bf0:	0800b048 	.word	0x0800b048
 8000bf4:	0800b080 	.word	0x0800b080
 8000bf8:	0800aef0 	.word	0x0800aef0
 8000bfc:	0800b04c 	.word	0x0800b04c
 8000c00:	0800aefc 	.word	0x0800aefc
 8000c04:	0800af0c 	.word	0x0800af0c
 8000c08:	0800af1c 	.word	0x0800af1c
 8000c0c:	0800af28 	.word	0x0800af28
 8000c10:	0800af38 	.word	0x0800af38
 8000c14:	0800b050 	.word	0x0800b050
 8000c18:	0800af48 	.word	0x0800af48
 8000c1c:	0800b054 	.word	0x0800b054
 8000c20:	0800af54 	.word	0x0800af54
 8000c24:	0800af60 	.word	0x0800af60
 8000c28:	0800af6c 	.word	0x0800af6c
 8000c2c:	0800af7c 	.word	0x0800af7c
 8000c30:	0800af8c 	.word	0x0800af8c
 8000c34:	0800af98 	.word	0x0800af98
 8000c38:	0800afa8 	.word	0x0800afa8
 8000c3c:	0800b084 	.word	0x0800b084
 8000c40:	0800b088 	.word	0x0800b088
 8000c44:	0800b08c 	.word	0x0800b08c
 8000c48:	0800b090 	.word	0x0800b090
 8000c4c:	0800b094 	.word	0x0800b094
 8000c50:	0800afb8 	.word	0x0800afb8
 8000c54:	0800ae8c 	.word	0x0800ae8c
 8000c58:	0800aea0 	.word	0x0800aea0
 8000c5c:	0800b058 	.word	0x0800b058
 8000c60:	0800b05c 	.word	0x0800b05c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f8ae 	bl	8001dc8 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8a6 	bl	8001dc8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f8a2 	bl	8001dc8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f89e 	bl	8001dc8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f89a 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f896 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f892 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f88e 	bl	8001dc8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f88a 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f886 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f882 	bl	8001dc8 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800b060 	.word	0x0800b060
 8000cd4:	0800b064 	.word	0x0800b064
 8000cd8:	0800afbc 	.word	0x0800afbc
 8000cdc:	0800afc4 	.word	0x0800afc4
 8000ce0:	0800b068 	.word	0x0800b068
 8000ce4:	0800b06c 	.word	0x0800b06c
 8000ce8:	0800b070 	.word	0x0800b070
 8000cec:	0800b074 	.word	0x0800b074
 8000cf0:	0800b078 	.word	0x0800b078
 8000cf4:	0800afcc 	.word	0x0800afcc
 8000cf8:	0800b07c 	.word	0x0800b07c

08000cfc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <BSP_LED_Init+0x58>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <BSP_LED_Init+0x5c>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 ff2c 	bl	8004ba0 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030

08000d5c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <BSP_LED_Toggle+0x2c>)
 8000d6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <BSP_LED_Toggle+0x30>)
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f004 f9f6 	bl	800516a <HAL_GPIO_TogglePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	20000028 	.word	0x20000028

08000d90 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <BSP_PB_Init+0x9c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d111      	bne.n	8000de2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <BSP_PB_Init+0xa0>)
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fedf 	bl	8004ba0 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d11d      	bne.n	8000e24 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000de8:	2301      	movs	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <BSP_PB_Init+0xa4>)
 8000df6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <BSP_PB_Init+0xa0>)
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	f107 020c 	add.w	r2, r7, #12
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 feca 	bl	8004ba0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	210f      	movs	r1, #15
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f9b8 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 f9cf 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	20000038 	.word	0x20000038
 8000e34:	10110000 	.word	0x10110000

08000e38 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <BSP_PB_GetState+0x28>)
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 f95a 	bl	8005108 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000038 	.word	0x20000038

08000e64 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <I2Cx_MspInit+0x16c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d15b      	bne.n	8000f2c <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e74:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e8c:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4845      	ldr	r0, [pc, #276]	; (8000fd8 <I2Cx_MspInit+0x174>)
 8000ec2:	f003 fe6d 	bl	8004ba0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4841      	ldr	r0, [pc, #260]	; (8000fdc <I2Cx_MspInit+0x178>)
 8000ed6:	f003 fe63 	bl	8004ba0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a37      	ldr	r2, [pc, #220]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efc:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f08:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	205f      	movs	r0, #95	; 0x5f
 8000f10:	f002 f93b 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f14:	205f      	movs	r0, #95	; 0x5f
 8000f16:	f002 f954 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	2060      	movs	r0, #96	; 0x60
 8000f20:	f002 f933 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f24:	2060      	movs	r0, #96	; 0x60
 8000f26:	f002 f94c 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000f2a:	e04d      	b.n	8000fc8 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f56:	2304      	movs	r3, #4
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <I2Cx_MspInit+0x178>)
 8000f62:	f003 fe1d 	bl	8004ba0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <I2Cx_MspInit+0x178>)
 8000f74:	f003 fe14 	bl	8004ba0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <I2Cx_MspInit+0x170>)
 8000fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fa6:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	210f      	movs	r1, #15
 8000fac:	201f      	movs	r0, #31
 8000fae:	f002 f8ec 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000fb2:	201f      	movs	r0, #31
 8000fb4:	f002 f905 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210f      	movs	r1, #15
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f002 f8e4 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f002 f8fd 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000100 	.word	0x20000100
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f004 fbf3 	bl	80057d4 <HAL_I2C_GetState>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d125      	bne.n	8001040 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <I2Cx_Init+0x68>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d103      	bne.n	8001004 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <I2Cx_Init+0x6c>)
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e002      	b.n	800100a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <I2Cx_Init+0x70>)
 8001008:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <I2Cx_Init+0x74>)
 800100e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff15 	bl	8000e64 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f004 f8c8 	bl	80051d0 <HAL_I2C_Init>
  }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000100 	.word	0x20000100
 800104c:	40006000 	.word	0x40006000
 8001050:	40005400 	.word	0x40005400
 8001054:	40912732 	.word	0x40912732

08001058 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af04      	add	r7, sp, #16
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4603      	mov	r3, r0
 8001068:	72fb      	strb	r3, [r7, #11]
 800106a:	460b      	mov	r3, r1
 800106c:	813b      	strh	r3, [r7, #8]
 800106e:	4613      	mov	r3, r2
 8001070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	b299      	uxth	r1, r3
 800107a:	88f8      	ldrh	r0, [r7, #6]
 800107c:	893a      	ldrh	r2, [r7, #8]
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4603      	mov	r3, r0
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f004 fa86 	bl	80055a0 <HAL_I2C_Mem_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	4619      	mov	r1, r3
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f832 	bl	800110c <I2Cx_Error>
  }
  return status;
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b08a      	sub	sp, #40	; 0x28
 80010b6:	af04      	add	r7, sp, #16
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	4608      	mov	r0, r1
 80010bc:	4611      	mov	r1, r2
 80010be:	461a      	mov	r2, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	72fb      	strb	r3, [r7, #11]
 80010c4:	460b      	mov	r3, r1
 80010c6:	813b      	strh	r3, [r7, #8]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	b299      	uxth	r1, r3
 80010d4:	88f8      	ldrh	r0, [r7, #6]
 80010d6:	893a      	ldrh	r2, [r7, #8]
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4603      	mov	r3, r0
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f004 f945 	bl	8005378 <HAL_I2C_Mem_Write>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	4619      	mov	r1, r3
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f805 	bl	800110c <I2Cx_Error>
  }
  return status;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f004 f8e9 	bl	80052f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff5e 	bl	8000fe0 <I2Cx_Init>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TS_IO_Init+0x10>)
 8001132:	f7ff ff55 	bl	8000fe0 <I2Cx_Init>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000100 	.word	0x20000100

08001140 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	460b      	mov	r3, r1
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	4613      	mov	r3, r2
 8001150:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	b29a      	uxth	r2, r3
 8001156:	79f9      	ldrb	r1, [r7, #7]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	1d7b      	adds	r3, r7, #5
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <TS_IO_Write+0x30>)
 8001164:	f7ff ffa5 	bl	80010b2 <I2Cx_WriteMultiple>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000100 	.word	0x20000100

08001174 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	b29a      	uxth	r2, r3
 800118c:	79f9      	ldrb	r1, [r7, #7]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030f 	add.w	r3, r7, #15
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <TS_IO_Read+0x38>)
 800119c:	f7ff ff5c 	bl	8001058 <I2Cx_ReadMultiple>

  return read_value;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000100 	.word	0x20000100

080011b0 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	603a      	str	r2, [r7, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	79f9      	ldrb	r1, [r7, #7]
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <TS_IO_ReadMultiple+0x38>)
 80011d8:	f7ff ff3e 	bl	8001058 <I2Cx_ReadMultiple>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29b      	uxth	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000100 	.word	0x20000100

080011ec <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f001 fb8b 	bl	8002910 <HAL_Delay>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001206:	2001      	movs	r0, #1
 8001208:	f000 f804 	bl	8001214 <BSP_LCD_InitEx>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	; 0x40
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800121e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800122c:	f000 f936 	bl	800149c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001230:	f000 fdf4 	bl	8001e1c <LCD_IO_GetID>
 8001234:	4603      	mov	r3, r0
 8001236:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001238:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800123a:	2b11      	cmp	r3, #17
 800123c:	d001      	beq.n	8001242 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800123e:	2301      	movs	r3, #1
 8001240:	e113      	b.n	800146a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001242:	f000 fdf3 	bl	8001e2c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001246:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <BSP_LCD_InitEx+0x260>)
 8001248:	4a8b      	ldr	r2, [pc, #556]	; (8001478 <BSP_LCD_InitEx+0x264>)
 800124a:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 800124c:	4889      	ldr	r0, [pc, #548]	; (8001474 <BSP_LCD_InitEx+0x260>)
 800124e:	f002 fd99 	bl	8003d84 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001256:	2305      	movs	r3, #5
 8001258:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800125e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001262:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001264:	4b83      	ldr	r3, [pc, #524]	; (8001474 <BSP_LCD_InitEx+0x260>)
 8001266:	2201      	movs	r2, #1
 8001268:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	4a83      	ldr	r2, [pc, #524]	; (800147c <BSP_LCD_InitEx+0x268>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0a9b      	lsrs	r3, r3, #10
 8001276:	4a7f      	ldr	r2, [pc, #508]	; (8001474 <BSP_LCD_InitEx+0x260>)
 8001278:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	487c      	ldr	r0, [pc, #496]	; (8001474 <BSP_LCD_InitEx+0x260>)
 8001282:	f002 fc65 	bl	8003b50 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800128c:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 800128e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001292:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <BSP_LCD_InitEx+0x270>)
 8001296:	f44f 7248 	mov.w	r2, #800	; 0x320
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e007      	b.n	80012ae <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 80012a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80012a4:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <BSP_LCD_InitEx+0x270>)
 80012a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012ac:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80012ae:	4b74      	ldr	r3, [pc, #464]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80012b4:	4b73      	ldr	r3, [pc, #460]	; (8001484 <BSP_LCD_InitEx+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80012ba:	2301      	movs	r3, #1
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80012be:	230f      	movs	r3, #15
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80012c2:	2310      	movs	r3, #16
 80012c4:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80012c6:	2302      	movs	r3, #2
 80012c8:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80012ca:	2322      	movs	r3, #34	; 0x22
 80012cc:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80012ce:	2322      	movs	r3, #34	; 0x22
 80012d0:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80012d2:	4b6d      	ldr	r3, [pc, #436]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80012d8:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012da:	2205      	movs	r2, #5
 80012dc:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80012de:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80012f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012fc:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001304:	4a60      	ldr	r2, [pc, #384]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130e:	fb02 f203 	mul.w	r2, r2, r3
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	4a5b      	ldr	r2, [pc, #364]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800131a:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001320:	fb02 f203 	mul.w	r2, r2, r3
 8001324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4a57      	ldr	r2, [pc, #348]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800132c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800132e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	441a      	add	r2, r3
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	441a      	add	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800133e:	fb02 f203 	mul.w	r2, r2, r3
 8001342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001352:	4a4d      	ldr	r2, [pc, #308]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001364:	4b48      	ldr	r3, [pc, #288]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001366:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800136a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800136e:	2210      	movs	r2, #16
 8001370:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001374:	2200      	movs	r2, #0
 8001376:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800137a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800138a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001390:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001396:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <BSP_LCD_InitEx+0x274>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80013a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80013a8:	4937      	ldr	r1, [pc, #220]	; (8001488 <BSP_LCD_InitEx+0x274>)
 80013aa:	4832      	ldr	r0, [pc, #200]	; (8001474 <BSP_LCD_InitEx+0x260>)
 80013ac:	f002 fe42 	bl	8004034 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	4a35      	ldr	r2, [pc, #212]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013b6:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4413      	add	r3, r2
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a32      	ldr	r2, [pc, #200]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013c2:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	441a      	add	r2, r3
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a2e      	ldr	r2, [pc, #184]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013d4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	441a      	add	r2, r3
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	441a      	add	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a28      	ldr	r2, [pc, #160]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <BSP_LCD_InitEx+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013f2:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <BSP_LCD_InitEx+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a24      	ldr	r2, [pc, #144]	; (800148c <BSP_LCD_InitEx+0x278>)
 80013fa:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <BSP_LCD_InitEx+0x27c>)
 80013fe:	2208      	movs	r2, #8
 8001400:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <BSP_LCD_InitEx+0x27c>)
 8001404:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001408:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <BSP_LCD_InitEx+0x27c>)
 800140c:	2207      	movs	r2, #7
 800140e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <BSP_LCD_InitEx+0x27c>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001416:	481e      	ldr	r0, [pc, #120]	; (8001490 <BSP_LCD_InitEx+0x27c>)
 8001418:	f005 fb5a 	bl	8006ad0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <BSP_LCD_InitEx+0x278>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <BSP_LCD_InitEx+0x278>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <BSP_LCD_InitEx+0x278>)
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <BSP_LCD_InitEx+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <BSP_LCD_InitEx+0x278>)
 800143c:	4a15      	ldr	r2, [pc, #84]	; (8001494 <BSP_LCD_InitEx+0x280>)
 800143e:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001440:	4911      	ldr	r1, [pc, #68]	; (8001488 <BSP_LCD_InitEx+0x274>)
 8001442:	4812      	ldr	r0, [pc, #72]	; (800148c <BSP_LCD_InitEx+0x278>)
 8001444:	f004 fe98 	bl	8006178 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <BSP_LCD_InitEx+0x278>)
 800144a:	f004 fbed 	bl	8005c28 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <BSP_LCD_InitEx+0x260>)
 8001450:	f003 fa82 	bl	8004958 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001454:	f000 fe6a 	bl	800212c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <BSP_LCD_InitEx+0x284>)
 800145a:	f000 f901 	bl	8001660 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4619      	mov	r1, r3
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff f9f4 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3740      	adds	r7, #64	; 0x40
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000428 	.word	0x20000428
 8001478:	40016c00 	.word	0x40016c00
 800147c:	43215e57 	.word	0x43215e57
 8001480:	2000005c 	.word	0x2000005c
 8001484:	20000060 	.word	0x20000060
 8001488:	2000014c 	.word	0x2000014c
 800148c:	20000380 	.word	0x20000380
 8001490:	200001d4 	.word	0x200001d4
 8001494:	40016800 	.word	0x40016800
 8001498:	2000003c 	.word	0x2000003c

0800149c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <BSP_LCD_Reset+0x68>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <BSP_LCD_Reset+0x68>)
 80014a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <BSP_LCD_Reset+0x68>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80014ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014be:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <BSP_LCD_Reset+0x6c>)
 80014d2:	f003 fb65 	bl	8004ba0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <BSP_LCD_Reset+0x6c>)
 80014de:	f003 fe2b 	bl	8005138 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80014e2:	2014      	movs	r0, #20
 80014e4:	f001 fa14 	bl	8002910 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <BSP_LCD_Reset+0x6c>)
 80014f0:	f003 fe22 	bl	8005138 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80014f4:	200a      	movs	r0, #10
 80014f6:	f001 fa0b 	bl	8002910 <HAL_Delay>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40022400 	.word	0x40022400

0800150c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <BSP_LCD_GetXSize+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000005c 	.word	0x2000005c

08001524 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <BSP_LCD_GetYSize+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000060 	.word	0x20000060

0800153c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800154c:	f7ff ffde 	bl	800150c <BSP_LCD_GetXSize>
 8001550:	4603      	mov	r3, r0
 8001552:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001558:	f7ff ffe4 	bl	8001524 <BSP_LCD_GetYSize>
 800155c:	4603      	mov	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001588:	2307      	movs	r3, #7
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800158c:	f7ff ffbe 	bl	800150c <BSP_LCD_GetXSize>
 8001590:	4603      	mov	r3, r0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001594:	f7ff ffc6 	bl	8001524 <BSP_LCD_GetYSize>
 8001598:	4603      	mov	r3, r0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <BSP_LCD_LayerDefaultInit+0xb4>)
 80015a6:	f004 fc0f 	bl	8005dc8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4911      	ldr	r1, [pc, #68]	; (80015f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3304      	adds	r3, #4
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	490c      	ldr	r1, [pc, #48]	; (80015f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	4907      	ldr	r1, [pc, #28]	; (80015f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3740      	adds	r7, #64	; 0x40
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000380 	.word	0x20000380
 80015f4:	200001bc 	.word	0x200001bc
 80015f8:	2000003c 	.word	0x2000003c

080015fc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <BSP_LCD_SetTextColor+0x28>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <BSP_LCD_SetTextColor+0x2c>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200001b8 	.word	0x200001b8
 8001628:	200001bc 	.word	0x200001bc

0800162c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <BSP_LCD_SetBackColor+0x2c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <BSP_LCD_SetBackColor+0x30>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3304      	adds	r3, #4
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200001b8 	.word	0x200001b8
 800165c:	200001bc 	.word	0x200001bc

08001660 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <BSP_LCD_SetFont+0x2c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <BSP_LCD_SetFont+0x30>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3308      	adds	r3, #8
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200001b8 	.word	0x200001b8
 8001690:	200001bc 	.word	0x200001bc

08001694 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <BSP_LCD_Clear+0x48>)
 800169e:	681c      	ldr	r4, [r3, #0]
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <BSP_LCD_Clear+0x48>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <BSP_LCD_Clear+0x4c>)
 80016a6:	2134      	movs	r1, #52	; 0x34
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	335c      	adds	r3, #92	; 0x5c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461d      	mov	r5, r3
 80016b4:	f7ff ff2a 	bl	800150c <BSP_LCD_GetXSize>
 80016b8:	4606      	mov	r6, r0
 80016ba:	f7ff ff33 	bl	8001524 <BSP_LCD_GetYSize>
 80016be:	4602      	mov	r2, r0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	4632      	mov	r2, r6
 80016cc:	4629      	mov	r1, r5
 80016ce:	4620      	mov	r0, r4
 80016d0:	f000 fcf4 	bl	80020bc <LL_FillBuffer>
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016dc:	200001b8 	.word	0x200001b8
 80016e0:	20000380 	.word	0x20000380

080016e4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
 80016ee:	460b      	mov	r3, r1
 80016f0:	80bb      	strh	r3, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <BSP_LCD_DisplayChar+0x80>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <BSP_LCD_DisplayChar+0x84>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3308      	adds	r3, #8
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <BSP_LCD_DisplayChar+0x80>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4c14      	ldr	r4, [pc, #80]	; (8001768 <BSP_LCD_DisplayChar+0x84>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4423      	add	r3, r4
 8001722:	3308      	adds	r3, #8
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001728:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <BSP_LCD_DisplayChar+0x80>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <BSP_LCD_DisplayChar+0x84>)
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4423      	add	r3, r4
 800173c:	3308      	adds	r3, #8
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	3307      	adds	r3, #7
 8001744:	2b00      	cmp	r3, #0
 8001746:	da00      	bge.n	800174a <BSP_LCD_DisplayChar+0x66>
 8001748:	3307      	adds	r3, #7
 800174a:	10db      	asrs	r3, r3, #3
 800174c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001750:	18ca      	adds	r2, r1, r3
 8001752:	88b9      	ldrh	r1, [r7, #4]
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fbf8 	bl	8001f4c <DrawChar>
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	200001b8 	.word	0x200001b8
 8001768:	200001bc 	.word	0x200001bc

0800176c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001782:	2301      	movs	r3, #1
 8001784:	83fb      	strh	r3, [r7, #30]
 8001786:	2300      	movs	r3, #0
 8001788:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001796:	e002      	b.n	800179e <BSP_LCD_DisplayStringAt+0x32>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3301      	adds	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	617a      	str	r2, [r7, #20]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f6      	bne.n	8001798 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017aa:	f7ff feaf 	bl	800150c <BSP_LCD_GetXSize>
 80017ae:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	494f      	ldr	r1, [pc, #316]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c8:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d01c      	beq.n	800180a <BSP_LCD_DisplayStringAt+0x9e>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <BSP_LCD_DisplayStringAt+0x98>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d12e      	bne.n	8001836 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad1      	subs	r1, r2, r3
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4843      	ldr	r0, [pc, #268]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	fb03 f301 	mul.w	r3, r3, r1
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	4413      	add	r3, r2
 8001800:	83fb      	strh	r3, [r7, #30]
      break;
 8001802:	e01b      	b.n	800183c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001804:	89fb      	ldrh	r3, [r7, #14]
 8001806:	83fb      	strh	r3, [r7, #30]
      break;
 8001808:	e018      	b.n	800183c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b299      	uxth	r1, r3
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4836      	ldr	r0, [pc, #216]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4403      	add	r3, r0
 8001822:	3308      	adds	r3, #8
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	889b      	ldrh	r3, [r3, #4]
 8001828:	fb11 f303 	smulbb	r3, r1, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	83fb      	strh	r3, [r7, #30]
      break;
 8001834:	e002      	b.n	800183c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	83fb      	strh	r3, [r7, #30]
      break;
 800183a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800183c:	8bfb      	ldrh	r3, [r7, #30]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <BSP_LCD_DisplayStringAt+0xde>
 8001842:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da1d      	bge.n	8001886 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800184e:	e01a      	b.n	8001886 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	89b9      	ldrh	r1, [r7, #12]
 8001856:	8bfb      	ldrh	r3, [r7, #30]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff43 	bl	80016e4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4923      	ldr	r1, [pc, #140]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	3308      	adds	r3, #8
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	889a      	ldrh	r2, [r3, #4]
 8001874:	8bfb      	ldrh	r3, [r7, #30]
 8001876:	4413      	add	r3, r2
 8001878:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
    i++;
 8001880:	8bbb      	ldrh	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2dc      	uxtb	r4, r3
 8001894:	f7ff fe3a 	bl	800150c <BSP_LCD_GetXSize>
 8001898:	4605      	mov	r5, r0
 800189a:	8bb9      	ldrh	r1, [r7, #28]
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4403      	add	r3, r0
 80018ac:	3308      	adds	r3, #8
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	fb03 f301 	mul.w	r3, r3, r1
 80018b6:	1aeb      	subs	r3, r5, r3
 80018b8:	b299      	uxth	r1, r3
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <BSP_LCD_DisplayStringAt+0x180>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <BSP_LCD_DisplayStringAt+0x184>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4403      	add	r3, r0
 80018ca:	3308      	adds	r3, #8
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	4299      	cmp	r1, r3
 80018d2:	bf2c      	ite	cs
 80018d4:	2301      	movcs	r3, #1
 80018d6:	2300      	movcc	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4023      	ands	r3, r4
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1b6      	bne.n	8001850 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001b8 	.word	0x200001b8
 80018f0:	200001bc 	.word	0x200001bc

080018f4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	460b      	mov	r3, r1
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <BSP_LCD_DrawHLine+0x70>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <BSP_LCD_DrawHLine+0x74>)
 8001910:	2134      	movs	r1, #52	; 0x34
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	335c      	adds	r3, #92	; 0x5c
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	f7ff fdf6 	bl	800150c <BSP_LCD_GetXSize>
 8001920:	4602      	mov	r2, r0
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	fb03 f202 	mul.w	r2, r3, r2
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4423      	add	r3, r4
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <BSP_LCD_DrawHLine+0x70>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	68fc      	ldr	r4, [r7, #12]
 8001938:	887d      	ldrh	r5, [r7, #2]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <BSP_LCD_DrawHLine+0x70>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	490b      	ldr	r1, [pc, #44]	; (800196c <BSP_LCD_DrawHLine+0x78>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	462a      	mov	r2, r5
 8001956:	4621      	mov	r1, r4
 8001958:	f000 fbb0 	bl	80020bc <LL_FillBuffer>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	200001b8 	.word	0x200001b8
 8001968:	20000380 	.word	0x20000380
 800196c:	200001bc 	.word	0x200001bc

08001970 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b087      	sub	sp, #28
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	460b      	mov	r3, r1
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <BSP_LCD_DrawVLine+0x78>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <BSP_LCD_DrawVLine+0x7c>)
 800198c:	2134      	movs	r1, #52	; 0x34
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	335c      	adds	r3, #92	; 0x5c
 8001996:	681c      	ldr	r4, [r3, #0]
 8001998:	f7ff fdb8 	bl	800150c <BSP_LCD_GetXSize>
 800199c:	4602      	mov	r2, r0
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	fb03 f202 	mul.w	r2, r3, r2
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4423      	add	r3, r4
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <BSP_LCD_DrawVLine+0x78>)
 80019b0:	681c      	ldr	r4, [r3, #0]
 80019b2:	68fd      	ldr	r5, [r7, #12]
 80019b4:	887e      	ldrh	r6, [r7, #2]
 80019b6:	f7ff fda9 	bl	800150c <BSP_LCD_GetXSize>
 80019ba:	4603      	mov	r3, r0
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <BSP_LCD_DrawVLine+0x78>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <BSP_LCD_DrawVLine+0x80>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	9100      	str	r1, [sp, #0]
 80019d4:	4633      	mov	r3, r6
 80019d6:	2201      	movs	r2, #1
 80019d8:	4629      	mov	r1, r5
 80019da:	4620      	mov	r0, r4
 80019dc:	f000 fb6e 	bl	80020bc <LL_FillBuffer>
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	200001b8 	.word	0x200001b8
 80019ec:	20000380 	.word	0x20000380
 80019f0:	200001bc 	.word	0x200001bc

080019f4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	460b      	mov	r3, r1
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	f1c3 0303 	rsb	r3, r3, #3
 8001a0e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a18:	e0cf      	b.n	8001bba <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4413      	add	r3, r2
 8001a22:	b298      	uxth	r0, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	88ba      	ldrh	r2, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b29c      	uxth	r4, r3
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4967      	ldr	r1, [pc, #412]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f000 fa5c 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b298      	uxth	r0, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	88ba      	ldrh	r2, [r7, #4]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	b29c      	uxth	r4, r3
 8001a5c:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	495b      	ldr	r1, [pc, #364]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f000 fa45 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b298      	uxth	r0, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	88ba      	ldrh	r2, [r7, #4]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	b29c      	uxth	r4, r3
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4950      	ldr	r1, [pc, #320]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	f000 fa2e 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b298      	uxth	r0, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	88ba      	ldrh	r2, [r7, #4]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b29c      	uxth	r4, r3
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4944      	ldr	r1, [pc, #272]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4621      	mov	r1, r4
 8001ace:	f000 fa17 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b298      	uxth	r0, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29c      	uxth	r4, r3
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4621      	mov	r1, r4
 8001afc:	f000 fa00 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	b298      	uxth	r0, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	b29c      	uxth	r4, r3
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	492d      	ldr	r1, [pc, #180]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f000 f9e9 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4413      	add	r3, r2
 8001b36:	b298      	uxth	r0, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29c      	uxth	r4, r3
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4922      	ldr	r1, [pc, #136]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4621      	mov	r1, r4
 8001b58:	f000 f9d2 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	b298      	uxth	r0, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	88bb      	ldrh	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29c      	uxth	r4, r3
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <BSP_LCD_DrawCircle+0x1d8>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <BSP_LCD_DrawCircle+0x1dc>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4621      	mov	r1, r4
 8001b86:	f000 f9bb 	bl	8001f00 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da06      	bge.n	8001b9e <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	009a      	lsls	r2, r3, #2
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	3306      	adds	r3, #6
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	009a      	lsls	r2, r3, #2
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4413      	add	r3, r2
 8001baa:	330a      	adds	r3, #10
 8001bac:	617b      	str	r3, [r7, #20]
      CurY--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f67f af2b 	bls.w	8001a1a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	200001b8 	.word	0x200001b8
 8001bd0:	200001bc 	.word	0x200001bc

08001bd4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4623      	mov	r3, r4
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4603      	mov	r3, r0
 8001bea:	80bb      	strh	r3, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4920      	ldr	r1, [pc, #128]	; (8001c80 <BSP_LCD_FillRect+0xac>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fcf6 	bl	80015fc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <BSP_LCD_FillRect+0xb0>)
 8001c16:	2134      	movs	r1, #52	; 0x34
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	335c      	adds	r3, #92	; 0x5c
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	f7ff fc73 	bl	800150c <BSP_LCD_GetXSize>
 8001c26:	4602      	mov	r2, r0
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4423      	add	r3, r4
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	68fd      	ldr	r5, [r7, #12]
 8001c3e:	887e      	ldrh	r6, [r7, #2]
 8001c40:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c44:	f7ff fc62 	bl	800150c <BSP_LCD_GetXSize>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	1ad1      	subs	r1, r2, r3
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <BSP_LCD_FillRect+0xac>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4403      	add	r3, r0
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9100      	str	r1, [sp, #0]
 8001c64:	4643      	mov	r3, r8
 8001c66:	4632      	mov	r2, r6
 8001c68:	4629      	mov	r1, r5
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f000 fa26 	bl	80020bc <LL_FillBuffer>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200001b8 	.word	0x200001b8
 8001c80:	200001bc 	.word	0x200001bc
 8001c84:	20000380 	.word	0x20000380

08001c88 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	f1c3 0303 	rsb	r3, r3, #3
 8001ca2:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <BSP_LCD_FillCircle+0x138>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4944      	ldr	r1, [pc, #272]	; (8001dc4 <BSP_LCD_FillCircle+0x13c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc9c 	bl	80015fc <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001cc4:	e061      	b.n	8001d8a <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b298      	uxth	r0, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	88bb      	ldrh	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f7ff fe03 	bl	80018f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88ba      	ldrh	r2, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b299      	uxth	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fdf2 	bl	80018f4 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d021      	beq.n	8001d5a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	f7ff fdde 	bl	80018f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	b298      	uxth	r0, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fdcd 	bl	80018f4 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da06      	bge.n	8001d6e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	3306      	adds	r3, #6
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	009a      	lsls	r2, r3, #2
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d999      	bls.n	8001cc6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <BSP_LCD_FillCircle+0x138>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <BSP_LCD_FillCircle+0x13c>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fc29 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	88b9      	ldrh	r1, [r7, #4]
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe1f 	bl	80019f4 <BSP_LCD_DrawCircle>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200001b8 	.word	0x200001b8
 8001dc4:	200001bc 	.word	0x200001bc

08001dc8 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d80d      	bhi.n	8001df4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	2215      	movs	r2, #21
 8001dea:	2100      	movs	r1, #0
 8001dec:	480a      	ldr	r0, [pc, #40]	; (8001e18 <DSI_IO_WriteCmd+0x50>)
 8001dee:	f002 fdef 	bl	80049d0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001df2:	e00d      	b.n	8001e10 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2239      	movs	r2, #57	; 0x39
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4803      	ldr	r0, [pc, #12]	; (8001e18 <DSI_IO_WriteCmd+0x50>)
 8001e0c:	f002 fe02 	bl	8004a14 <HAL_DSI_LongWrite>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000428 	.word	0x20000428

08001e1c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e20:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a31      	ldr	r2, [pc, #196]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e54:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	4a28      	ldr	r2, [pc, #160]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e60:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e90:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a19      	ldr	r2, [pc, #100]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001ebc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ec0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	2058      	movs	r0, #88	; 0x58
 8001ec8:	f001 f95f 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ecc:	2058      	movs	r0, #88	; 0x58
 8001ece:	f001 f978 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	205a      	movs	r0, #90	; 0x5a
 8001ed8:	f001 f957 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001edc:	205a      	movs	r0, #90	; 0x5a
 8001ede:	f001 f970 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	2062      	movs	r0, #98	; 0x62
 8001ee8:	f001 f94f 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001eec:	2062      	movs	r0, #98	; 0x62
 8001eee:	f001 f968 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	603a      	str	r2, [r7, #0]
 8001f0a:	80fb      	strh	r3, [r7, #6]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <BSP_LCD_DrawPixel+0x44>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <BSP_LCD_DrawPixel+0x48>)
 8001f16:	2134      	movs	r1, #52	; 0x34
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	335c      	adds	r3, #92	; 0x5c
 8001f20:	681c      	ldr	r4, [r3, #0]
 8001f22:	88bd      	ldrh	r5, [r7, #4]
 8001f24:	f7ff faf2 	bl	800150c <BSP_LCD_GetXSize>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	fb03 f205 	mul.w	r2, r3, r5
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4423      	add	r3, r4
 8001f36:	461a      	mov	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bdb0      	pop	{r4, r5, r7, pc}
 8001f44:	200001b8 	.word	0x200001b8
 8001f48:	20000380 	.word	0x20000380

08001f4c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <DrawChar+0x168>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4953      	ldr	r1, [pc, #332]	; (80020b8 <DrawChar+0x16c>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3308      	adds	r3, #8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <DrawChar+0x168>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	494d      	ldr	r1, [pc, #308]	; (80020b8 <DrawChar+0x16c>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	889b      	ldrh	r3, [r3, #4]
 8001f92:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	3307      	adds	r3, #7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da00      	bge.n	8001f9e <DrawChar+0x52>
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	10db      	asrs	r3, r3, #3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e076      	b.n	80020a2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001fb4:	8a3b      	ldrh	r3, [r7, #16]
 8001fb6:	3307      	adds	r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da00      	bge.n	8001fbe <DrawChar+0x72>
 8001fbc:	3307      	adds	r3, #7
 8001fbe:	10db      	asrs	r3, r3, #3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fb03 f302 	mul.w	r3, r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da00      	bge.n	8001fd8 <DrawChar+0x8c>
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	10db      	asrs	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d002      	beq.n	8001fe4 <DrawChar+0x98>
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d004      	beq.n	8001fec <DrawChar+0xa0>
 8001fe2:	e00c      	b.n	8001ffe <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
      break;
 8001fea:	e016      	b.n	800201a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	3201      	adds	r2, #1
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
      break;
 8001ffc:	e00d      	b.n	800201a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	041a      	lsls	r2, r3, #16
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3301      	adds	r3, #1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4313      	orrs	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	3202      	adds	r2, #2
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
      break;
 8002018:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e036      	b.n	800208e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002020:	8a3a      	ldrh	r2, [r7, #16]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad2      	subs	r2, r2, r3
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	4413      	add	r3, r2
 800202a:	3b01      	subs	r3, #1
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	461a      	mov	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	b29a      	uxth	r2, r3
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4413      	add	r3, r2
 8002044:	b298      	uxth	r0, r3
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <DrawChar+0x168>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <DrawChar+0x16c>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	4619      	mov	r1, r3
 800205c:	f7ff ff50 	bl	8001f00 <BSP_LCD_DrawPixel>
 8002060:	e012      	b.n	8002088 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	b29a      	uxth	r2, r3
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4413      	add	r3, r2
 800206a:	b298      	uxth	r0, r3
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <DrawChar+0x168>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4911      	ldr	r1, [pc, #68]	; (80020b8 <DrawChar+0x16c>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3304      	adds	r3, #4
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	88bb      	ldrh	r3, [r7, #4]
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff ff3c 	bl	8001f00 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	3301      	adds	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	8a3b      	ldrh	r3, [r7, #16]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	429a      	cmp	r2, r3
 8002094:	d3c4      	bcc.n	8002020 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	8a7b      	ldrh	r3, [r7, #18]
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d384      	bcc.n	8001fb4 <DrawChar+0x68>
  }
}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200001b8 	.word	0x200001b8
 80020b8:	200001bc 	.word	0x200001bc

080020bc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <LL_FillBuffer+0x68>)
 80020cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020d0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <LL_FillBuffer+0x68>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <LL_FillBuffer+0x68>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <LL_FillBuffer+0x68>)
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <LL_FillBuffer+0x6c>)
 80020e2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80020e4:	480f      	ldr	r0, [pc, #60]	; (8002124 <LL_FillBuffer+0x68>)
 80020e6:	f001 fa43 	bl	8003570 <HAL_DMA2D_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d115      	bne.n	800211c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <LL_FillBuffer+0x68>)
 80020f4:	f001 fbaa 	bl	800384c <HAL_DMA2D_ConfigLayer>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69f9      	ldr	r1, [r7, #28]
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <LL_FillBuffer+0x68>)
 800210a:	f001 fa8b 	bl	8003624 <HAL_DMA2D_Start>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002114:	210a      	movs	r1, #10
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <LL_FillBuffer+0x68>)
 8002118:	f001 faaf 	bl	800367a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000328 	.word	0x20000328
 8002128:	4002b000 	.word	0x4002b000

0800212c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002132:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <BSP_SDRAM_Init+0xb0>)
 8002134:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 800213e:	2207      	movs	r2, #7
 8002140:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 8002144:	2204      	movs	r2, #4
 8002146:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 800214a:	2207      	movs	r2, #7
 800214c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 8002150:	2202      	movs	r2, #2
 8002152:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 8002156:	2202      	movs	r2, #2
 8002158:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 800215c:	2202      	movs	r2, #2
 800215e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 800216e:	2204      	movs	r2, #4
 8002170:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002174:	2220      	movs	r2, #32
 8002176:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002180:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002184:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 800218e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002192:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 8002196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80021a2:	2100      	movs	r1, #0
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 80021a6:	f000 f87f 	bl	80022a8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <BSP_SDRAM_Init+0xb4>)
 80021ac:	480a      	ldr	r0, [pc, #40]	; (80021d8 <BSP_SDRAM_Init+0xac>)
 80021ae:	f005 f8b5 	bl	800731c <HAL_SDRAM_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <BSP_SDRAM_Init+0xb8>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e002      	b.n	80021c6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <BSP_SDRAM_Init+0xb8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021c6:	f240 6003 	movw	r0, #1539	; 0x603
 80021ca:	f000 f80d 	bl	80021e8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <BSP_SDRAM_Init+0xb8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000444 	.word	0x20000444
 80021dc:	a0000140 	.word	0xa0000140
 80021e0:	20000264 	.word	0x20000264
 80021e4:	20000064 	.word	0x20000064

080021e8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021fc:	2210      	movs	r2, #16
 80021fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002202:	2201      	movs	r2, #1
 8002204:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800220c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002210:	4923      	ldr	r1, [pc, #140]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002212:	4824      	ldr	r0, [pc, #144]	; (80022a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002214:	f005 f8b6 	bl	8007384 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f000 fb79 	bl	8002910 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002226:	2210      	movs	r2, #16
 8002228:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222c:	2201      	movs	r2, #1
 800222e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223a:	4919      	ldr	r1, [pc, #100]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223c:	4819      	ldr	r0, [pc, #100]	; (80022a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800223e:	f005 f8a1 	bl	8007384 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002244:	2203      	movs	r2, #3
 8002246:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224a:	2210      	movs	r2, #16
 800224c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002250:	2208      	movs	r2, #8
 8002252:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800225a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225e:	4910      	ldr	r1, [pc, #64]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002260:	4810      	ldr	r0, [pc, #64]	; (80022a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002262:	f005 f88f 	bl	8007384 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002266:	f44f 730c 	mov.w	r3, #560	; 0x230
 800226a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226e:	2204      	movs	r2, #4
 8002270:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002274:	2210      	movs	r2, #16
 8002276:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227a:	2201      	movs	r2, #1
 800227c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002282:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	4905      	ldr	r1, [pc, #20]	; (80022a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228a:	4806      	ldr	r0, [pc, #24]	; (80022a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800228c:	f005 f87a 	bl	8007384 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002294:	f005 f8a1 	bl	80073da <HAL_SDRAM_ProgramRefreshRate>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000280 	.word	0x20000280
 80022a4:	20000444 	.word	0x20000444

080022a8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022b2:	4b71      	ldr	r3, [pc, #452]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4a70      	ldr	r2, [pc, #448]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6393      	str	r3, [r2, #56]	; 0x38
 80022be:	4b6e      	ldr	r3, [pc, #440]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80022ca:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b68      	ldr	r3, [pc, #416]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e2:	4b65      	ldr	r3, [pc, #404]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a64      	ldr	r2, [pc, #400]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b62      	ldr	r3, [pc, #392]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002312:	4b59      	ldr	r3, [pc, #356]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b56      	ldr	r3, [pc, #344]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b50      	ldr	r3, [pc, #320]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002342:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a46      	ldr	r2, [pc, #280]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002376:	2301      	movs	r3, #1
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800237e:	230c      	movs	r3, #12
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002382:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238c:	4619      	mov	r1, r3
 800238e:	483b      	ldr	r0, [pc, #236]	; (800247c <BSP_SDRAM_MspInit+0x1d4>)
 8002390:	f002 fc06 	bl	8004ba0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002394:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800239a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239e:	4619      	mov	r1, r3
 80023a0:	4837      	ldr	r0, [pc, #220]	; (8002480 <BSP_SDRAM_MspInit+0x1d8>)
 80023a2:	f002 fbfd 	bl	8004ba0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	4834      	ldr	r0, [pc, #208]	; (8002484 <BSP_SDRAM_MspInit+0x1dc>)
 80023b4:	f002 fbf4 	bl	8004ba0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80023b8:	f248 1337 	movw	r3, #33079	; 0x8137
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4830      	ldr	r0, [pc, #192]	; (8002488 <BSP_SDRAM_MspInit+0x1e0>)
 80023c6:	f002 fbeb 	bl	8004ba0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80023ca:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80023d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	482d      	ldr	r0, [pc, #180]	; (800248c <BSP_SDRAM_MspInit+0x1e4>)
 80023d8:	f002 fbe2 	bl	8004ba0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80023dc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	4829      	ldr	r0, [pc, #164]	; (8002490 <BSP_SDRAM_MspInit+0x1e8>)
 80023ea:	f002 fbd9 	bl	8004ba0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 80023fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002400:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002408:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002418:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002426:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002430:	2203      	movs	r2, #3
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002436:	2200      	movs	r2, #0
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <BSP_SDRAM_MspInit+0x1f0>)
 8002444:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002452:	4810      	ldr	r0, [pc, #64]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 8002454:	f000 ff7e 	bl	8003354 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <BSP_SDRAM_MspInit+0x1ec>)
 800245a:	f000 fecd 	bl	80031f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	2038      	movs	r0, #56	; 0x38
 8002464:	f000 fe91 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002468:	2038      	movs	r0, #56	; 0x38
 800246a:	f000 feaa 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3740      	adds	r7, #64	; 0x40
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40022000 	.word	0x40022000
 8002494:	20000290 	.word	0x20000290
 8002498:	40026410 	.word	0x40026410

0800249c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	460a      	mov	r2, r1
 80024a6:	80fb      	strh	r3, [r7, #6]
 80024a8:	4613      	mov	r3, r2
 80024aa:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <BSP_TS_Init+0xb0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <BSP_TS_Init+0xb4>)
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	b292      	uxth	r2, r2
 80024be:	4610      	mov	r0, r2
 80024c0:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <BSP_TS_Init+0xb0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2054      	movs	r0, #84	; 0x54
 80024c8:	4798      	blx	r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80024ce:	7b7b      	ldrb	r3, [r7, #13]
 80024d0:	2b11      	cmp	r3, #17
 80024d2:	d009      	beq.n	80024e8 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <BSP_TS_Init+0xb0>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2070      	movs	r0, #112	; 0x70
 80024da:	4798      	blx	r3
 80024dc:	4603      	mov	r3, r0
 80024de:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <BSP_TS_Init+0xb4>)
 80024e2:	2270      	movs	r2, #112	; 0x70
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e002      	b.n	80024ee <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <BSP_TS_Init+0xb4>)
 80024ea:	2254      	movs	r2, #84	; 0x54
 80024ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80024ee:	7b7b      	ldrb	r3, [r7, #13]
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d002      	beq.n	80024fa <BSP_TS_Init+0x5e>
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	2b11      	cmp	r3, #17
 80024f8:	d121      	bne.n	800253e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <BSP_TS_Init+0xb8>)
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <BSP_TS_Init+0xb0>)
 80024fe:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d203      	bcs.n	8002510 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <BSP_TS_Init+0xbc>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e002      	b.n	8002516 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <BSP_TS_Init+0xbc>)
 8002512:	220c      	movs	r2, #12
 8002514:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d112      	bne.n	8002542 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <BSP_TS_Init+0xb8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <BSP_TS_Init+0xb4>)
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	b292      	uxth	r2, r2
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <BSP_TS_Init+0xb8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <BSP_TS_Init+0xb4>)
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	b292      	uxth	r2, r2
 8002538:	4610      	mov	r0, r2
 800253a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800253c:	e001      	b.n	8002542 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800253e:	2303      	movs	r3, #3
 8002540:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000000 	.word	0x20000000
 8002550:	200002f5 	.word	0x200002f5
 8002554:	200002f0 	.word	0x200002f0
 8002558:	200002f4 	.word	0x200002f4

0800255c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8002566:	f000 f94f 	bl	8002808 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800256a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256e:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002570:	2301      	movs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002574:	2302      	movs	r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <BSP_TS_ITConfig+0x54>)
 800257a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <BSP_TS_ITConfig+0x58>)
 8002582:	f002 fb0d 	bl	8004ba0 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8002586:	2200      	movs	r2, #0
 8002588:	210f      	movs	r1, #15
 800258a:	2028      	movs	r0, #40	; 0x28
 800258c:	f000 fdfd 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002590:	2028      	movs	r0, #40	; 0x28
 8002592:	f000 fe16 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <BSP_TS_ITConfig+0x5c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <BSP_TS_ITConfig+0x60>)
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	b292      	uxth	r2, r2
 80025a2:	4610      	mov	r0, r2
 80025a4:	4798      	blx	r3

  return (ts_status);
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	10210000 	.word	0x10210000
 80025b4:	40022000 	.word	0x40022000
 80025b8:	200002f0 	.word	0x200002f0
 80025bc:	200002f5 	.word	0x200002f5

080025c0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80025cc:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <BSP_TS_GetState+0x234>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	4a89      	ldr	r2, [pc, #548]	; (80027f8 <BSP_TS_GetState+0x238>)
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	b292      	uxth	r2, r2
 80025d8:	4610      	mov	r0, r2
 80025da:	4798      	blx	r3
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80fe 	beq.w	80027ea <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e0f3      	b.n	80027dc <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80025f4:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <BSP_TS_GetState+0x234>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4a7f      	ldr	r2, [pc, #508]	; (80027f8 <BSP_TS_GetState+0x238>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	b290      	uxth	r0, r2
 8002600:	f107 0110 	add.w	r1, r7, #16
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	0052      	lsls	r2, r2, #1
 8002608:	188c      	adds	r4, r1, r2
 800260a:	f107 010c 	add.w	r1, r7, #12
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	0052      	lsls	r2, r2, #1
 8002612:	440a      	add	r2, r1
 8002614:	4621      	mov	r1, r4
 8002616:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002618:	4b78      	ldr	r3, [pc, #480]	; (80027fc <BSP_TS_GetState+0x23c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01d      	beq.n	8002660 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	f107 0220 	add.w	r2, r7, #32
 800262c:	4413      	add	r3, r2
 800262e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002632:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	f107 0220 	add.w	r2, r7, #32
 800263c:	4413      	add	r3, r2
 800263e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	f107 0120 	add.w	r1, r7, #32
 800264a:	440b      	add	r3, r1
 800264c:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	f107 0220 	add.w	r2, r7, #32
 8002658:	4413      	add	r3, r2
 800265a:	8b3a      	ldrh	r2, [r7, #24]
 800265c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <BSP_TS_GetState+0x23c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d011      	beq.n	8002690 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	f107 0220 	add.w	r2, r7, #32
 8002674:	4413      	add	r3, r2
 8002676:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800267a:	f240 331f 	movw	r3, #799	; 0x31f
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	b29a      	uxth	r2, r3
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	f107 0120 	add.w	r1, r7, #32
 800268a:	440b      	add	r3, r1
 800268c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <BSP_TS_GetState+0x23c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d011      	beq.n	80026c0 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	f107 0220 	add.w	r2, r7, #32
 80026a4:	4413      	add	r3, r2
 80026a6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026aa:	f240 13df 	movw	r3, #479	; 0x1df
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	f107 0120 	add.w	r1, r7, #32
 80026ba:	440b      	add	r3, r1
 80026bc:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	f107 0220 	add.w	r2, r7, #32
 80026c8:	4413      	add	r3, r2
 80026ca:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4a4b      	ldr	r2, [pc, #300]	; (8002800 <BSP_TS_GetState+0x240>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	4299      	cmp	r1, r3
 80026da:	d90e      	bls.n	80026fa <BSP_TS_GetState+0x13a>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	f107 0220 	add.w	r2, r7, #32
 80026e4:	4413      	add	r3, r2
 80026e6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026ea:	4945      	ldr	r1, [pc, #276]	; (8002800 <BSP_TS_GetState+0x240>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	e00d      	b.n	8002716 <BSP_TS_GetState+0x156>
 80026fa:	4a41      	ldr	r2, [pc, #260]	; (8002800 <BSP_TS_GetState+0x240>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	b29a      	uxth	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f107 0120 	add.w	r1, r7, #32
 800270c:	440b      	add	r3, r1
 800270e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b29b      	uxth	r3, r3
 8002716:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	f107 0220 	add.w	r2, r7, #32
 8002720:	4413      	add	r3, r2
 8002722:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002726:	4619      	mov	r1, r3
 8002728:	4a36      	ldr	r2, [pc, #216]	; (8002804 <BSP_TS_GetState+0x244>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	4299      	cmp	r1, r3
 8002732:	d90e      	bls.n	8002752 <BSP_TS_GetState+0x192>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f107 0220 	add.w	r2, r7, #32
 800273c:	4413      	add	r3, r2
 800273e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002742:	4930      	ldr	r1, [pc, #192]	; (8002804 <BSP_TS_GetState+0x244>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800274a:	b29b      	uxth	r3, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	b29b      	uxth	r3, r3
 8002750:	e00d      	b.n	800276e <BSP_TS_GetState+0x1ae>
 8002752:	4a2c      	ldr	r2, [pc, #176]	; (8002804 <BSP_TS_GetState+0x244>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	b29a      	uxth	r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f107 0120 	add.w	r1, r7, #32
 8002764:	440b      	add	r3, r1
 8002766:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002770:	8afa      	ldrh	r2, [r7, #22]
 8002772:	8abb      	ldrh	r3, [r7, #20]
 8002774:	4413      	add	r3, r2
 8002776:	2b05      	cmp	r3, #5
 8002778:	dd17      	ble.n	80027aa <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	f107 0220 	add.w	r2, r7, #32
 8002782:	4413      	add	r3, r2
 8002784:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002788:	4619      	mov	r1, r3
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <BSP_TS_GetState+0x240>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	f107 0220 	add.w	r2, r7, #32
 800279a:	4413      	add	r3, r2
 800279c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <BSP_TS_GetState+0x244>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <BSP_TS_GetState+0x240>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	b299      	uxth	r1, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	460a      	mov	r2, r1
 80027be:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80027c0:	4a10      	ldr	r2, [pc, #64]	; (8002804 <BSP_TS_GetState+0x244>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	b299      	uxth	r1, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	460a      	mov	r2, r1
 80027d4:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f4ff af05 	bcc.w	80025f4 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80027ea:	7efb      	ldrb	r3, [r7, #27]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3724      	adds	r7, #36	; 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	200002f0 	.word	0x200002f0
 80027f8:	200002f5 	.word	0x200002f5
 80027fc:	200002f4 	.word	0x200002f4
 8002800:	200002f8 	.word	0x200002f8
 8002804:	20000300 	.word	0x20000300

08002808 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <BSP_TS_INT_MspInit+0x44>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <BSP_TS_INT_MspInit+0x44>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <BSP_TS_INT_MspInit+0x44>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8002826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282a:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002830:	2301      	movs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <BSP_TS_INT_MspInit+0x48>)
 800283e:	f002 f9af 	bl	8004ba0 <HAL_GPIO_Init>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40022000 	.word	0x40022000

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 fc8b 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f806 	bl	8002870 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f007 fb9e 	bl	8009fa4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_InitTick+0x54>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x58>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	fbb3 f3f1 	udiv	r3, r3, r1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fca5 	bl	80031de <HAL_SYSTICK_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00e      	b.n	80028bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d80a      	bhi.n	80028ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a4:	2200      	movs	r2, #0
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f000 fc6d 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_InitTick+0x5c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000074 	.word	0x20000074
 80028c8:	2000006c 	.word	0x2000006c
 80028cc:	20000068 	.word	0x20000068

080028d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x20>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x24>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_IncTick+0x24>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2000006c 	.word	0x2000006c
 80028f4:	20000478 	.word	0x20000478

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000478 	.word	0x20000478

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_Delay+0x40>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffde 	bl	80028f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000006c 	.word	0x2000006c

08002954 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e031      	b.n	80029ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f007 fb3a 	bl	8009fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_ADC_Init+0x84>)
 8002998:	4013      	ands	r3, r2
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa1c 	bl	8002de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
 80029be:	e001      	b.n	80029c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	ffffeefd 	.word	0xffffeefd

080029dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Start+0x1a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0a0      	b.n	8002b38 <HAL_ADC_Start+0x15c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d018      	beq.n	8002a3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_ADC_Start+0x168>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a49      	ldr	r2, [pc, #292]	; (8002b48 <HAL_ADC_Start+0x16c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9a      	lsrs	r2, r3, #18
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a30:	e002      	b.n	8002a38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f9      	bne.n	8002a32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d174      	bne.n	8002b36 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_ADC_Start+0x170>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f023 0206 	bic.w	r2, r3, #6
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
 8002a94:	e002      	b.n	8002a9c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002aac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002aae:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_ADC_Start+0x174>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d136      	bne.n	8002b36 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e02d      	b.n	8002b36 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_ADC_Start+0x178>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10e      	bne.n	8002b02 <HAL_ADC_Start+0x126>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b00:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_Start+0x174>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_ADC_Start+0x17c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10e      	bne.n	8002b36 <HAL_ADC_Start+0x15a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b34:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	20000074 	.word	0x20000074
 8002b48:	431bde83 	.word	0x431bde83
 8002b4c:	fffff8fe 	.word	0xfffff8fe
 8002b50:	40012300 	.word	0x40012300
 8002b54:	40012000 	.word	0x40012000
 8002b58:	40012200 	.word	0x40012200

08002b5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e115      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x248>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d935      	bls.n	8002c10 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7f      	ldr	r2, [pc, #508]	; (8002dcc <HAL_ADC_ConfigChannel+0x254>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d10a      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68d9      	ldr	r1, [r3, #12]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	061a      	lsls	r2, r3, #24
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e035      	b.n	8002c56 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68d9      	ldr	r1, [r3, #12]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4403      	add	r3, r0
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	409a      	lsls	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	e022      	b.n	8002c56 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6919      	ldr	r1, [r3, #16]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	2207      	movs	r2, #7
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4403      	add	r3, r0
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d824      	bhi.n	8002ca8 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b05      	subs	r3, #5
 8002c70:	221f      	movs	r2, #31
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	3b05      	subs	r3, #5
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca6:	e04c      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d824      	bhi.n	8002cfa <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b23      	subs	r3, #35	; 0x23
 8002cc2:	221f      	movs	r2, #31
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	400a      	ands	r2, r1
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b23      	subs	r3, #35	; 0x23
 8002cec:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf8:	e023      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b41      	subs	r3, #65	; 0x41
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	400a      	ands	r2, r1
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b41      	subs	r3, #65	; 0x41
 8002d36:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <HAL_ADC_ConfigChannel+0x258>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d109      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1e8>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b12      	cmp	r3, #18
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d5e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_ADC_ConfigChannel+0x258>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d125      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23e>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_ADC_ConfigChannel+0x254>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x204>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b11      	cmp	r3, #17
 8002d7a:	d11c      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d86:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <HAL_ADC_ConfigChannel+0x254>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_ADC_ConfigChannel+0x260>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_ADC_ConfigChannel+0x264>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0c9a      	lsrs	r2, r3, #18
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	10000012 	.word	0x10000012
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	20000074 	.word	0x20000074
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <ADC_Init+0x1ec>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <ADC_Init+0x1ec>)
 8002dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002df2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002df4:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <ADC_Init+0x1ec>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4973      	ldr	r1, [pc, #460]	; (8002fcc <ADC_Init+0x1ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <ADC_Init+0x1f0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e00f      	b.n	8002eda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0202 	bic.w	r2, r2, #2
 8002ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	035a      	lsls	r2, r3, #13
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	051a      	lsls	r2, r3, #20
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f92:	025a      	lsls	r2, r3, #9
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	029a      	lsls	r2, r3, #10
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	05fa0000 	.word	0x05fa0000

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff29 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff3e 	bl	800301c <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff31 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffa2 	bl	8003130 <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff fb78 	bl	80028f8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e099      	b.n	8003348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003234:	e00f      	b.n	8003256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003236:	f7ff fb5f 	bl	80028f8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b05      	cmp	r3, #5
 8003242:	d908      	bls.n	8003256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e078      	b.n	8003348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e8      	bne.n	8003236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_DMA_Init+0x158>)
 8003270:	4013      	ands	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d107      	bne.n	80032c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	4313      	orrs	r3, r2
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0307 	bic.w	r3, r3, #7
 80032d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d117      	bne.n	800331a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8bd 	bl	800347c <DMA_CheckFifoParam>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003316:	2301      	movs	r3, #1
 8003318:	e016      	b.n	8003348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f874 	bl	8003410 <DMA_CalcBaseAndBitshift>
 8003328:	4603      	mov	r3, r0
 800332a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	223f      	movs	r2, #63	; 0x3f
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	e010803f 	.word	0xe010803f

08003354 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e050      	b.n	8003408 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d101      	bne.n	8003376 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e048      	b.n	8003408 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2221      	movs	r2, #33	; 0x21
 80033b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f82a 	bl	8003410 <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3b10      	subs	r3, #16
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <DMA_CalcBaseAndBitshift+0x60>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <DMA_CalcBaseAndBitshift+0x64>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d908      	bls.n	8003450 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <DMA_CalcBaseAndBitshift+0x68>)
 8003446:	4013      	ands	r3, r2
 8003448:	1d1a      	adds	r2, r3, #4
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	659a      	str	r2, [r3, #88]	; 0x58
 800344e:	e006      	b.n	800345e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <DMA_CalcBaseAndBitshift+0x68>)
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	aaaaaaab 	.word	0xaaaaaaab
 8003474:	0800ea7c 	.word	0x0800ea7c
 8003478:	fffffc00 	.word	0xfffffc00

0800347c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11f      	bne.n	80034d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d855      	bhi.n	8003548 <DMA_CheckFifoParam+0xcc>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <DMA_CheckFifoParam+0x28>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034c7 	.word	0x080034c7
 80034ac:	080034b5 	.word	0x080034b5
 80034b0:	08003549 	.word	0x08003549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d045      	beq.n	800354c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c4:	e042      	b.n	800354c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ce:	d13f      	bne.n	8003550 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d4:	e03c      	b.n	8003550 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d121      	bne.n	8003524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d836      	bhi.n	8003554 <DMA_CheckFifoParam+0xd8>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <DMA_CheckFifoParam+0x70>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	08003503 	.word	0x08003503
 80034f4:	080034fd 	.word	0x080034fd
 80034f8:	08003515 	.word	0x08003515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003500:	e02f      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d024      	beq.n	8003558 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003512:	e021      	b.n	8003558 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800351c:	d11e      	bne.n	800355c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003522:	e01b      	b.n	800355c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d902      	bls.n	8003530 <DMA_CheckFifoParam+0xb4>
 800352a:	2b03      	cmp	r3, #3
 800352c:	d003      	beq.n	8003536 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800352e:	e018      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e015      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      break;
 8003546:	e00b      	b.n	8003560 <DMA_CheckFifoParam+0xe4>
      break;
 8003548:	bf00      	nop
 800354a:	e00a      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;
 800354c:	bf00      	nop
 800354e:	e008      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;
 8003550:	bf00      	nop
 8003552:	e006      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;
 8003554:	bf00      	nop
 8003556:	e004      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;
 8003558:	bf00      	nop
 800355a:	e002      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;   
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <DMA_CheckFifoParam+0xe6>
      break;
 8003560:	bf00      	nop
    }
  } 
  
  return status; 
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e049      	b.n	8003616 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f006 fd48 	bl	800a02c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	f023 0107 	bic.w	r1, r3, #7
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_DMA2D_Init+0xb0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68d1      	ldr	r1, [r2, #12]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	051a      	lsls	r2, r3, #20
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	055b      	lsls	r3, r3, #21
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	ffffc000 	.word	0xffffc000

08003624 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_DMA2D_Start+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e018      	b.n	8003672 <HAL_DMA2D_Start+0x4e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f994 	bl	8003988 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d056      	beq.n	8003744 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003696:	f7ff f92f 	bl	80028f8 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800369c:	e04b      	b.n	8003736 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d023      	beq.n	80036f8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2221      	movs	r2, #33	; 0x21
 80036e2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0a5      	b.n	8003844 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d01a      	beq.n	8003736 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003700:	f7ff f8fa 	bl	80028f8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <HAL_DMA2D_PollForTransfer+0x9c>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e086      	b.n	8003844 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ac      	beq.n	800369e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d061      	beq.n	800382a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003766:	f7ff f8c7 	bl	80028f8 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800376c:	e056      	b.n	800381c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02e      	beq.n	80037de <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0204 	orr.w	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2229      	movs	r2, #41	; 0x29
 80037c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2204      	movs	r2, #4
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e032      	b.n	8003844 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d01a      	beq.n	800381c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80037e6:	f7ff f887 	bl	80028f8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <HAL_DMA2D_PollForTransfer+0x182>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10f      	bne.n	800381c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2203      	movs	r2, #3
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e013      	b.n	8003844 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0a1      	beq.n	800376e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2212      	movs	r2, #18
 8003830:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_DMA2D_ConfigLayer+0x20>
 8003868:	2302      	movs	r3, #2
 800386a:	e084      	b.n	8003976 <HAL_DMA2D_ConfigLayer+0x12a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	3320      	adds	r3, #32
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80038a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <HAL_DMA2D_ConfigLayer+0x138>)
 80038ae:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b0a      	cmp	r3, #10
 80038b6:	d003      	beq.n	80038c0 <HAL_DMA2D_ConfigLayer+0x74>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d107      	bne.n	80038d0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e005      	b.n	80038dc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d120      	bne.n	8003924 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	ea02 0103 	and.w	r1, r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b0a      	cmp	r3, #10
 800390a:	d003      	beq.n	8003914 <HAL_DMA2D_ConfigLayer+0xc8>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b09      	cmp	r3, #9
 8003912:	d127      	bne.n	8003964 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
 8003922:	e01f      	b.n	8003964 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	ea02 0103 	and.w	r1, r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d003      	beq.n	8003956 <HAL_DMA2D_ConfigLayer+0x10a>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b09      	cmp	r3, #9
 8003954:	d106      	bne.n	8003964 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003962:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	ff33000f 	.word	0xff33000f

08003988 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	041a      	lsls	r2, r3, #16
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c0:	d174      	bne.n	8003aac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d108      	bne.n	80039fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	e053      	b.n	8003aa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e048      	b.n	8003aa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d111      	bne.n	8003a3c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	0cdb      	lsrs	r3, r3, #19
 8003a1c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	0a9b      	lsrs	r3, r3, #10
 8003a22:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08db      	lsrs	r3, r3, #3
 8003a28:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	02db      	lsls	r3, r3, #11
 8003a32:	4313      	orrs	r3, r2
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e032      	b.n	8003aa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d117      	bne.n	8003a74 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	0fdb      	lsrs	r3, r3, #31
 8003a48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	0cdb      	lsrs	r3, r3, #19
 8003a4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	431a      	orrs	r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	03db      	lsls	r3, r3, #15
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e016      	b.n	8003aa2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	0f1b      	lsrs	r3, r3, #28
 8003a78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	0b1b      	lsrs	r3, r3, #12
 8003a84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	011a      	lsls	r2, r3, #4
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	431a      	orrs	r2, r3
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	031b      	lsls	r3, r3, #12
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003aaa:	e003      	b.n	8003ab4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	372c      	adds	r7, #44	; 0x2c
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	019a      	lsls	r2, r3, #6
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	431a      	orrs	r2, r3
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b00:	f7fe fefa 	bl	80028f8 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b06:	e009      	b.n	8003b1c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003b08:	f7fe fef6 	bl	80028f8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b16:	d901      	bls.n	8003b1c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e015      	b.n	8003b48 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	019a      	lsls	r2, r3, #6
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	ea42 0103 	orr.w	r1, r2, r3
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e106      	b.n	8003d72 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7c5b      	ldrb	r3, [r3, #17]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f006 fa7c 	bl	800a06c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b8e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba2:	f7fe fea9 	bl	80028f8 <HAL_GetTick>
 8003ba6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003ba8:	e009      	b.n	8003bbe <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003baa:	f7fe fea5 	bl	80028f8 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb8:	d901      	bls.n	8003bbe <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0d9      	b.n	8003d72 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ed      	beq.n	8003baa <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_DSI_Init+0x22c>)
 8003bdc:	400b      	ands	r3, r1
 8003bde:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	02db      	lsls	r3, r3, #11
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c32:	f7fe fe61 	bl	80028f8 <HAL_GetTick>
 8003c36:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c38:	e009      	b.n	8003c4e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fe5d 	bl	80028f8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c48:	d901      	bls.n	8003c4e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e091      	b.n	8003d72 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ed      	beq.n	8003c3a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0206 	orr.w	r2, r2, #6
 8003c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0203 	bic.w	r2, r2, #3
 8003c82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0203 	bic.w	r2, r2, #3
 8003cb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cd8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6899      	ldr	r1, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_DSI_Init+0x1aa>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	e000      	b.n	8003cfc <HAL_DSI_Init+0x1ac>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_DSI_Init+0x230>)
 8003d02:	fb02 f203 	mul.w	r2, r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d32:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	fffc8603 	.word	0xfffc8603
 8003d80:	003d0900 	.word	0x003d0900

08003d84 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e066      	b.n	8003e64 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0208 	bic.w	r2, r2, #8
 8003db0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0206 	bic.w	r2, r2, #6
 8003df6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e36:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f006 f952 	bl	800a0f4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7c1b      	ldrb	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0aa      	b.n	8003fd8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003edc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0202 	orr.w	r2, r2, #2
 8003f18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 020c 	orr.w	r2, r2, #12
 8003f36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0210 	orr.w	r2, r2, #16
 8003f54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003fcc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7c1b      	ldrb	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_DSI_SetGenericVCID+0x16>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e016      	b.n	8004028 <HAL_DSI_SetGenericVCID+0x44>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0203 	bic.w	r2, r2, #3
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7c1b      	ldrb	r3, [r3, #16]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_DSI_ConfigVideoMode+0x16>
 8004046:	2302      	movs	r3, #2
 8004048:	e1ee      	b.n	8004428 <HAL_DSI_ConfigVideoMode+0x3f4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0203 	bic.w	r2, r2, #3
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b8b      	ldr	r3, [pc, #556]	; (80042d0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80040a2:	400b      	ands	r3, r1
 80040a4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80040c4:	400b      	ands	r3, r1
 80040c6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b7b      	ldr	r3, [pc, #492]	; (80042d4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0203 	bic.w	r2, r2, #3
 800410a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68d9      	ldr	r1, [r3, #12]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0207 	bic.w	r2, r2, #7
 800412c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6959      	ldr	r1, [r3, #20]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	431a      	orrs	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 020f 	bic.w	r2, r2, #15
 800415a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 020e 	bic.w	r2, r2, #14
 800417e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	005a      	lsls	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d110      	bne.n	80041c4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6919      	ldr	r1, [r3, #16]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80041d0:	400b      	ands	r3, r1
 80041d2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004214:	400b      	ands	r3, r1
 8004216:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004236:	400b      	ands	r3, r1
 8004238:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004258:	400b      	ands	r3, r1
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800427a:	400b      	ands	r3, r1
 800427c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_DSI_ConfigVideoMode+0x29c>)
 800429c:	400b      	ands	r3, r1
 800429e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042cc:	e00a      	b.n	80042e4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80042ce:	bf00      	nop
 80042d0:	ffffc000 	.word	0xffffc000
 80042d4:	ffffe000 	.word	0xffffe000
 80042d8:	fffff000 	.word	0xfffff000
 80042dc:	ffff8000 	.word	0xffff8000
 80042e0:	fffffc00 	.word	0xfffffc00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80042fa:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	041a      	lsls	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800431e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7c1b      	ldrb	r3, [r3, #16]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004446:	2302      	movs	r3, #2
 8004448:	e0c5      	b.n	80045d6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0203 	bic.w	r2, r2, #3
 8004496:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0207 	bic.w	r2, r2, #7
 80044b8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6959      	ldr	r1, [r3, #20]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 020f 	bic.w	r2, r2, #15
 80044e6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020e 	bic.w	r2, r2, #14
 800450a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	005a      	lsls	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8004532:	400b      	ands	r3, r1
 8004534:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004558:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	431a      	orrs	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0202 	orr.w	r2, r2, #2
 80045ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	ffff0000 	.word	0xffff0000

080045e8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7c1b      	ldrb	r3, [r3, #16]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_DSI_ConfigCommand+0x16>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e049      	b.n	8004692 <HAL_DSI_ConfigCommand+0xaa>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_DSI_ConfigCommand+0xb8>)
 8004610:	400b      	ands	r3, r1
 8004612:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004622:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004628:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800462e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004634:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800463a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004640:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004646:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800464c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004652:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004658:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800465e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0202 	bic.w	r2, r2, #2
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	fef080ff 	.word	0xfef080ff

080046a4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7c1b      	ldrb	r3, [r3, #16]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_DSI_ConfigFlowControl+0x16>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e016      	b.n	80046e8 <HAL_DSI_ConfigFlowControl+0x44>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 021f 	bic.w	r2, r2, #31
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7c1b      	ldrb	r3, [r3, #16]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_DSI_ConfigPhyTimer+0x16>
 8004706:	2302      	movs	r3, #2
 8004708:	e058      	b.n	80047bc <HAL_DSI_ConfigPhyTimer+0xc8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4293      	cmp	r3, r2
 800471a:	bf38      	it	cc
 800471c:	4613      	movcc	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004730:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800475e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004798:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	021a      	lsls	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7c1b      	ldrb	r3, [r3, #16]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_DSI_ConfigHostTimeouts+0x16>
 80047da:	2302      	movs	r3, #2
 80047dc:	e0b4      	b.n	8004948 <HAL_DSI_ConfigHostTimeouts+0x180>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80047f2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6899      	ldr	r1, [r3, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b292      	uxth	r2, r2
 8004814:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004836:	400b      	ands	r3, r1
 8004838:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004858:	400b      	ands	r3, r1
 800485a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800487c:	400b      	ands	r3, r1
 800487e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b16      	ldr	r3, [pc, #88]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80048fa:	400b      	ands	r3, r1
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004924:	400b      	ands	r3, r1
 8004926:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	ffff0000 	.word	0xffff0000

08004958 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7c1b      	ldrb	r3, [r3, #16]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_DSI_Start+0x14>
 8004968:	2302      	movs	r3, #2
 800496a:	e02b      	b.n	80049c4 <HAL_DSI_Start+0x6c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0208 	orr.w	r2, r2, #8
 80049a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	7c1b      	ldrb	r3, [r3, #16]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_DSI_ShortWrite+0x1a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e010      	b.n	8004a0c <HAL_DSI_ShortWrite+0x3c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff f879 	bl	8003af2 <DSI_ShortWrite>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	741a      	strb	r2, [r3, #16]

  return status;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a24:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	7c1b      	ldrb	r3, [r3, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_DSI_LongWrite+0x1e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e084      	b.n	8004b3c <HAL_DSI_LongWrite+0x128>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a38:	f7fd ff5e 	bl	80028f8 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a3e:	e00c      	b.n	8004a5a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a40:	f7fd ff5a 	bl	80028f8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4e:	d904      	bls.n	8004a5a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e070      	b.n	8004b3c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0eb      	beq.n	8004a40 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	bf28      	it	cs
 8004a72:	2303      	movcs	r3, #3
 8004a74:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	e00f      	b.n	8004a9c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	4413      	add	r3, r2
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3eb      	bcc.n	8004a7c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004abc:	e028      	b.n	8004b10 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	bf28      	it	cs
 8004ac4:	2304      	movcs	r3, #4
 8004ac6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	e00e      	b.n	8004af0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	3301      	adds	r3, #1
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d3ec      	bcc.n	8004ad2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1d3      	bne.n	8004abe <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b1e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	f7fe ffc6 	bl	8003ac0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3728      	adds	r7, #40	; 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7c1b      	ldrb	r3, [r3, #16]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e01b      	b.n	8004b92 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004b70:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	065a      	lsls	r2, r3, #25
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	; 0x24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e175      	b.n	8004eac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f040 8164 	bne.w	8004ea6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x4e>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b12      	cmp	r3, #18
 8004bec:	d123      	bne.n	8004c36 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	08da      	lsrs	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3208      	adds	r2, #8
 8004bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	08da      	lsrs	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3208      	adds	r2, #8
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	2203      	movs	r2, #3
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0203 	and.w	r2, r3, #3
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d00b      	beq.n	8004c8a <HAL_GPIO_Init+0xea>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d007      	beq.n	8004c8a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c7e:	2b11      	cmp	r3, #17
 8004c80:	d003      	beq.n	8004c8a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b12      	cmp	r3, #18
 8004c88:	d130      	bne.n	8004cec <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	2203      	movs	r2, #3
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 0201 	and.w	r2, r3, #1
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80be 	beq.w	8004ea6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <HAL_GPIO_Init+0x320>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	4a64      	ldr	r2, [pc, #400]	; (8004ec0 <HAL_GPIO_Init+0x320>)
 8004d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d34:	6453      	str	r3, [r2, #68]	; 0x44
 8004d36:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <HAL_GPIO_Init+0x320>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d42:	4a60      	ldr	r2, [pc, #384]	; (8004ec4 <HAL_GPIO_Init+0x324>)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	3302      	adds	r3, #2
 8004d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	220f      	movs	r2, #15
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a57      	ldr	r2, [pc, #348]	; (8004ec8 <HAL_GPIO_Init+0x328>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d037      	beq.n	8004dde <HAL_GPIO_Init+0x23e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_GPIO_Init+0x32c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d031      	beq.n	8004dda <HAL_GPIO_Init+0x23a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a55      	ldr	r2, [pc, #340]	; (8004ed0 <HAL_GPIO_Init+0x330>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02b      	beq.n	8004dd6 <HAL_GPIO_Init+0x236>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a54      	ldr	r2, [pc, #336]	; (8004ed4 <HAL_GPIO_Init+0x334>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d025      	beq.n	8004dd2 <HAL_GPIO_Init+0x232>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a53      	ldr	r2, [pc, #332]	; (8004ed8 <HAL_GPIO_Init+0x338>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01f      	beq.n	8004dce <HAL_GPIO_Init+0x22e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_GPIO_Init+0x33c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d019      	beq.n	8004dca <HAL_GPIO_Init+0x22a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a51      	ldr	r2, [pc, #324]	; (8004ee0 <HAL_GPIO_Init+0x340>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_GPIO_Init+0x226>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a50      	ldr	r2, [pc, #320]	; (8004ee4 <HAL_GPIO_Init+0x344>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00d      	beq.n	8004dc2 <HAL_GPIO_Init+0x222>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a4f      	ldr	r2, [pc, #316]	; (8004ee8 <HAL_GPIO_Init+0x348>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <HAL_GPIO_Init+0x21e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a4e      	ldr	r2, [pc, #312]	; (8004eec <HAL_GPIO_Init+0x34c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_GPIO_Init+0x21a>
 8004db6:	2309      	movs	r3, #9
 8004db8:	e012      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dba:	230a      	movs	r3, #10
 8004dbc:	e010      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	e00e      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dc2:	2307      	movs	r3, #7
 8004dc4:	e00c      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	e00a      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dca:	2305      	movs	r3, #5
 8004dcc:	e008      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dce:	2304      	movs	r3, #4
 8004dd0:	e006      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e004      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e002      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_GPIO_Init+0x240>
 8004dde:	2300      	movs	r3, #0
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	f002 0203 	and.w	r2, r2, #3
 8004de6:	0092      	lsls	r2, r2, #2
 8004de8:	4093      	lsls	r3, r2
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004df0:	4934      	ldr	r1, [pc, #208]	; (8004ec4 <HAL_GPIO_Init+0x324>)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	3302      	adds	r3, #2
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dfe:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e22:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e28:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e4c:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e52:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_GPIO_Init+0x350>)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	f67f ae86 	bls.w	8004bc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3724      	adds	r7, #36	; 0x24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40013800 	.word	0x40013800
 8004ec8:	40020000 	.word	0x40020000
 8004ecc:	40020400 	.word	0x40020400
 8004ed0:	40020800 	.word	0x40020800
 8004ed4:	40020c00 	.word	0x40020c00
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40021400 	.word	0x40021400
 8004ee0:	40021800 	.word	0x40021800
 8004ee4:	40021c00 	.word	0x40021c00
 8004ee8:	40022000 	.word	0x40022000
 8004eec:	40022400 	.word	0x40022400
 8004ef0:	40013c00 	.word	0x40013c00

08004ef4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e0d9      	b.n	80050c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f10:	2201      	movs	r2, #1
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f040 80c9 	bne.w	80050be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f2c:	4a6a      	ldr	r2, [pc, #424]	; (80050d8 <HAL_GPIO_DeInit+0x1e4>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	3302      	adds	r3, #2
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a62      	ldr	r2, [pc, #392]	; (80050dc <HAL_GPIO_DeInit+0x1e8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d037      	beq.n	8004fc6 <HAL_GPIO_DeInit+0xd2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <HAL_GPIO_DeInit+0x1ec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d031      	beq.n	8004fc2 <HAL_GPIO_DeInit+0xce>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a60      	ldr	r2, [pc, #384]	; (80050e4 <HAL_GPIO_DeInit+0x1f0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02b      	beq.n	8004fbe <HAL_GPIO_DeInit+0xca>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a5f      	ldr	r2, [pc, #380]	; (80050e8 <HAL_GPIO_DeInit+0x1f4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d025      	beq.n	8004fba <HAL_GPIO_DeInit+0xc6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a5e      	ldr	r2, [pc, #376]	; (80050ec <HAL_GPIO_DeInit+0x1f8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01f      	beq.n	8004fb6 <HAL_GPIO_DeInit+0xc2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <HAL_GPIO_DeInit+0x1fc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d019      	beq.n	8004fb2 <HAL_GPIO_DeInit+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <HAL_GPIO_DeInit+0x200>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_GPIO_DeInit+0xba>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a5b      	ldr	r2, [pc, #364]	; (80050f8 <HAL_GPIO_DeInit+0x204>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00d      	beq.n	8004faa <HAL_GPIO_DeInit+0xb6>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a5a      	ldr	r2, [pc, #360]	; (80050fc <HAL_GPIO_DeInit+0x208>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <HAL_GPIO_DeInit+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a59      	ldr	r2, [pc, #356]	; (8005100 <HAL_GPIO_DeInit+0x20c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_GPIO_DeInit+0xae>
 8004f9e:	2309      	movs	r3, #9
 8004fa0:	e012      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	e010      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	e00e      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004faa:	2307      	movs	r3, #7
 8004fac:	e00c      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fae:	2306      	movs	r3, #6
 8004fb0:	e00a      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	e008      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fb6:	2304      	movs	r3, #4
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e004      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e002      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_GPIO_DeInit+0xd4>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	f002 0203 	and.w	r2, r2, #3
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	4093      	lsls	r3, r2
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d132      	bne.n	800503e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <HAL_GPIO_DeInit+0x1e4>)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	3302      	adds	r3, #2
 8004ff0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	4837      	ldr	r0, [pc, #220]	; (80050d8 <HAL_GPIO_DeInit+0x1e4>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	400a      	ands	r2, r1
 8005000:	3302      	adds	r3, #2
 8005002:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005006:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	43db      	mvns	r3, r3
 800500e:	493d      	ldr	r1, [pc, #244]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 8005010:	4013      	ands	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005014:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	4939      	ldr	r1, [pc, #228]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 800501e:	4013      	ands	r3, r2
 8005020:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005022:	4b38      	ldr	r3, [pc, #224]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43db      	mvns	r3, r3
 800502a:	4936      	ldr	r1, [pc, #216]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 800502c:	4013      	ands	r3, r2
 800502e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005030:	4b34      	ldr	r3, [pc, #208]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	4932      	ldr	r1, [pc, #200]	; (8005104 <HAL_GPIO_DeInit+0x210>)
 800503a:	4013      	ands	r3, r2
 800503c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	2103      	movs	r1, #3
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	220f      	movs	r2, #15
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	08d2      	lsrs	r2, r2, #3
 8005074:	4019      	ands	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3208      	adds	r2, #8
 800507a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2103      	movs	r1, #3
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	2101      	movs	r1, #1
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2103      	movs	r1, #3
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	401a      	ands	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	f67f af22 	bls.w	8004f10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40020800 	.word	0x40020800
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40021c00 	.word	0x40021c00
 80050fc:	40022000 	.word	0x40022000
 8005100:	40022400 	.word	0x40022400
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	e001      	b.n	800512a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800512a:	7bfb      	ldrb	r3, [r7, #15]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	807b      	strh	r3, [r7, #2]
 8005144:	4613      	mov	r3, r2
 8005146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005148:	787b      	ldrb	r3, [r7, #1]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800514e:	887a      	ldrh	r2, [r7, #2]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005154:	e003      	b.n	800515e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005156:	887b      	ldrh	r3, [r7, #2]
 8005158:	041a      	lsls	r2, r3, #16
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	619a      	str	r2, [r3, #24]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	887b      	ldrh	r3, [r7, #2]
 800517c:	401a      	ands	r2, r3
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	041a      	lsls	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800518c:	e002      	b.n	8005194 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 fd68 	bl	8007c94 <HAL_GPIO_EXTI_Callback>
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40013c00 	.word	0x40013c00

080051d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07f      	b.n	80052e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8a9 	bl	800534e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	; 0x24
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005220:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005230:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	e006      	b.n	8005258 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005256:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d104      	bne.n	800526a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005268:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <HAL_I2C_Init+0x11c>)
 8005276:	430b      	orrs	r3, r1
 8005278:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	ea42 0103 	orr.w	r1, r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69d9      	ldr	r1, [r3, #28]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	02008000 	.word	0x02008000

080052f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e021      	b.n	8005346 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2224      	movs	r2, #36	; 0x24
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f821 	bl	8005362 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4603      	mov	r3, r0
 8005388:	817b      	strh	r3, [r7, #10]
 800538a:	460b      	mov	r3, r1
 800538c:	813b      	strh	r3, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 80f9 	bne.w	8005592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_I2C_Mem_Write+0x34>
 80053a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0ed      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Mem_Write+0x4e>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0e6      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053ce:	f7fd fa93 	bl	80028f8 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2319      	movs	r3, #25
 80053da:	2201      	movs	r2, #1
 80053dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fad1 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0d1      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005418:	88f8      	ldrh	r0, [r7, #6]
 800541a:	893a      	ldrh	r2, [r7, #8]
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4603      	mov	r3, r0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f9e1 	bl	80057f0 <I2C_RequestMemoryWrite>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0a9      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d90e      	bls.n	8005468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	b2da      	uxtb	r2, r3
 8005456:	8979      	ldrh	r1, [r7, #10]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fbb3 	bl	8005bcc <I2C_TransferConfig>
 8005466:	e00f      	b.n	8005488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	b2da      	uxtb	r2, r3
 8005478:	8979      	ldrh	r1, [r7, #10]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fba2 	bl	8005bcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fabb 	bl	8005a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e07b      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d034      	beq.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d130      	bne.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2200      	movs	r2, #0
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fa4d 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e04d      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d90e      	bls.n	8005520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	b2da      	uxtb	r2, r3
 800550e:	8979      	ldrh	r1, [r7, #10]
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fb57 	bl	8005bcc <I2C_TransferConfig>
 800551e:	e00f      	b.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	8979      	ldrh	r1, [r7, #10]
 8005532:	2300      	movs	r3, #0
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb46 	bl	8005bcc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d19e      	bne.n	8005488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fa9a 	bl	8005a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e01a      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2220      	movs	r2, #32
 8005564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_I2C_Mem_Write+0x224>)
 8005572:	400b      	ands	r3, r1
 8005574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	fe00e800 	.word	0xfe00e800

080055a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	460b      	mov	r3, r1
 80055b4:	813b      	strh	r3, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	f040 80fd 	bne.w	80057c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_I2C_Mem_Read+0x34>
 80055ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0f1      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Mem_Read+0x4e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ea      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055f6:	f7fd f97f 	bl	80028f8 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2319      	movs	r3, #25
 8005602:	2201      	movs	r2, #1
 8005604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9bd 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0d5      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005640:	88f8      	ldrh	r0, [r7, #6]
 8005642:	893a      	ldrh	r2, [r7, #8]
 8005644:	8979      	ldrh	r1, [r7, #10]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4603      	mov	r3, r0
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f921 	bl	8005898 <I2C_RequestMemoryRead>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0ad      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d90e      	bls.n	8005690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	b2da      	uxtb	r2, r3
 800567e:	8979      	ldrh	r1, [r7, #10]
 8005680:	4b52      	ldr	r3, [pc, #328]	; (80057cc <HAL_I2C_Mem_Read+0x22c>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fa9f 	bl	8005bcc <I2C_TransferConfig>
 800568e:	e00f      	b.n	80056b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	8979      	ldrh	r1, [r7, #10]
 80056a2:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_I2C_Mem_Read+0x22c>)
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fa8e 	bl	8005bcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2200      	movs	r2, #0
 80056b8:	2104      	movs	r1, #4
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f964 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07c      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d034      	beq.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d130      	bne.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f935 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e04d      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d90e      	bls.n	8005750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fa3f 	bl	8005bcc <I2C_TransferConfig>
 800574e:	e00f      	b.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575e:	b2da      	uxtb	r2, r3
 8005760:	8979      	ldrh	r1, [r7, #10]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fa2e 	bl	8005bcc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d19a      	bne.n	80056b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f982 	bl	8005a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e01a      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_I2C_Mem_Read+0x230>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	80002400 	.word	0x80002400
 80057d0:	fe00e800 	.word	0xfe00e800

080057d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e2:	b2db      	uxtb	r3, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	817b      	strh	r3, [r7, #10]
 8005802:	460b      	mov	r3, r1
 8005804:	813b      	strh	r3, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	8979      	ldrh	r1, [r7, #10]
 8005810:	4b20      	ldr	r3, [pc, #128]	; (8005894 <I2C_RequestMemoryWrite+0xa4>)
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f9d7 	bl	8005bcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	69b9      	ldr	r1, [r7, #24]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f8f0 	bl	8005a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e02c      	b.n	800588c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
 8005842:	e015      	b.n	8005870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b29b      	uxth	r3, r3
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	69b9      	ldr	r1, [r7, #24]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f8d6 	bl	8005a08 <I2C_WaitOnTXISFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e012      	b.n	800588c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2200      	movs	r2, #0
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f884 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	80002000 	.word	0x80002000

08005898 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	817b      	strh	r3, [r7, #10]
 80058aa:	460b      	mov	r3, r1
 80058ac:	813b      	strh	r3, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	8979      	ldrh	r1, [r7, #10]
 80058b8:	4b20      	ldr	r3, [pc, #128]	; (800593c <I2C_RequestMemoryRead+0xa4>)
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2300      	movs	r3, #0
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f984 	bl	8005bcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	69b9      	ldr	r1, [r7, #24]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f89d 	bl	8005a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e02c      	b.n	8005932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d105      	bne.n	80058ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058de:	893b      	ldrh	r3, [r7, #8]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28
 80058e8:	e015      	b.n	8005916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058ea:	893b      	ldrh	r3, [r7, #8]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	69b9      	ldr	r1, [r7, #24]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f883 	bl	8005a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e012      	b.n	8005932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800590c:	893b      	ldrh	r3, [r7, #8]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2200      	movs	r2, #0
 800591e:	2140      	movs	r1, #64	; 0x40
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f831 	bl	8005988 <I2C_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	80002000 	.word	0x80002000

08005940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d103      	bne.n	800595e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d007      	beq.n	800597c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	619a      	str	r2, [r3, #24]
  }
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005998:	e022      	b.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d01e      	beq.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a2:	f7fc ffa9 	bl	80028f8 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d113      	bne.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e00f      	b.n	8005a00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	bf0c      	ite	eq
 80059f0:	2301      	moveq	r3, #1
 80059f2:	2300      	movne	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d0cd      	beq.n	800599a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a14:	e02c      	b.n	8005a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f870 	bl	8005b00 <I2C_IsAcknowledgeFailed>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02a      	b.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d01e      	beq.n	8005a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7fc ff61 	bl	80028f8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d113      	bne.n	8005a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e007      	b.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d1cb      	bne.n	8005a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a94:	e028      	b.n	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f830 	bl	8005b00 <I2C_IsAcknowledgeFailed>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e026      	b.n	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc ff25 	bl	80028f8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d113      	bne.n	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e007      	b.n	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d1cf      	bne.n	8005a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d151      	bne.n	8005bbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b1a:	e022      	b.n	8005b62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d01e      	beq.n	8005b62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b24:	f7fc fee8 	bl	80028f8 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <I2C_IsAcknowledgeFailed+0x3a>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d113      	bne.n	8005b62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e02e      	b.n	8005bc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d1d5      	bne.n	8005b1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2210      	movs	r2, #16
 8005b76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fedd 	bl	8005940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b92:	400b      	ands	r3, r1
 8005b94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f043 0204 	orr.w	r2, r3, #4
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	fe00e800 	.word	0xfe00e800

08005bcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	817b      	strh	r3, [r7, #10]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	0d5b      	lsrs	r3, r3, #21
 8005be8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <I2C_TransferConfig+0x58>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	ea02 0103 	and.w	r1, r2, r3
 8005bf6:	897b      	ldrh	r3, [r7, #10]
 8005bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bfc:	7a7b      	ldrb	r3, [r7, #9]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	03ff63ff 	.word	0x03ff63ff

08005c28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0bf      	b.n	8005dba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f004 fa6e 	bl	800a130 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <HAL_LTDC_Init+0x19c>)
 8005c9c:	400b      	ands	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6899      	ldr	r1, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68d9      	ldr	r1, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <HAL_LTDC_Init+0x19c>)
 8005cca:	400b      	ands	r3, r1
 8005ccc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68d9      	ldr	r1, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6919      	ldr	r1, [r3, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <HAL_LTDC_Init+0x19c>)
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6919      	ldr	r1, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6959      	ldr	r1, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_LTDC_Init+0x19c>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6959      	ldr	r1, [r3, #20]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0206 	orr.w	r2, r2, #6
 8005d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	f000f800 	.word	0xf000f800

08005dc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_LTDC_ConfigLayer+0x1a>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e02c      	b.n	8005e3c <HAL_LTDC_ConfigLayer+0x74>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2134      	movs	r1, #52	; 0x34
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4614      	mov	r4, r2
 8005e06:	461d      	mov	r5, r3
 8005e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f811 	bl	8005e44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2201      	movs	r2, #1
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bdb0      	pop	{r4, r5, r7, pc}

08005e44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e60:	4413      	add	r3, r2
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	4413      	add	r3, r2
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	01d2      	lsls	r2, r2, #7
 8005e80:	440a      	add	r2, r1
 8005e82:	3284      	adds	r2, #132	; 0x84
 8005e84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e9a:	4413      	add	r3, r2
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	01db      	lsls	r3, r3, #7
 8005ea8:	440b      	add	r3, r1
 8005eaa:	3384      	adds	r3, #132	; 0x84
 8005eac:	4619      	mov	r1, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec2:	4413      	add	r3, r2
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3384      	adds	r3, #132	; 0x84
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	4611      	mov	r1, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	01d2      	lsls	r2, r2, #7
 8005ee2:	440a      	add	r2, r1
 8005ee4:	3284      	adds	r2, #132	; 0x84
 8005ee6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005eea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efa:	4413      	add	r3, r2
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	440b      	add	r3, r1
 8005f0a:	3384      	adds	r3, #132	; 0x84
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	01db      	lsls	r3, r3, #7
 8005f1e:	4413      	add	r3, r2
 8005f20:	3384      	adds	r3, #132	; 0x84
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	01d2      	lsls	r2, r2, #7
 8005f2e:	440a      	add	r2, r1
 8005f30:	3284      	adds	r2, #132	; 0x84
 8005f32:	f023 0307 	bic.w	r3, r3, #7
 8005f36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	01db      	lsls	r3, r3, #7
 8005f42:	4413      	add	r3, r2
 8005f44:	3384      	adds	r3, #132	; 0x84
 8005f46:	461a      	mov	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	01db      	lsls	r3, r3, #7
 8005f74:	4413      	add	r3, r2
 8005f76:	3384      	adds	r3, #132	; 0x84
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	4413      	add	r3, r2
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f94:	461a      	mov	r2, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	01db      	lsls	r3, r3, #7
 8005fa8:	440b      	add	r3, r1
 8005faa:	3384      	adds	r3, #132	; 0x84
 8005fac:	4619      	mov	r1, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	01db      	lsls	r3, r3, #7
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3384      	adds	r3, #132	; 0x84
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	01d2      	lsls	r2, r2, #7
 8005fce:	440a      	add	r2, r1
 8005fd0:	3284      	adds	r2, #132	; 0x84
 8005fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fd6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	01db      	lsls	r3, r3, #7
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3384      	adds	r3, #132	; 0x84
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	69da      	ldr	r2, [r3, #28]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	440b      	add	r3, r1
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	4619      	mov	r1, r3
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <LTDC_SetConfig+0x32c>)
 8006010:	4013      	ands	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	6809      	ldr	r1, [r1, #0]
 8006020:	4608      	mov	r0, r1
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	01c9      	lsls	r1, r1, #7
 8006026:	4401      	add	r1, r0
 8006028:	3184      	adds	r1, #132	; 0x84
 800602a:	4313      	orrs	r3, r2
 800602c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01db      	lsls	r3, r3, #7
 8006038:	4413      	add	r3, r2
 800603a:	3384      	adds	r3, #132	; 0x84
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	4413      	add	r3, r2
 800604a:	3384      	adds	r3, #132	; 0x84
 800604c:	461a      	mov	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	01db      	lsls	r3, r3, #7
 800605c:	4413      	add	r3, r2
 800605e:	3384      	adds	r3, #132	; 0x84
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006070:	2304      	movs	r3, #4
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	e01b      	b.n	80060ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d102      	bne.n	8006084 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800607e:	2303      	movs	r3, #3
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e014      	b.n	80060ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d00b      	beq.n	80060a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006090:	2b02      	cmp	r3, #2
 8006092:	d007      	beq.n	80060a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006098:	2b03      	cmp	r3, #3
 800609a:	d003      	beq.n	80060a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060a0:	2b07      	cmp	r3, #7
 80060a2:	d102      	bne.n	80060aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060a4:	2302      	movs	r3, #2
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e001      	b.n	80060ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	01db      	lsls	r3, r3, #7
 80060b8:	4413      	add	r3, r2
 80060ba:	3384      	adds	r3, #132	; 0x84
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	4611      	mov	r1, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	01d2      	lsls	r2, r2, #7
 80060c8:	440a      	add	r2, r1
 80060ca:	3284      	adds	r2, #132	; 0x84
 80060cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80060d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	fb02 f303 	mul.w	r3, r2, r3
 80060dc:	041a      	lsls	r2, r3, #16
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1acb      	subs	r3, r1, r3
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	3303      	adds	r3, #3
 80060f0:	68f9      	ldr	r1, [r7, #12]
 80060f2:	6809      	ldr	r1, [r1, #0]
 80060f4:	4608      	mov	r0, r1
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	01c9      	lsls	r1, r1, #7
 80060fa:	4401      	add	r1, r0
 80060fc:	3184      	adds	r1, #132	; 0x84
 80060fe:	4313      	orrs	r3, r2
 8006100:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	01db      	lsls	r3, r3, #7
 800610c:	4413      	add	r3, r2
 800610e:	3384      	adds	r3, #132	; 0x84
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	440b      	add	r3, r1
 800611e:	3384      	adds	r3, #132	; 0x84
 8006120:	4619      	mov	r1, r3
 8006122:	4b14      	ldr	r3, [pc, #80]	; (8006174 <LTDC_SetConfig+0x330>)
 8006124:	4013      	ands	r3, r2
 8006126:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	4413      	add	r3, r2
 8006134:	3384      	adds	r3, #132	; 0x84
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	4413      	add	r3, r2
 800614a:	3384      	adds	r3, #132	; 0x84
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4611      	mov	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	01d2      	lsls	r2, r2, #7
 8006158:	440a      	add	r2, r1
 800615a:	3284      	adds	r2, #132	; 0x84
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	fffff8f8 	.word	0xfffff8f8
 8006174:	fffff800 	.word	0xfffff800

08006178 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800618a:	2200      	movs	r2, #0
 800618c:	e001      	b.n	8006192 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800618e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800619e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061a2:	e000      	b.n	80061a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80061a4:	2200      	movs	r2, #0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80061b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061b6:	e000      	b.n	80061ba <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80061b8:	2200      	movs	r2, #0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	4413      	add	r3, r2
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	441a      	add	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	4413      	add	r3, r2
 80061e8:	1e5a      	subs	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	441a      	add	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	441a      	add	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	4413      	add	r3, r2
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006222:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622c:	6413      	str	r3, [r2, #64]	; 0x40
 800622e:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006246:	f7fc fb57 	bl	80028f8 <HAL_GetTick>
 800624a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800624c:	e009      	b.n	8006262 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800624e:	f7fc fb53 	bl	80028f8 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800625c:	d901      	bls.n	8006262 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e022      	b.n	80062a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626e:	d1ee      	bne.n	800624e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006270:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800627c:	f7fc fb3c 	bl	80028f8 <HAL_GetTick>
 8006280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006282:	e009      	b.n	8006298 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006284:	f7fc fb38 	bl	80028f8 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006292:	d901      	bls.n	8006298 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e007      	b.n	80062a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062a4:	d1ee      	bne.n	8006284 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40007000 	.word	0x40007000

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80062c0:	2300      	movs	r3, #0
 80062c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e25e      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8087 	beq.w	80063ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062dc:	4b96      	ldr	r3, [pc, #600]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d00c      	beq.n	8006302 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e8:	4b93      	ldr	r3, [pc, #588]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d112      	bne.n	800631a <HAL_RCC_OscConfig+0x62>
 80062f4:	4b90      	ldr	r3, [pc, #576]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006300:	d10b      	bne.n	800631a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006302:	4b8d      	ldr	r3, [pc, #564]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d06c      	beq.n	80063e8 <HAL_RCC_OscConfig+0x130>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d168      	bne.n	80063e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e238      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006322:	d106      	bne.n	8006332 <HAL_RCC_OscConfig+0x7a>
 8006324:	4b84      	ldr	r3, [pc, #528]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a83      	ldr	r2, [pc, #524]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800632a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e02e      	b.n	8006390 <HAL_RCC_OscConfig+0xd8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10c      	bne.n	8006354 <HAL_RCC_OscConfig+0x9c>
 800633a:	4b7f      	ldr	r3, [pc, #508]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7e      	ldr	r2, [pc, #504]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b7c      	ldr	r3, [pc, #496]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a7b      	ldr	r2, [pc, #492]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800634c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e01d      	b.n	8006390 <HAL_RCC_OscConfig+0xd8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0xc0>
 800635e:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a75      	ldr	r2, [pc, #468]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4b73      	ldr	r3, [pc, #460]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a72      	ldr	r2, [pc, #456]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e00b      	b.n	8006390 <HAL_RCC_OscConfig+0xd8>
 8006378:	4b6f      	ldr	r3, [pc, #444]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6e      	ldr	r2, [pc, #440]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800637e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b6c      	ldr	r3, [pc, #432]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a6b      	ldr	r2, [pc, #428]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800638a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d013      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fc faae 	bl	80028f8 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fc faaa 	bl	80028f8 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1ec      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e014      	b.n	80063ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fc fa9a 	bl	80028f8 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063c8:	f7fc fa96 	bl	80028f8 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e1d8      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063da:	4b57      	ldr	r3, [pc, #348]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x110>
 80063e6:	e000      	b.n	80063ea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d069      	beq.n	80064ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063f6:	4b50      	ldr	r3, [pc, #320]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006402:	4b4d      	ldr	r3, [pc, #308]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	2b08      	cmp	r3, #8
 800640c:	d11c      	bne.n	8006448 <HAL_RCC_OscConfig+0x190>
 800640e:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d116      	bne.n	8006448 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641a:	4b47      	ldr	r3, [pc, #284]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_RCC_OscConfig+0x17a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d001      	beq.n	8006432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e1ac      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	493d      	ldr	r1, [pc, #244]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006442:	4313      	orrs	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006446:	e040      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d023      	beq.n	8006498 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006450:	4b39      	ldr	r3, [pc, #228]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a38      	ldr	r2, [pc, #224]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fc fa4c 	bl	80028f8 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006464:	f7fc fa48 	bl	80028f8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e18a      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b2d      	ldr	r3, [pc, #180]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4929      	ldr	r1, [pc, #164]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
 8006496:	e018      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006498:	4b27      	ldr	r3, [pc, #156]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a26      	ldr	r2, [pc, #152]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fc fa28 	bl	80028f8 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ac:	f7fc fa24 	bl	80028f8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e166      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064be:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f0      	bne.n	80064ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d038      	beq.n	8006548 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d019      	beq.n	8006512 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064de:	4b16      	ldr	r3, [pc, #88]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	4a15      	ldr	r2, [pc, #84]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7fc fa05 	bl	80028f8 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f2:	f7fc fa01 	bl	80028f8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e143      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x23a>
 8006510:	e01a      	b.n	8006548 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <HAL_RCC_OscConfig+0x280>)
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651e:	f7fc f9eb 	bl	80028f8 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006524:	e00a      	b.n	800653c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006526:	f7fc f9e7 	bl	80028f8 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d903      	bls.n	800653c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e129      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
 8006538:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	4b95      	ldr	r3, [pc, #596]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800653e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1ee      	bne.n	8006526 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80a4 	beq.w	800669e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006556:	4b8f      	ldr	r3, [pc, #572]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006562:	4b8c      	ldr	r3, [pc, #560]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a8b      	ldr	r2, [pc, #556]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b89      	ldr	r3, [pc, #548]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657e:	4b86      	ldr	r3, [pc, #536]	; (8006798 <HAL_RCC_OscConfig+0x4e0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d118      	bne.n	80065bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800658a:	4b83      	ldr	r3, [pc, #524]	; (8006798 <HAL_RCC_OscConfig+0x4e0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a82      	ldr	r2, [pc, #520]	; (8006798 <HAL_RCC_OscConfig+0x4e0>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fc f9af 	bl	80028f8 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fc f9ab 	bl	80028f8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b64      	cmp	r3, #100	; 0x64
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0ed      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b0:	4b79      	ldr	r3, [pc, #484]	; (8006798 <HAL_RCC_OscConfig+0x4e0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x31a>
 80065c4:	4b73      	ldr	r3, [pc, #460]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a72      	ldr	r2, [pc, #456]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
 80065d0:	e02d      	b.n	800662e <HAL_RCC_OscConfig+0x376>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x33c>
 80065da:	4b6e      	ldr	r3, [pc, #440]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a6d      	ldr	r2, [pc, #436]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
 80065e6:	4b6b      	ldr	r3, [pc, #428]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	6713      	str	r3, [r2, #112]	; 0x70
 80065f2:	e01c      	b.n	800662e <HAL_RCC_OscConfig+0x376>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d10c      	bne.n	8006616 <HAL_RCC_OscConfig+0x35e>
 80065fc:	4b65      	ldr	r3, [pc, #404]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	4a64      	ldr	r2, [pc, #400]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6713      	str	r3, [r2, #112]	; 0x70
 8006608:	4b62      	ldr	r3, [pc, #392]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a61      	ldr	r2, [pc, #388]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	e00b      	b.n	800662e <HAL_RCC_OscConfig+0x376>
 8006616:	4b5f      	ldr	r3, [pc, #380]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a5e      	ldr	r2, [pc, #376]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
 8006622:	4b5c      	ldr	r3, [pc, #368]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a5b      	ldr	r2, [pc, #364]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006636:	f7fc f95f 	bl	80028f8 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663c:	e00a      	b.n	8006654 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fc f95b 	bl	80028f8 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	; 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e09b      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	4b4f      	ldr	r3, [pc, #316]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RCC_OscConfig+0x386>
 8006660:	e014      	b.n	800668c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fc f949 	bl	80028f8 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fc f945 	bl	80028f8 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e085      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006680:	4b44      	ldr	r3, [pc, #272]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ee      	bne.n	800666a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d105      	bne.n	800669e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	4a3f      	ldr	r2, [pc, #252]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d071      	beq.n	800678a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066a6:	4b3b      	ldr	r3, [pc, #236]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d069      	beq.n	8006786 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d14b      	bne.n	8006752 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ba:	4b36      	ldr	r3, [pc, #216]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a35      	ldr	r2, [pc, #212]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fc f917 	bl	80028f8 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ce:	f7fc f913 	bl	80028f8 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e055      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e0:	4b2c      	ldr	r3, [pc, #176]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	019b      	lsls	r3, r3, #6
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	3b01      	subs	r3, #1
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	061b      	lsls	r3, r3, #24
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	071b      	lsls	r3, r3, #28
 8006718:	491e      	ldr	r1, [pc, #120]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800671a:	4313      	orrs	r3, r2
 800671c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006724:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fc f8e5 	bl	80028f8 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006732:	f7fc f8e1 	bl	80028f8 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e023      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006744:	4b13      	ldr	r3, [pc, #76]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x47a>
 8006750:	e01b      	b.n	800678a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675e:	f7fc f8cb 	bl	80028f8 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006766:	f7fc f8c7 	bl	80028f8 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e009      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f0      	bne.n	8006766 <HAL_RCC_OscConfig+0x4ae>
 8006784:	e001      	b.n	800678a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	40007000 	.word	0x40007000

0800679c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0ce      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067b4:	4b69      	ldr	r3, [pc, #420]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d910      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c2:	4b66      	ldr	r3, [pc, #408]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 020f 	bic.w	r2, r3, #15
 80067ca:	4964      	ldr	r1, [pc, #400]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b62      	ldr	r3, [pc, #392]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0b6      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067fc:	4b58      	ldr	r3, [pc, #352]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4a57      	ldr	r2, [pc, #348]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006814:	4b52      	ldr	r3, [pc, #328]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4a51      	ldr	r2, [pc, #324]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800681e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006820:	4b4f      	ldr	r3, [pc, #316]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	494c      	ldr	r1, [pc, #304]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d040      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b46      	ldr	r3, [pc, #280]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d115      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e07d      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d107      	bne.n	800686e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685e:	4b40      	ldr	r3, [pc, #256]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e071      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686e:	4b3c      	ldr	r3, [pc, #240]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e069      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800687e:	4b38      	ldr	r3, [pc, #224]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f023 0203 	bic.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4935      	ldr	r1, [pc, #212]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006890:	f7fc f832 	bl	80028f8 <HAL_GetTick>
 8006894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	e00a      	b.n	80068ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006898:	f7fc f82e 	bl	80028f8 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e051      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ae:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 020c 	and.w	r2, r3, #12
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	429a      	cmp	r2, r3
 80068be:	d1eb      	bne.n	8006898 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068c0:	4b26      	ldr	r3, [pc, #152]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d210      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b23      	ldr	r3, [pc, #140]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 020f 	bic.w	r2, r3, #15
 80068d6:	4921      	ldr	r1, [pc, #132]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b1f      	ldr	r3, [pc, #124]	; (800695c <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e030      	b.n	8006952 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fc:	4b18      	ldr	r3, [pc, #96]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4915      	ldr	r1, [pc, #84]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	490d      	ldr	r1, [pc, #52]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800692e:	f000 f81d 	bl	800696c <HAL_RCC_GetSysClockFreq>
 8006932:	4601      	mov	r1, r0
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006940:	5cd3      	ldrb	r3, [r2, r3]
 8006942:	fa21 f303 	lsr.w	r3, r1, r3
 8006946:	4a08      	ldr	r2, [pc, #32]	; (8006968 <HAL_RCC_ClockConfig+0x1cc>)
 8006948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800694a:	2000      	movs	r0, #0
 800694c:	f7fb ff90 	bl	8002870 <HAL_InitTick>

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40023c00 	.word	0x40023c00
 8006960:	40023800 	.word	0x40023800
 8006964:	0800ea84 	.word	0x0800ea84
 8006968:	20000074 	.word	0x20000074

0800696c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	2300      	movs	r3, #0
 800697c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006982:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b04      	cmp	r3, #4
 800698c:	d007      	beq.n	800699e <HAL_RCC_GetSysClockFreq+0x32>
 800698e:	2b08      	cmp	r3, #8
 8006990:	d008      	beq.n	80069a4 <HAL_RCC_GetSysClockFreq+0x38>
 8006992:	2b00      	cmp	r3, #0
 8006994:	f040 808d 	bne.w	8006ab2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b4b      	ldr	r3, [pc, #300]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800699a:	60bb      	str	r3, [r7, #8]
       break;
 800699c:	e08c      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800699e:	4b4b      	ldr	r3, [pc, #300]	; (8006acc <HAL_RCC_GetSysClockFreq+0x160>)
 80069a0:	60bb      	str	r3, [r7, #8]
      break;
 80069a2:	e089      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069a4:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80069ae:	4b45      	ldr	r3, [pc, #276]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d023      	beq.n	8006a02 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ba:	4b42      	ldr	r3, [pc, #264]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	099b      	lsrs	r3, r3, #6
 80069c0:	f04f 0400 	mov.w	r4, #0
 80069c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	ea03 0501 	and.w	r5, r3, r1
 80069d0:	ea04 0602 	and.w	r6, r4, r2
 80069d4:	4a3d      	ldr	r2, [pc, #244]	; (8006acc <HAL_RCC_GetSysClockFreq+0x160>)
 80069d6:	fb02 f106 	mul.w	r1, r2, r6
 80069da:	2200      	movs	r2, #0
 80069dc:	fb02 f205 	mul.w	r2, r2, r5
 80069e0:	440a      	add	r2, r1
 80069e2:	493a      	ldr	r1, [pc, #232]	; (8006acc <HAL_RCC_GetSysClockFreq+0x160>)
 80069e4:	fba5 0101 	umull	r0, r1, r5, r1
 80069e8:	1853      	adds	r3, r2, r1
 80069ea:	4619      	mov	r1, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	461a      	mov	r2, r3
 80069f4:	4623      	mov	r3, r4
 80069f6:	f7f9 fc73 	bl	80002e0 <__aeabi_uldivmod>
 80069fa:	4603      	mov	r3, r0
 80069fc:	460c      	mov	r4, r1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e049      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	f04f 0400 	mov.w	r4, #0
 8006a0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	ea03 0501 	and.w	r5, r3, r1
 8006a18:	ea04 0602 	and.w	r6, r4, r2
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4632      	mov	r2, r6
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	0154      	lsls	r4, r2, #5
 8006a2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a2e:	014b      	lsls	r3, r1, #5
 8006a30:	4619      	mov	r1, r3
 8006a32:	4622      	mov	r2, r4
 8006a34:	1b49      	subs	r1, r1, r5
 8006a36:	eb62 0206 	sbc.w	r2, r2, r6
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	f04f 0400 	mov.w	r4, #0
 8006a42:	0194      	lsls	r4, r2, #6
 8006a44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a48:	018b      	lsls	r3, r1, #6
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	eb64 0402 	sbc.w	r4, r4, r2
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	00e2      	lsls	r2, r4, #3
 8006a5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a5e:	00d9      	lsls	r1, r3, #3
 8006a60:	460b      	mov	r3, r1
 8006a62:	4614      	mov	r4, r2
 8006a64:	195b      	adds	r3, r3, r5
 8006a66:	eb44 0406 	adc.w	r4, r4, r6
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	02a2      	lsls	r2, r4, #10
 8006a74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a78:	0299      	lsls	r1, r3, #10
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	4621      	mov	r1, r4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f04f 0400 	mov.w	r4, #0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	f7f9 fc28 	bl	80002e0 <__aeabi_uldivmod>
 8006a90:	4603      	mov	r3, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	60bb      	str	r3, [r7, #8]
      break;
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ab4:	60bb      	str	r3, [r7, #8]
      break;
 8006ab6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	00f42400 	.word	0x00f42400
 8006acc:	017d7840 	.word	0x017d7840

08006ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d012      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006af8:	4b69      	ldr	r3, [pc, #420]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a68      	ldr	r2, [pc, #416]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b02:	6093      	str	r3, [r2, #8]
 8006b04:	4b66      	ldr	r3, [pc, #408]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0c:	4964      	ldr	r1, [pc, #400]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d017      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b2a:	4b5d      	ldr	r3, [pc, #372]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	4959      	ldr	r1, [pc, #356]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b48:	d101      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b56:	2301      	movs	r3, #1
 8006b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b66:	4b4e      	ldr	r3, [pc, #312]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	494a      	ldr	r1, [pc, #296]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b84:	d101      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b86:	2301      	movs	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 808b 	beq.w	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bb4:	4b3a      	ldr	r3, [pc, #232]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	4a39      	ldr	r2, [pc, #228]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc0:	4b37      	ldr	r3, [pc, #220]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bcc:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a34      	ldr	r2, [pc, #208]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd8:	f7fb fe8e 	bl	80028f8 <HAL_GetTick>
 8006bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be0:	f7fb fe8a 	bl	80028f8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b64      	cmp	r3, #100	; 0x64
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e38d      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bf2:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0f0      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bfe:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d035      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d02e      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c1c:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c26:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c36:	4a1a      	ldr	r2, [pc, #104]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c44:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d114      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fb fe52 	bl	80028f8 <HAL_GetTick>
 8006c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c56:	e00a      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c58:	f7fb fe4e 	bl	80028f8 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e34f      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0ee      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c86:	d111      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c96:	400b      	ands	r3, r1
 8006c98:	4901      	ldr	r1, [pc, #4]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
 8006c9e:	e00b      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	40007000 	.word	0x40007000
 8006ca8:	0ffffcff 	.word	0x0ffffcff
 8006cac:	4bb3      	ldr	r3, [pc, #716]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4ab2      	ldr	r2, [pc, #712]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cb6:	6093      	str	r3, [r2, #8]
 8006cb8:	4bb0      	ldr	r3, [pc, #704]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc4:	49ad      	ldr	r1, [pc, #692]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d010      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cd6:	4ba9      	ldr	r3, [pc, #676]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	4aa7      	ldr	r2, [pc, #668]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006ce6:	4ba5      	ldr	r3, [pc, #660]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	49a2      	ldr	r1, [pc, #648]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d04:	4b9d      	ldr	r3, [pc, #628]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	499a      	ldr	r1, [pc, #616]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d26:	4b95      	ldr	r3, [pc, #596]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d34:	4991      	ldr	r1, [pc, #580]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d48:	4b8c      	ldr	r3, [pc, #560]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d56:	4989      	ldr	r1, [pc, #548]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d6a:	4b84      	ldr	r3, [pc, #528]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4980      	ldr	r1, [pc, #512]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d8c:	4b7b      	ldr	r3, [pc, #492]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f023 0203 	bic.w	r2, r3, #3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	4978      	ldr	r1, [pc, #480]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dae:	4b73      	ldr	r3, [pc, #460]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db4:	f023 020c 	bic.w	r2, r3, #12
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbc:	496f      	ldr	r1, [pc, #444]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dd0:	4b6a      	ldr	r3, [pc, #424]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	4967      	ldr	r1, [pc, #412]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006df2:	4b62      	ldr	r3, [pc, #392]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	495e      	ldr	r1, [pc, #376]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e14:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	4956      	ldr	r1, [pc, #344]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e36:	4b51      	ldr	r3, [pc, #324]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e44:	494d      	ldr	r1, [pc, #308]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e58:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e66:	4945      	ldr	r1, [pc, #276]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e7a:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e88:	493c      	ldr	r1, [pc, #240]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e9c:	4b37      	ldr	r3, [pc, #220]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eaa:	4934      	ldr	r1, [pc, #208]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d011      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ebe:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ecc:	492b      	ldr	r1, [pc, #172]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006edc:	d101      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006efe:	4b1f      	ldr	r3, [pc, #124]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0c:	491b      	ldr	r1, [pc, #108]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f30:	4912      	ldr	r1, [pc, #72]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006f44:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	4909      	ldr	r1, [pc, #36]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	e002      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	4985      	ldr	r1, [pc, #532]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f94:	4b80      	ldr	r3, [pc, #512]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa4:	497c      	ldr	r1, [pc, #496]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d005      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fba:	f040 80d6 	bne.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a75      	ldr	r2, [pc, #468]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fca:	f7fb fc95 	bl	80028f8 <HAL_GetTick>
 8006fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fd2:	f7fb fc91 	bl	80028f8 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b64      	cmp	r3, #100	; 0x64
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e194      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fe4:	4b6c      	ldr	r3, [pc, #432]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d021      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11d      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007004:	4b64      	ldr	r3, [pc, #400]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007012:	4b61      	ldr	r3, [pc, #388]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007018:	0e1b      	lsrs	r3, r3, #24
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	019a      	lsls	r2, r3, #6
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	431a      	orrs	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	071b      	lsls	r3, r3, #28
 8007038:	4957      	ldr	r1, [pc, #348]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007054:	d00a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800705e:	2b00      	cmp	r3, #0
 8007060:	d02e      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800706a:	d129      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800706c:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800706e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800707c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007080:	0f1b      	lsrs	r3, r3, #28
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	019a      	lsls	r2, r3, #6
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	041b      	lsls	r3, r3, #16
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	071b      	lsls	r3, r3, #28
 80070a0:	493d      	ldr	r1, [pc, #244]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070a8:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ae:	f023 021f 	bic.w	r2, r3, #31
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4937      	ldr	r1, [pc, #220]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01d      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070cc:	4b32      	ldr	r3, [pc, #200]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	0f1b      	lsrs	r3, r3, #28
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	019a      	lsls	r2, r3, #6
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	431a      	orrs	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	431a      	orrs	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	071b      	lsls	r3, r3, #28
 8007100:	4925      	ldr	r1, [pc, #148]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d011      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	019a      	lsls	r2, r3, #6
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	071b      	lsls	r3, r3, #28
 8007130:	4919      	ldr	r1, [pc, #100]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a16      	ldr	r2, [pc, #88]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800713e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007144:	f7fb fbd8 	bl	80028f8 <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800714c:	f7fb fbd4 	bl	80028f8 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e0d7      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b01      	cmp	r3, #1
 800716e:	f040 80cd 	bne.w	800730c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a08      	ldr	r2, [pc, #32]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800717c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800717e:	f7fb fbbb 	bl	80028f8 <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007184:	e00a      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007186:	f7fb fbb7 	bl	80028f8 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b64      	cmp	r3, #100	; 0x64
 8007192:	d903      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e0ba      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007198:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800719c:	4b5e      	ldr	r3, [pc, #376]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a8:	d0ed      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02e      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d12a      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071d2:	4b51      	ldr	r3, [pc, #324]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071e0:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e6:	0f1b      	lsrs	r3, r3, #28
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	019a      	lsls	r2, r3, #6
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	431a      	orrs	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	4944      	ldr	r1, [pc, #272]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800720e:	4b42      	ldr	r3, [pc, #264]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	3b01      	subs	r3, #1
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	493d      	ldr	r1, [pc, #244]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d022      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723c:	d11d      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800723e:	4b36      	ldr	r3, [pc, #216]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800724c:	4b32      	ldr	r3, [pc, #200]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	019a      	lsls	r2, r3, #6
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	431a      	orrs	r2, r3
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	061b      	lsls	r3, r3, #24
 800726c:	431a      	orrs	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	071b      	lsls	r3, r3, #28
 8007272:	4929      	ldr	r1, [pc, #164]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d028      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007286:	4b24      	ldr	r3, [pc, #144]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728c:	0e1b      	lsrs	r3, r3, #24
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	0c1b      	lsrs	r3, r3, #16
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	019a      	lsls	r2, r3, #6
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	431a      	orrs	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	061b      	lsls	r3, r3, #24
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	071b      	lsls	r3, r3, #28
 80072ba:	4917      	ldr	r1, [pc, #92]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072c2:	4b15      	ldr	r3, [pc, #84]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4911      	ldr	r1, [pc, #68]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a0e      	ldr	r2, [pc, #56]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e4:	f7fb fb08 	bl	80028f8 <HAL_GetTick>
 80072e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072ec:	f7fb fb04 	bl	80028f8 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b64      	cmp	r3, #100	; 0x64
 80072f8:	d901      	bls.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e007      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800730a:	d1ef      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800

0800731c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e025      	b.n	800737c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f002 ffdd 	bl	800a304 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f000 fb13 	bl	8007988 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	461a      	mov	r2, r3
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	f000 fb7d 	bl	8007a6c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d101      	bne.n	80073a0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
 800739e:	e018      	b.n	80073d2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fbdb 	bl	8007b6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d104      	bne.n	80073c8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2205      	movs	r2, #5
 80073c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80073c6:	e003      	b.n	80073d0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d101      	bne.n	80073f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80073f0:	2302      	movs	r3, #2
 80073f2:	e00e      	b.n	8007412 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fbd3 	bl	8007bae <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e01d      	b.n	8007468 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 fe95 	bl	800a170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f000 f97b 	bl	8007754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <HAL_TIM_Base_Start_IT+0x50>)
 8007490:	4013      	ands	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b06      	cmp	r3, #6
 8007498:	d00b      	beq.n	80074b2 <HAL_TIM_Base_Start_IT+0x42>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a0:	d007      	beq.n	80074b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	00010007 	.word	0x00010007

080074c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d122      	bne.n	8007520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d11b      	bne.n	8007520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0202 	mvn.w	r2, #2
 80074f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f905 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 800750c:	e005      	b.n	800751a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8f7 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f908 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d122      	bne.n	8007574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b04      	cmp	r3, #4
 800753a:	d11b      	bne.n	8007574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0204 	mvn.w	r2, #4
 8007544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8db 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 8007560:	e005      	b.n	800756e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8cd 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8de 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b08      	cmp	r3, #8
 8007580:	d122      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b08      	cmp	r3, #8
 800758e:	d11b      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0208 	mvn.w	r2, #8
 8007598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2204      	movs	r2, #4
 800759e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f8b1 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 80075b4:	e005      	b.n	80075c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f8a3 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f8b4 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b10      	cmp	r3, #16
 80075d4:	d122      	bne.n	800761c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d11b      	bne.n	800761c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0210 	mvn.w	r2, #16
 80075ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2208      	movs	r2, #8
 80075f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f887 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 8007608:	e005      	b.n	8007616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f879 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f88a 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d10e      	bne.n	8007648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b01      	cmp	r3, #1
 8007636:	d107      	bne.n	8007648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0201 	mvn.w	r2, #1
 8007640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb40 	bl	8007cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007652:	2b80      	cmp	r3, #128	; 0x80
 8007654:	d10e      	bne.n	8007674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	2b80      	cmp	r3, #128	; 0x80
 8007662:	d107      	bne.n	8007674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800766c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f976 	bl	8007960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d10e      	bne.n	80076a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d107      	bne.n	80076a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800769a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f969 	bl	8007974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d10e      	bne.n	80076ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d107      	bne.n	80076ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f838 	bl	800773e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d10e      	bne.n	80076fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d107      	bne.n	80076fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f06f 0220 	mvn.w	r2, #32
 80076f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f929 	bl	800794c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a40      	ldr	r2, [pc, #256]	; (8007868 <TIM_Base_SetConfig+0x114>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d00f      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3d      	ldr	r2, [pc, #244]	; (800786c <TIM_Base_SetConfig+0x118>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00b      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3c      	ldr	r2, [pc, #240]	; (8007870 <TIM_Base_SetConfig+0x11c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3b      	ldr	r2, [pc, #236]	; (8007874 <TIM_Base_SetConfig+0x120>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_Base_SetConfig+0x40>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <TIM_Base_SetConfig+0x124>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d108      	bne.n	80077a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <TIM_Base_SetConfig+0x114>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b4:	d027      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2c      	ldr	r2, [pc, #176]	; (800786c <TIM_Base_SetConfig+0x118>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d023      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <TIM_Base_SetConfig+0x11c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01f      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <TIM_Base_SetConfig+0x120>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a29      	ldr	r2, [pc, #164]	; (8007878 <TIM_Base_SetConfig+0x124>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d017      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <TIM_Base_SetConfig+0x128>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <TIM_Base_SetConfig+0x12c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00f      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a26      	ldr	r2, [pc, #152]	; (8007884 <TIM_Base_SetConfig+0x130>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00b      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a25      	ldr	r2, [pc, #148]	; (8007888 <TIM_Base_SetConfig+0x134>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d007      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a24      	ldr	r2, [pc, #144]	; (800788c <TIM_Base_SetConfig+0x138>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a23      	ldr	r2, [pc, #140]	; (8007890 <TIM_Base_SetConfig+0x13c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d108      	bne.n	8007818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <TIM_Base_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0xf8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <TIM_Base_SetConfig+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d103      	bne.n	8007854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	615a      	str	r2, [r3, #20]
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40010400 	.word	0x40010400
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800
 8007888:	40001800 	.word	0x40001800
 800788c:	40001c00 	.word	0x40001c00
 8007890:	40002000 	.word	0x40002000

08007894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e045      	b.n	8007938 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a1c      	ldr	r2, [pc, #112]	; (8007944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800790a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	4313      	orrs	r3, r2
 8007914:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	40010000 	.word	0x40010000
 8007948:	40010400 	.word	0x40010400

0800794c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d027      	beq.n	80079f2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b2f      	ldr	r3, [pc, #188]	; (8007a68 <FMC_SDRAM_Init+0xe0>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079b8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80079be:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80079c4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80079ca:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80079d0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80079d6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80079dc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80079e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e032      	b.n	8007a58 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079fe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <FMC_SDRAM_Init+0xe0>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007a32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007a38:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007a3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007a44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	ffff8000 	.word	0xffff8000

08007a6c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d02e      	beq.n	8007ae4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a92:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007aa2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007aac:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007ab6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007ac0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007aca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	609a      	str	r2, [r3, #8]
 8007ae2:	e039      	b.n	8007b58 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <FMC_SDRAM_Timing_Init+0xfc>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007b02:	4313      	orrs	r3, r2
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007b30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007b3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b44:	4313      	orrs	r3, r2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	ff0f0fff 	.word	0xff0f0fff

08007b6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007b84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007b8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <SCB_EnableICache>:
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007bdc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <SCB_EnableICache+0x3c>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007bec:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <SCB_EnableICache+0x3c>)
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	4a06      	ldr	r2, [pc, #24]	; (8007c10 <SCB_EnableICache+0x3c>)
 8007bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bfa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007c00:	f3bf 8f6f 	isb	sy
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <SCB_EnableDCache>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007c1a:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <SCB_EnableDCache+0x7c>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007c22:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8007c26:	4b1a      	ldr	r3, [pc, #104]	; (8007c90 <SCB_EnableDCache+0x7c>)
 8007c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c2c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	0b5b      	lsrs	r3, r3, #13
 8007c32:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c36:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	08db      	lsrs	r3, r3, #3
 8007c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c40:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007c4a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007c50:	490f      	ldr	r1, [pc, #60]	; (8007c90 <SCB_EnableDCache+0x7c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	1e5a      	subs	r2, r3, #1
 8007c5c:	60ba      	str	r2, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1ef      	bne.n	8007c42 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	60fa      	str	r2, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <SCB_EnableDCache+0x24>
 8007c6c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <SCB_EnableDCache+0x7c>)
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <SCB_EnableDCache+0x7c>)
 8007c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7a:	6153      	str	r3, [r2, #20]
 8007c7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007c80:	f3bf 8f6f 	isb	sy
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	e000ed00 	.word	0xe000ed00

08007c94 <HAL_GPIO_EXTI_Callback>:
volatile int ver_quem_joga = 1; //começa no jogador 1
volatile char tabuleiro[8][8];



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13){
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca4:	d108      	bne.n	8007cb8 <HAL_GPIO_EXTI_Callback+0x24>
		BSP_TS_GetState(&TS_State);
 8007ca6:	4806      	ldr	r0, [pc, #24]	; (8007cc0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8007ca8:	f7fa fc8a 	bl	80025c0 <BSP_TS_GetState>
		ts_flag=1;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <HAL_GPIO_EXTI_Callback+0x30>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
	    HAL_Delay(100);
 8007cb2:	2064      	movs	r0, #100	; 0x64
 8007cb4:	f7fa fe2c 	bl	8002910 <HAL_Delay>
	}

}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200006cc 	.word	0x200006cc
 8007cc4:	20000314 	.word	0x20000314

08007cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d141      	bne.n	8007d5e <HAL_TIM_PeriodElapsedCallback+0x96>
		flag=1;
 8007cda:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
		count++;
 8007ce0:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007ce8:	6013      	str	r3, [r2, #0]

		  if (count%2 == 0){
 8007cea:	4b22      	ldr	r3, [pc, #136]	; (8007d74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d133      	bne.n	8007d5e <HAL_TIM_PeriodElapsedCallback+0x96>
			  //ACTUALIZA O VALOR DA TEMPERATURA
			  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 8007cf6:	4820      	ldr	r0, [pc, #128]	; (8007d78 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8007cf8:	f7fa ff30 	bl	8002b5c <HAL_ADC_GetValue>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b1f      	ldr	r3, [pc, #124]	; (8007d7c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007d00:	601a      	str	r2, [r3, #0]
			  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 8007d02:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f640 42e4 	movw	r2, #3300	; 0xce4
 8007d0a:	fb02 f203 	mul.w	r2, r2, r3
 8007d0e:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8007d10:	fba3 1302 	umull	r1, r3, r3, r2
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	0852      	lsrs	r2, r2, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	0ada      	lsrs	r2, r3, #11
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	08db      	lsrs	r3, r3, #3
 8007d32:	3319      	adds	r3, #25
 8007d34:	461a      	mov	r2, r3
 8007d36:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8007d38:	601a      	str	r2, [r3, #0]
		      if(HAL_GetTick() >= init_tick_led1 + 500)
 8007d3a:	f7fa fddd 	bl	80028f8 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b13      	ldr	r3, [pc, #76]	; (8007d90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d308      	bcc.n	8007d5e <HAL_TIM_PeriodElapsedCallback+0x96>
		      {
		          init_tick_led1 = HAL_GetTick();
 8007d4c:	f7fa fdd4 	bl	80028f8 <HAL_GetTick>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8007d56:	601a      	str	r2, [r3, #0]
		          BSP_LED_Toggle(LED_GREEN);
 8007d58:	2001      	movs	r0, #1
 8007d5a:	f7f8 ffff 	bl	8000d5c <BSP_LED_Toggle>
		      }
		  }
	}
	flag=0;
 8007d5e:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40001000 	.word	0x40001000
 8007d70:	20000308 	.word	0x20000308
 8007d74:	2000030c 	.word	0x2000030c
 8007d78:	20000544 	.word	0x20000544
 8007d7c:	2000047c 	.word	0x2000047c
 8007d80:	00100101 	.word	0x00100101
 8007d84:	ffffe250 	.word	0xffffe250
 8007d88:	51eb851f 	.word	0x51eb851f
 8007d8c:	200005cc 	.word	0x200005cc
 8007d90:	20000310 	.word	0x20000310

08007d94 <menu_inicial>:

void menu_inicial(){
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	af00      	add	r7, sp, #0
	sprintf(desc, "REVERSI");
 8007d98:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <menu_inicial+0x8c>)
 8007d9a:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <menu_inicial+0x90>)
 8007d9c:	cb03      	ldmia	r3!, {r0, r1}
 8007d9e:	6010      	str	r0, [r2, #0]
 8007da0:	6051      	str	r1, [r2, #4]
	BSP_LCD_SetFont(&Font24);
 8007da2:	4821      	ldr	r0, [pc, #132]	; (8007e28 <menu_inicial+0x94>)
 8007da4:	f7f9 fc5c 	bl	8001660 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007da8:	4820      	ldr	r0, [pc, #128]	; (8007e2c <menu_inicial+0x98>)
 8007daa:	f7f9 fc27 	bl	80015fc <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, (uint8_t *)desc, CENTER_MODE);
 8007dae:	f7f9 fbb9 	bl	8001524 <BSP_LCD_GetYSize>
 8007db2:	4603      	mov	r3, r0
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	b299      	uxth	r1, r3
 8007db8:	2301      	movs	r3, #1
 8007dba:	4a19      	ldr	r2, [pc, #100]	; (8007e20 <menu_inicial+0x8c>)
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7f9 fcd5 	bl	800176c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007dc2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007dc6:	f7f9 fc19 	bl	80015fc <BSP_LCD_SetTextColor>
	sprintf(desc, "Prima o botao azul para comecar o jogo");
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <menu_inicial+0x8c>)
 8007dcc:	4a18      	ldr	r2, [pc, #96]	; (8007e30 <menu_inicial+0x9c>)
 8007dce:	4614      	mov	r4, r2
 8007dd0:	469c      	mov	ip, r3
 8007dd2:	f104 0e20 	add.w	lr, r4, #32
 8007dd6:	4665      	mov	r5, ip
 8007dd8:	4626      	mov	r6, r4
 8007dda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007ddc:	6028      	str	r0, [r5, #0]
 8007dde:	6069      	str	r1, [r5, #4]
 8007de0:	60aa      	str	r2, [r5, #8]
 8007de2:	60eb      	str	r3, [r5, #12]
 8007de4:	3410      	adds	r4, #16
 8007de6:	f10c 0c10 	add.w	ip, ip, #16
 8007dea:	4574      	cmp	r4, lr
 8007dec:	d1f3      	bne.n	8007dd6 <menu_inicial+0x42>
 8007dee:	4663      	mov	r3, ip
 8007df0:	4622      	mov	r2, r4
 8007df2:	6810      	ldr	r0, [r2, #0]
 8007df4:	6018      	str	r0, [r3, #0]
 8007df6:	8891      	ldrh	r1, [r2, #4]
 8007df8:	7992      	ldrb	r2, [r2, #6]
 8007dfa:	8099      	strh	r1, [r3, #4]
 8007dfc:	719a      	strb	r2, [r3, #6]
	BSP_LCD_SetFont(&Font20);
 8007dfe:	480d      	ldr	r0, [pc, #52]	; (8007e34 <menu_inicial+0xa0>)
 8007e00:	f7f9 fc2e 	bl	8001660 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t *)desc, CENTER_MODE);
 8007e04:	f7f9 fb8e 	bl	8001524 <BSP_LCD_GetYSize>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	331e      	adds	r3, #30
 8007e10:	b299      	uxth	r1, r3
 8007e12:	2301      	movs	r3, #1
 8007e14:	4a02      	ldr	r2, [pc, #8]	; (8007e20 <menu_inicial+0x8c>)
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7f9 fca8 	bl	800176c <BSP_LCD_DisplayStringAt>
}
 8007e1c:	bf00      	nop
 8007e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e20:	20000610 	.word	0x20000610
 8007e24:	0800ad38 	.word	0x0800ad38
 8007e28:	2000003c 	.word	0x2000003c
 8007e2c:	ffff0000 	.word	0xffff0000
 8007e30:	0800ad40 	.word	0x0800ad40
 8007e34:	20000044 	.word	0x20000044

08007e38 <fim_do_jogo>:

void fim_do_jogo(){
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
	int k = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
	int z = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]
	int jog_um = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
	int jog_dois = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	603b      	str	r3, [r7, #0]


	for(k = 0; k < 8; k++){
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e026      	b.n	8007ea2 <fim_do_jogo+0x6a>
		for(z = 0; z < 8; z++){
 8007e54:	2300      	movs	r3, #0
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	e01d      	b.n	8007e96 <fim_do_jogo+0x5e>
			if(tabuleiro[k][z] == PECA_JOGADOR_1){
 8007e5a:	4a4e      	ldr	r2, [pc, #312]	; (8007f94 <fim_do_jogo+0x15c>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	441a      	add	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4413      	add	r3, r2
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b58      	cmp	r3, #88	; 0x58
 8007e6c:	d103      	bne.n	8007e76 <fim_do_jogo+0x3e>
				jog_um++;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3301      	adds	r3, #1
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	e00c      	b.n	8007e90 <fim_do_jogo+0x58>
			}
			else if(tabuleiro[k][z] == PECA_JOGADOR_2){
 8007e76:	4a47      	ldr	r2, [pc, #284]	; (8007f94 <fim_do_jogo+0x15c>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b59      	cmp	r3, #89	; 0x59
 8007e88:	d102      	bne.n	8007e90 <fim_do_jogo+0x58>
				jog_dois++;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	603b      	str	r3, [r7, #0]
		for(z = 0; z < 8; z++){
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b07      	cmp	r3, #7
 8007e9a:	ddde      	ble.n	8007e5a <fim_do_jogo+0x22>
	for(k = 0; k < 8; k++){
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b07      	cmp	r3, #7
 8007ea6:	ddd5      	ble.n	8007e54 <fim_do_jogo+0x1c>
			}
		}
	}

	if(jog_um == jog_dois){
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d106      	bne.n	8007ebe <fim_do_jogo+0x86>
		sprintf(desc, "Empate! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	4938      	ldr	r1, [pc, #224]	; (8007f98 <fim_do_jogo+0x160>)
 8007eb6:	4839      	ldr	r0, [pc, #228]	; (8007f9c <fim_do_jogo+0x164>)
 8007eb8:	f002 fb2c 	bl	800a514 <siprintf>
 8007ebc:	e014      	b.n	8007ee8 <fim_do_jogo+0xb0>
	}
	else if(jog_um > jog_dois){
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	dd06      	ble.n	8007ed4 <fim_do_jogo+0x9c>
		sprintf(desc, "Ganhou o Jogador 1! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4935      	ldr	r1, [pc, #212]	; (8007fa0 <fim_do_jogo+0x168>)
 8007ecc:	4833      	ldr	r0, [pc, #204]	; (8007f9c <fim_do_jogo+0x164>)
 8007ece:	f002 fb21 	bl	800a514 <siprintf>
 8007ed2:	e009      	b.n	8007ee8 <fim_do_jogo+0xb0>
	}
	else if(jog_um < jog_dois){
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	da05      	bge.n	8007ee8 <fim_do_jogo+0xb0>
		sprintf(desc, "Ganhou o Jogador 2! Jogador 1: %d; Jogador 2: %d", jog_um, jog_dois);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4930      	ldr	r1, [pc, #192]	; (8007fa4 <fim_do_jogo+0x16c>)
 8007ee2:	482e      	ldr	r0, [pc, #184]	; (8007f9c <fim_do_jogo+0x164>)
 8007ee4:	f002 fb16 	bl	800a514 <siprintf>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	f7f9 fb86 	bl	80015fc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 8007ef0:	f7f9 fb0c 	bl	800150c <BSP_LCD_GetXSize>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	b29c      	uxth	r4, r3
 8007ef8:	f7f9 fb14 	bl	8001524 <BSP_LCD_GetYSize>
 8007efc:	4603      	mov	r3, r0
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b32      	subs	r3, #50	; 0x32
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4622      	mov	r2, r4
 8007f06:	2132      	movs	r1, #50	; 0x32
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f7f9 fe63 	bl	8001bd4 <BSP_LCD_FillRect>
	BSP_LCD_SetFont(&Font20);
 8007f0e:	4826      	ldr	r0, [pc, #152]	; (8007fa8 <fim_do_jogo+0x170>)
 8007f10:	f7f9 fba6 	bl	8001660 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007f14:	4825      	ldr	r0, [pc, #148]	; (8007fac <fim_do_jogo+0x174>)
 8007f16:	f7f9 fb71 	bl	80015fc <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 30, (uint8_t *)desc, CENTER_MODE);
 8007f1a:	f7f9 fb03 	bl	8001524 <BSP_LCD_GetYSize>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	085b      	lsrs	r3, r3, #1
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b1e      	subs	r3, #30
 8007f26:	b299      	uxth	r1, r3
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4a1c      	ldr	r2, [pc, #112]	; (8007f9c <fim_do_jogo+0x164>)
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7f9 fc1d 	bl	800176c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007f32:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007f36:	f7f9 fb61 	bl	80015fc <BSP_LCD_SetTextColor>
	sprintf(desc, "Prima o botao azul para recomecar o jogo");
 8007f3a:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <fim_do_jogo+0x164>)
 8007f3c:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <fim_do_jogo+0x178>)
 8007f3e:	4614      	mov	r4, r2
 8007f40:	469c      	mov	ip, r3
 8007f42:	f104 0e20 	add.w	lr, r4, #32
 8007f46:	4665      	mov	r5, ip
 8007f48:	4626      	mov	r6, r4
 8007f4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007f4c:	6028      	str	r0, [r5, #0]
 8007f4e:	6069      	str	r1, [r5, #4]
 8007f50:	60aa      	str	r2, [r5, #8]
 8007f52:	60eb      	str	r3, [r5, #12]
 8007f54:	3410      	adds	r4, #16
 8007f56:	f10c 0c10 	add.w	ip, ip, #16
 8007f5a:	4574      	cmp	r4, lr
 8007f5c:	d1f3      	bne.n	8007f46 <fim_do_jogo+0x10e>
 8007f5e:	4662      	mov	r2, ip
 8007f60:	4623      	mov	r3, r4
 8007f62:	cb03      	ldmia	r3!, {r0, r1}
 8007f64:	6010      	str	r0, [r2, #0]
 8007f66:	6051      	str	r1, [r2, #4]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	7213      	strb	r3, [r2, #8]
	BSP_LCD_SetFont(&Font16);
 8007f6c:	4811      	ldr	r0, [pc, #68]	; (8007fb4 <fim_do_jogo+0x17c>)
 8007f6e:	f7f9 fb77 	bl	8001660 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 10, (uint8_t *)desc, CENTER_MODE);
 8007f72:	f7f9 fad7 	bl	8001524 <BSP_LCD_GetYSize>
 8007f76:	4603      	mov	r3, r0
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b0a      	subs	r3, #10
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	2301      	movs	r3, #1
 8007f82:	4a06      	ldr	r2, [pc, #24]	; (8007f9c <fim_do_jogo+0x164>)
 8007f84:	2000      	movs	r0, #0
 8007f86:	f7f9 fbf1 	bl	800176c <BSP_LCD_DisplayStringAt>
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2000058c 	.word	0x2000058c
 8007f98:	0800ad68 	.word	0x0800ad68
 8007f9c:	20000610 	.word	0x20000610
 8007fa0:	0800ad90 	.word	0x0800ad90
 8007fa4:	0800adc4 	.word	0x0800adc4
 8007fa8:	20000044 	.word	0x20000044
 8007fac:	ff0000ff 	.word	0xff0000ff
 8007fb0:	0800adf8 	.word	0x0800adf8
 8007fb4:	2000004c 	.word	0x2000004c

08007fb8 <imprime_tabuleiro>:

void imprime_tabuleiro(){
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	ed2d 8b02 	vpush	{d8}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0

	  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8007fc2:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8007fc6:	f7f9 fb19 	bl	80015fc <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10, 400, 400);
 8007fca:	f7f9 fa9f 	bl	800150c <BSP_LCD_GetXSize>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b45      	ldr	r3, [pc, #276]	; (80080e8 <imprime_tabuleiro+0x130>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	08db      	lsrs	r3, r3, #3
 8007fd8:	b29c      	uxth	r4, r3
 8007fda:	f7f9 faa3 	bl	8001524 <BSP_LCD_GetYSize>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <imprime_tabuleiro+0x130>)
 8007fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fe6:	08db      	lsrs	r3, r3, #3
 8007fe8:	b299      	uxth	r1, r3
 8007fea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007fee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7f9 fdee 	bl	8001bd4 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8007ff8:	483c      	ldr	r0, [pc, #240]	; (80080ec <imprime_tabuleiro+0x134>)
 8007ffa:	f7f9 faff 	bl	80015fc <BSP_LCD_SetTextColor>
	  int i=0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
	  for(i = 0; i<=8; i++){
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	e024      	b.n	8008052 <imprime_tabuleiro+0x9a>
		  BSP_LCD_DrawVLine(BSP_LCD_GetXSize()/10 + (BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 8008008:	f7f9 fa80 	bl	800150c <BSP_LCD_GetXSize>
 800800c:	4602      	mov	r2, r0
 800800e:	4b36      	ldr	r3, [pc, #216]	; (80080e8 <imprime_tabuleiro+0x130>)
 8008010:	fba3 2302 	umull	r2, r3, r3, r2
 8008014:	08db      	lsrs	r3, r3, #3
 8008016:	b29c      	uxth	r4, r3
 8008018:	f7f9 fa78 	bl	800150c <BSP_LCD_GetXSize>
 800801c:	4603      	mov	r3, r0
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	b29b      	uxth	r3, r3
 8008026:	fb12 f303 	smulbb	r3, r2, r3
 800802a:	b29b      	uxth	r3, r3
 800802c:	4423      	add	r3, r4
 800802e:	b29c      	uxth	r4, r3
 8008030:	f7f9 fa78 	bl	8001524 <BSP_LCD_GetYSize>
 8008034:	4602      	mov	r2, r0
 8008036:	4b2c      	ldr	r3, [pc, #176]	; (80080e8 <imprime_tabuleiro+0x130>)
 8008038:	fba3 2302 	umull	r2, r3, r3, r2
 800803c:	08db      	lsrs	r3, r3, #3
 800803e:	b29b      	uxth	r3, r3
 8008040:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008044:	4619      	mov	r1, r3
 8008046:	4620      	mov	r0, r4
 8008048:	f7f9 fc92 	bl	8001970 <BSP_LCD_DrawVLine>
	  for(i = 0; i<=8; i++){
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3301      	adds	r3, #1
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b08      	cmp	r3, #8
 8008056:	ddd7      	ble.n	8008008 <imprime_tabuleiro+0x50>
	  }
	  int j;
	  for(j = 0; j<=8; j++){
 8008058:	2300      	movs	r3, #0
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	e033      	b.n	80080c6 <imprime_tabuleiro+0x10e>
		  BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10 + (BSP_LCD_GetYSize()/9.6)*j, 400);
 800805e:	f7f9 fa55 	bl	800150c <BSP_LCD_GetXSize>
 8008062:	4602      	mov	r2, r0
 8008064:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <imprime_tabuleiro+0x130>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	08db      	lsrs	r3, r3, #3
 800806c:	b29c      	uxth	r4, r3
 800806e:	f7f9 fa59 	bl	8001524 <BSP_LCD_GetYSize>
 8008072:	4602      	mov	r2, r0
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <imprime_tabuleiro+0x130>)
 8008076:	fba3 2302 	umull	r2, r3, r3, r2
 800807a:	08db      	lsrs	r3, r3, #3
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8008084:	f7f9 fa4e 	bl	8001524 <BSP_LCD_GetYSize>
 8008088:	ee07 0a90 	vmov	s15, r0
 800808c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008090:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80080e0 <imprime_tabuleiro+0x128>
 8008094:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80080a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80080aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80080ae:	ee17 3a90 	vmov	r3, s15
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80080b8:	4619      	mov	r1, r3
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7f9 fc1a 	bl	80018f4 <BSP_LCD_DrawHLine>
	  for(j = 0; j<=8; j++){
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	ddc8      	ble.n	800805e <imprime_tabuleiro+0xa6>
	  }
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80080cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80080d0:	f7f9 fa94 	bl	80015fc <BSP_LCD_SetTextColor>

}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	ecbd 8b02 	vpop	{d8}
 80080de:	bd90      	pop	{r4, r7, pc}
 80080e0:	33333333 	.word	0x33333333
 80080e4:	40233333 	.word	0x40233333
 80080e8:	cccccccd 	.word	0xcccccccd
 80080ec:	ffffa500 	.word	0xffffa500

080080f0 <mostra_temperatura>:

void mostra_temperatura(){
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
	  //Mostrar a temperatura
	  sprintf(desc, "Temperatura: %ld C", JTemp);
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <mostra_temperatura+0x34>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	490b      	ldr	r1, [pc, #44]	; (8008128 <mostra_temperatura+0x38>)
 80080fc:	480b      	ldr	r0, [pc, #44]	; (800812c <mostra_temperatura+0x3c>)
 80080fe:	f002 fa09 	bl	800a514 <siprintf>
	  BSP_LCD_SetFont(&Font12);
 8008102:	480b      	ldr	r0, [pc, #44]	; (8008130 <mostra_temperatura+0x40>)
 8008104:	f7f9 faac 	bl	8001660 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 90, (uint8_t *)desc, RIGHT_MODE);
 8008108:	f7f9 fa0c 	bl	8001524 <BSP_LCD_GetYSize>
 800810c:	4603      	mov	r3, r0
 800810e:	085b      	lsrs	r3, r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b5a      	subs	r3, #90	; 0x5a
 8008114:	b299      	uxth	r1, r3
 8008116:	2302      	movs	r3, #2
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <mostra_temperatura+0x3c>)
 800811a:	2000      	movs	r0, #0
 800811c:	f7f9 fb26 	bl	800176c <BSP_LCD_DisplayStringAt>
}
 8008120:	bf00      	nop
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200005cc 	.word	0x200005cc
 8008128:	0800ae24 	.word	0x0800ae24
 800812c:	20000610 	.word	0x20000610
 8008130:	20000054 	.word	0x20000054

08008134 <mostra_tempo>:

void mostra_tempo(){
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	//Mostrar o tempo
	sprintf(desc, "Tempo: %d segundos", count);
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <mostra_tempo+0x34>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	490b      	ldr	r1, [pc, #44]	; (800816c <mostra_tempo+0x38>)
 8008140:	480b      	ldr	r0, [pc, #44]	; (8008170 <mostra_tempo+0x3c>)
 8008142:	f002 f9e7 	bl	800a514 <siprintf>
	BSP_LCD_SetFont(&Font12);
 8008146:	480b      	ldr	r0, [pc, #44]	; (8008174 <mostra_tempo+0x40>)
 8008148:	f7f9 fa8a 	bl	8001660 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 70, (uint8_t *)desc, RIGHT_MODE);
 800814c:	f7f9 f9ea 	bl	8001524 <BSP_LCD_GetYSize>
 8008150:	4603      	mov	r3, r0
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b46      	subs	r3, #70	; 0x46
 8008158:	b299      	uxth	r1, r3
 800815a:	2302      	movs	r3, #2
 800815c:	4a04      	ldr	r2, [pc, #16]	; (8008170 <mostra_tempo+0x3c>)
 800815e:	2000      	movs	r0, #0
 8008160:	f7f9 fb04 	bl	800176c <BSP_LCD_DisplayStringAt>
}
 8008164:	bf00      	nop
 8008166:	bd80      	pop	{r7, pc}
 8008168:	2000030c 	.word	0x2000030c
 800816c:	0800ae38 	.word	0x0800ae38
 8008170:	20000610 	.word	0x20000610
 8008174:	20000054 	.word	0x20000054

08008178 <mostra_quem_joga>:

void mostra_quem_joga(){
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
	//Mostrar o jogador
    if (ver_quem_joga%2 == 1){
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <mostra_quem_joga+0x94>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	bfb8      	it	lt
 8008188:	425b      	neglt	r3, r3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d11d      	bne.n	80081ca <mostra_quem_joga+0x52>
    	sprintf(desc, "Jogador 1");
 800818e:	4a20      	ldr	r2, [pc, #128]	; (8008210 <mostra_quem_joga+0x98>)
 8008190:	4b20      	ldr	r3, [pc, #128]	; (8008214 <mostra_quem_joga+0x9c>)
 8008192:	cb03      	ldmia	r3!, {r0, r1}
 8008194:	6010      	str	r0, [r2, #0]
 8008196:	6051      	str	r1, [r2, #4]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	8113      	strh	r3, [r2, #8]
    	BSP_LCD_SetFont(&Font16);
 800819c:	481e      	ldr	r0, [pc, #120]	; (8008218 <mostra_quem_joga+0xa0>)
 800819e:	f7f9 fa5f 	bl	8001660 <BSP_LCD_SetFont>
    	BSP_LCD_SetTextColor(COR_JOGADOR_1);
 80081a2:	481e      	ldr	r0, [pc, #120]	; (800821c <mostra_quem_joga+0xa4>)
 80081a4:	f7f9 fa2a 	bl	80015fc <BSP_LCD_SetTextColor>
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
 80081a8:	f7f9 f9bc 	bl	8001524 <BSP_LCD_GetYSize>
 80081ac:	4603      	mov	r3, r0
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b32      	subs	r3, #50	; 0x32
 80081b4:	b299      	uxth	r1, r3
 80081b6:	2302      	movs	r3, #2
 80081b8:	4a15      	ldr	r2, [pc, #84]	; (8008210 <mostra_quem_joga+0x98>)
 80081ba:	2000      	movs	r0, #0
 80081bc:	f7f9 fad6 	bl	800176c <BSP_LCD_DisplayStringAt>
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80081c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80081c4:	f7f9 fa1a 	bl	80015fc <BSP_LCD_SetTextColor>
    	BSP_LCD_SetFont(&Font16);
    	BSP_LCD_SetTextColor(COR_JOGADOR_2);
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    }
}
 80081c8:	e01d      	b.n	8008206 <mostra_quem_joga+0x8e>
    	sprintf(desc, "Jogador 2");
 80081ca:	4a11      	ldr	r2, [pc, #68]	; (8008210 <mostra_quem_joga+0x98>)
 80081cc:	4b14      	ldr	r3, [pc, #80]	; (8008220 <mostra_quem_joga+0xa8>)
 80081ce:	cb03      	ldmia	r3!, {r0, r1}
 80081d0:	6010      	str	r0, [r2, #0]
 80081d2:	6051      	str	r1, [r2, #4]
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	8113      	strh	r3, [r2, #8]
    	BSP_LCD_SetFont(&Font16);
 80081d8:	480f      	ldr	r0, [pc, #60]	; (8008218 <mostra_quem_joga+0xa0>)
 80081da:	f7f9 fa41 	bl	8001660 <BSP_LCD_SetFont>
    	BSP_LCD_SetTextColor(COR_JOGADOR_2);
 80081de:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80081e2:	f7f9 fa0b 	bl	80015fc <BSP_LCD_SetTextColor>
    	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 50, (uint8_t *)desc, RIGHT_MODE);
 80081e6:	f7f9 f99d 	bl	8001524 <BSP_LCD_GetYSize>
 80081ea:	4603      	mov	r3, r0
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b32      	subs	r3, #50	; 0x32
 80081f2:	b299      	uxth	r1, r3
 80081f4:	2302      	movs	r3, #2
 80081f6:	4a06      	ldr	r2, [pc, #24]	; (8008210 <mostra_quem_joga+0x98>)
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7f9 fab7 	bl	800176c <BSP_LCD_DisplayStringAt>
    	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80081fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008202:	f7f9 f9fb 	bl	80015fc <BSP_LCD_SetTextColor>
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000070 	.word	0x20000070
 8008210:	20000610 	.word	0x20000610
 8008214:	0800ae4c 	.word	0x0800ae4c
 8008218:	2000004c 	.word	0x2000004c
 800821c:	ffff0000 	.word	0xffff0000
 8008220:	0800ae58 	.word	0x0800ae58

08008224 <imprime_pecas_iniciais>:

void imprime_pecas_iniciais(){
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0

	BSP_LCD_SetTextColor(COR_JOGADOR_1);
 8008228:	4819      	ldr	r0, [pc, #100]	; (8008290 <imprime_pecas_iniciais+0x6c>)
 800822a:	f7f9 f9e7 	bl	80015fc <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(50*3 + 105, 50*3 + 75, 15);
 800822e:	220f      	movs	r2, #15
 8008230:	21e1      	movs	r1, #225	; 0xe1
 8008232:	20ff      	movs	r0, #255	; 0xff
 8008234:	f7f9 fd28 	bl	8001c88 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(50*4 + 105, 50*4 + 75, 15);
 8008238:	220f      	movs	r2, #15
 800823a:	f240 1113 	movw	r1, #275	; 0x113
 800823e:	f240 1031 	movw	r0, #305	; 0x131
 8008242:	f7f9 fd21 	bl	8001c88 <BSP_LCD_FillCircle>
	tabuleiro[3][3] = PECA_JOGADOR_1;
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <imprime_pecas_iniciais+0x70>)
 8008248:	2258      	movs	r2, #88	; 0x58
 800824a:	76da      	strb	r2, [r3, #27]
	tabuleiro[4][4] = PECA_JOGADOR_1;
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <imprime_pecas_iniciais+0x70>)
 800824e:	2258      	movs	r2, #88	; 0x58
 8008250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	BSP_LCD_SetTextColor(COR_JOGADOR_2);
 8008254:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008258:	f7f9 f9d0 	bl	80015fc <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(50*3 + 105, 50*4 + 75, 15);
 800825c:	220f      	movs	r2, #15
 800825e:	f240 1113 	movw	r1, #275	; 0x113
 8008262:	20ff      	movs	r0, #255	; 0xff
 8008264:	f7f9 fd10 	bl	8001c88 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(50*4 + 105, 50*3 + 75, 15);
 8008268:	220f      	movs	r2, #15
 800826a:	21e1      	movs	r1, #225	; 0xe1
 800826c:	f240 1031 	movw	r0, #305	; 0x131
 8008270:	f7f9 fd0a 	bl	8001c88 <BSP_LCD_FillCircle>
	tabuleiro[3][4] = PECA_JOGADOR_2;
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <imprime_pecas_iniciais+0x70>)
 8008276:	2259      	movs	r2, #89	; 0x59
 8008278:	771a      	strb	r2, [r3, #28]
	tabuleiro[4][3] = PECA_JOGADOR_2;
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <imprime_pecas_iniciais+0x70>)
 800827c:	2259      	movs	r2, #89	; 0x59
 800827e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008282:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008286:	f7f9 f9b9 	bl	80015fc <BSP_LCD_SetTextColor>

}
 800828a:	bf00      	nop
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	ffff0000 	.word	0xffff0000
 8008294:	2000058c 	.word	0x2000058c

08008298 <imprime_jogada>:

void imprime_jogada(float x, float y, int i, int j){
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	ed87 0a03 	vstr	s0, [r7, #12]
 80082a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
    if (ver_quem_joga%2 == 1){
 80082aa:	4b24      	ldr	r3, [pc, #144]	; (800833c <imprime_jogada+0xa4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	bfb8      	it	lt
 80082b6:	425b      	neglt	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d11d      	bne.n	80082f8 <imprime_jogada+0x60>
    	tabuleiro[i][j] = PECA_JOGADOR_1;
 80082bc:	4a20      	ldr	r2, [pc, #128]	; (8008340 <imprime_jogada+0xa8>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	441a      	add	r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	4413      	add	r3, r2
 80082c8:	2258      	movs	r2, #88	; 0x58
 80082ca:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(COR_JOGADOR_1);
 80082cc:	481d      	ldr	r0, [pc, #116]	; (8008344 <imprime_jogada+0xac>)
 80082ce:	f7f9 f995 	bl	80015fc <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 15);
 80082d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80082d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082da:	ee17 3a90 	vmov	r3, s15
 80082de:	b29b      	uxth	r3, r3
 80082e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80082e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e8:	ee17 2a90 	vmov	r2, s15
 80082ec:	b291      	uxth	r1, r2
 80082ee:	220f      	movs	r2, #15
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7f9 fcc9 	bl	8001c88 <BSP_LCD_FillCircle>
    else{
    	tabuleiro[i][j] = PECA_JOGADOR_2;
		BSP_LCD_SetTextColor(COR_JOGADOR_2);
		BSP_LCD_FillCircle(x, y, 15);
    }
}
 80082f6:	e01d      	b.n	8008334 <imprime_jogada+0x9c>
    	tabuleiro[i][j] = PECA_JOGADOR_2;
 80082f8:	4a11      	ldr	r2, [pc, #68]	; (8008340 <imprime_jogada+0xa8>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	441a      	add	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	4413      	add	r3, r2
 8008304:	2259      	movs	r2, #89	; 0x59
 8008306:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(COR_JOGADOR_2);
 8008308:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800830c:	f7f9 f976 	bl	80015fc <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 15);
 8008310:	edd7 7a03 	vldr	s15, [r7, #12]
 8008314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008318:	ee17 3a90 	vmov	r3, s15
 800831c:	b29b      	uxth	r3, r3
 800831e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008326:	ee17 2a90 	vmov	r2, s15
 800832a:	b291      	uxth	r1, r2
 800832c:	220f      	movs	r2, #15
 800832e:	4618      	mov	r0, r3
 8008330:	f7f9 fcaa 	bl	8001c88 <BSP_LCD_FillCircle>
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000070 	.word	0x20000070
 8008340:	2000058c 	.word	0x2000058c
 8008344:	ffff0000 	.word	0xffff0000

08008348 <actualiza_pecas_tabuleiro>:

void actualiza_pecas_tabuleiro(){
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	int k = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
	int z = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	603b      	str	r3, [r7, #0]


	for(k = 0; k < 8; k++){
 8008356:	2300      	movs	r3, #0
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e0c5      	b.n	80084e8 <actualiza_pecas_tabuleiro+0x1a0>
		for(z = 0; z < 8; z++){
 800835c:	2300      	movs	r3, #0
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	e0bb      	b.n	80084da <actualiza_pecas_tabuleiro+0x192>
			if(tabuleiro[k][z] == PECA_JOGADOR_1){
 8008362:	4a67      	ldr	r2, [pc, #412]	; (8008500 <actualiza_pecas_tabuleiro+0x1b8>)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	441a      	add	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4413      	add	r3, r2
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b58      	cmp	r3, #88	; 0x58
 8008374:	d123      	bne.n	80083be <actualiza_pecas_tabuleiro+0x76>
				BSP_LCD_SetTextColor(COR_JOGADOR_1);
 8008376:	4863      	ldr	r0, [pc, #396]	; (8008504 <actualiza_pecas_tabuleiro+0x1bc>)
 8008378:	f7f9 f940 	bl	80015fc <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	4413      	add	r3, r2
 8008386:	461a      	mov	r2, r3
 8008388:	0091      	lsls	r1, r2, #2
 800838a:	461a      	mov	r2, r3
 800838c:	460b      	mov	r3, r1
 800838e:	4413      	add	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	3369      	adds	r3, #105	; 0x69
 8008396:	b298      	uxth	r0, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	0092      	lsls	r2, r2, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	461a      	mov	r2, r3
 80083a4:	0091      	lsls	r1, r2, #2
 80083a6:	461a      	mov	r2, r3
 80083a8:	460b      	mov	r3, r1
 80083aa:	4413      	add	r3, r2
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	334b      	adds	r3, #75	; 0x4b
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	220f      	movs	r2, #15
 80083b6:	4619      	mov	r1, r3
 80083b8:	f7f9 fc66 	bl	8001c88 <BSP_LCD_FillCircle>
 80083bc:	e08a      	b.n	80084d4 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==PECA_JOGADOR_2){
 80083be:	4a50      	ldr	r2, [pc, #320]	; (8008500 <actualiza_pecas_tabuleiro+0x1b8>)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	441a      	add	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	4413      	add	r3, r2
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b59      	cmp	r3, #89	; 0x59
 80083d0:	d124      	bne.n	800841c <actualiza_pecas_tabuleiro+0xd4>
				BSP_LCD_SetTextColor(COR_JOGADOR_2);
 80083d2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80083d6:	f7f9 f911 	bl	80015fc <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	0092      	lsls	r2, r2, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	461a      	mov	r2, r3
 80083e6:	0091      	lsls	r1, r2, #2
 80083e8:	461a      	mov	r2, r3
 80083ea:	460b      	mov	r3, r1
 80083ec:	4413      	add	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3369      	adds	r3, #105	; 0x69
 80083f4:	b298      	uxth	r0, r3
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	4413      	add	r3, r2
 8008400:	461a      	mov	r2, r3
 8008402:	0091      	lsls	r1, r2, #2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	4413      	add	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	334b      	adds	r3, #75	; 0x4b
 8008410:	b29b      	uxth	r3, r3
 8008412:	220f      	movs	r2, #15
 8008414:	4619      	mov	r1, r3
 8008416:	f7f9 fc37 	bl	8001c88 <BSP_LCD_FillCircle>
 800841a:	e05b      	b.n	80084d4 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==SEM_PECA){
 800841c:	4a38      	ldr	r2, [pc, #224]	; (8008500 <actualiza_pecas_tabuleiro+0x1b8>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	441a      	add	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	4413      	add	r3, r2
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b4e      	cmp	r3, #78	; 0x4e
 800842e:	d124      	bne.n	800847a <actualiza_pecas_tabuleiro+0x132>
				BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8008430:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8008434:	f7f9 f8e2 	bl	80015fc <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 15);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	b29b      	uxth	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	0092      	lsls	r2, r2, #2
 8008440:	4413      	add	r3, r2
 8008442:	461a      	mov	r2, r3
 8008444:	0091      	lsls	r1, r2, #2
 8008446:	461a      	mov	r2, r3
 8008448:	460b      	mov	r3, r1
 800844a:	4413      	add	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	b29b      	uxth	r3, r3
 8008450:	3369      	adds	r3, #105	; 0x69
 8008452:	b298      	uxth	r0, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	4413      	add	r3, r2
 800845e:	461a      	mov	r2, r3
 8008460:	0091      	lsls	r1, r2, #2
 8008462:	461a      	mov	r2, r3
 8008464:	460b      	mov	r3, r1
 8008466:	4413      	add	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	b29b      	uxth	r3, r3
 800846c:	334b      	adds	r3, #75	; 0x4b
 800846e:	b29b      	uxth	r3, r3
 8008470:	220f      	movs	r2, #15
 8008472:	4619      	mov	r1, r3
 8008474:	f7f9 fc08 	bl	8001c88 <BSP_LCD_FillCircle>
 8008478:	e02c      	b.n	80084d4 <actualiza_pecas_tabuleiro+0x18c>
			}
			else if(tabuleiro[k][z]==JOGADA_POSSIVEL){
 800847a:	4a21      	ldr	r2, [pc, #132]	; (8008500 <actualiza_pecas_tabuleiro+0x1b8>)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	441a      	add	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	4413      	add	r3, r2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b50      	cmp	r3, #80	; 0x50
 800848c:	d122      	bne.n	80084d4 <actualiza_pecas_tabuleiro+0x18c>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800848e:	481e      	ldr	r0, [pc, #120]	; (8008508 <actualiza_pecas_tabuleiro+0x1c0>)
 8008490:	f7f9 f8b4 	bl	80015fc <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(50*k + 105, 50*z + 75, 5);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	4413      	add	r3, r2
 800849e:	461a      	mov	r2, r3
 80084a0:	0091      	lsls	r1, r2, #2
 80084a2:	461a      	mov	r2, r3
 80084a4:	460b      	mov	r3, r1
 80084a6:	4413      	add	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3369      	adds	r3, #105	; 0x69
 80084ae:	b298      	uxth	r0, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	0092      	lsls	r2, r2, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	461a      	mov	r2, r3
 80084bc:	0091      	lsls	r1, r2, #2
 80084be:	461a      	mov	r2, r3
 80084c0:	460b      	mov	r3, r1
 80084c2:	4413      	add	r3, r2
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	334b      	adds	r3, #75	; 0x4b
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2205      	movs	r2, #5
 80084ce:	4619      	mov	r1, r3
 80084d0:	f7f9 fbda 	bl	8001c88 <BSP_LCD_FillCircle>
		for(z = 0; z < 8; z++){
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	3301      	adds	r3, #1
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b07      	cmp	r3, #7
 80084de:	f77f af40 	ble.w	8008362 <actualiza_pecas_tabuleiro+0x1a>
	for(k = 0; k < 8; k++){
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3301      	adds	r3, #1
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	f77f af36 	ble.w	800835c <actualiza_pecas_tabuleiro+0x14>
			}
		}
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80084f0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80084f4:	f7f9 f882 	bl	80015fc <BSP_LCD_SetTextColor>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	2000058c 	.word	0x2000058c
 8008504:	ffff0000 	.word	0xffff0000
 8008508:	ff0000ff 	.word	0xff0000ff

0800850c <limpa_possibilidades>:

void limpa_possibilidades(){
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
	int k = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	607b      	str	r3, [r7, #4]
	int z = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	603b      	str	r3, [r7, #0]


	for(k = 0; k < 8; k++){
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e01d      	b.n	800855c <limpa_possibilidades+0x50>
		for(z = 0; z < 8; z++){
 8008520:	2300      	movs	r3, #0
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	e014      	b.n	8008550 <limpa_possibilidades+0x44>
			if(tabuleiro[k][z] == JOGADA_POSSIVEL){
 8008526:	4a12      	ldr	r2, [pc, #72]	; (8008570 <limpa_possibilidades+0x64>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	441a      	add	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	4413      	add	r3, r2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b50      	cmp	r3, #80	; 0x50
 8008538:	d107      	bne.n	800854a <limpa_possibilidades+0x3e>
				tabuleiro[k][z] = SEM_PECA;
 800853a:	4a0d      	ldr	r2, [pc, #52]	; (8008570 <limpa_possibilidades+0x64>)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	441a      	add	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	4413      	add	r3, r2
 8008546:	224e      	movs	r2, #78	; 0x4e
 8008548:	701a      	strb	r2, [r3, #0]
		for(z = 0; z < 8; z++){
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	3301      	adds	r3, #1
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b07      	cmp	r3, #7
 8008554:	dde7      	ble.n	8008526 <limpa_possibilidades+0x1a>
	for(k = 0; k < 8; k++){
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3301      	adds	r3, #1
 800855a:	607b      	str	r3, [r7, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b07      	cmp	r3, #7
 8008560:	ddde      	ble.n	8008520 <limpa_possibilidades+0x14>
			}
		}
	}
}
 8008562:	bf00      	nop
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	2000058c 	.word	0x2000058c

08008574 <validar_com_self>:

int validar_com_self(int linsel, int colsel){
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
    char self, adv;
    int i = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
    int j = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]

    if (ver_quem_joga%2 == 1){
 8008586:	4ba3      	ldr	r3, [pc, #652]	; (8008814 <validar_com_self+0x2a0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	bfb8      	it	lt
 8008592:	425b      	neglt	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d104      	bne.n	80085a2 <validar_com_self+0x2e>
    	self = PECA_JOGADOR_1;
 8008598:	2358      	movs	r3, #88	; 0x58
 800859a:	75fb      	strb	r3, [r7, #23]
    	adv = PECA_JOGADOR_2;
 800859c:	2359      	movs	r3, #89	; 0x59
 800859e:	75bb      	strb	r3, [r7, #22]
 80085a0:	e003      	b.n	80085aa <validar_com_self+0x36>
    }
    else{
    	self = PECA_JOGADOR_2;
 80085a2:	2359      	movs	r3, #89	; 0x59
 80085a4:	75fb      	strb	r3, [r7, #23]
    	adv = PECA_JOGADOR_1;
 80085a6:	2358      	movs	r3, #88	; 0x58
 80085a8:	75bb      	strb	r3, [r7, #22]
    }


    //ver relaçoes com as peças vizinhas
    //ESQUERDA
    if(tabuleiro[linsel][colsel-1] == adv){
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	499a      	ldr	r1, [pc, #616]	; (8008818 <validar_com_self+0x2a4>)
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	00d2      	lsls	r2, r2, #3
 80085b4:	440a      	add	r2, r1
 80085b6:	4413      	add	r3, r2
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	7dba      	ldrb	r2, [r7, #22]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d116      	bne.n	80085f0 <validar_com_self+0x7c>
        for(j = colsel-2; j >= 0 ;  j-- ){
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	3b02      	subs	r3, #2
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e00f      	b.n	80085ea <validar_com_self+0x76>
            if(tabuleiro[linsel][j] == self){
 80085ca:	4a93      	ldr	r2, [pc, #588]	; (8008818 <validar_com_self+0x2a4>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	7dfa      	ldrb	r2, [r7, #23]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d101      	bne.n	80085e4 <validar_com_self+0x70>
                return 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e155      	b.n	8008890 <validar_com_self+0x31c>
        for(j = colsel-2; j >= 0 ;  j-- ){
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	daec      	bge.n	80085ca <validar_com_self+0x56>
        }
    }


    //DIREITA
    if(tabuleiro[linsel][colsel+1] == adv){
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4988      	ldr	r1, [pc, #544]	; (8008818 <validar_com_self+0x2a4>)
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	00d2      	lsls	r2, r2, #3
 80085fa:	440a      	add	r2, r1
 80085fc:	4413      	add	r3, r2
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	7dba      	ldrb	r2, [r7, #22]
 8008604:	429a      	cmp	r2, r3
 8008606:	d116      	bne.n	8008636 <validar_com_self+0xc2>
        for(j = colsel + 2; j < 8 ;  j++ ){
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	3302      	adds	r3, #2
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e00f      	b.n	8008630 <validar_com_self+0xbc>
            if(tabuleiro[linsel][j] == self){
 8008610:	4a81      	ldr	r2, [pc, #516]	; (8008818 <validar_com_self+0x2a4>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	441a      	add	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	7dfa      	ldrb	r2, [r7, #23]
 8008622:	429a      	cmp	r2, r3
 8008624:	d101      	bne.n	800862a <validar_com_self+0xb6>
                return 1;
 8008626:	2301      	movs	r3, #1
 8008628:	e132      	b.n	8008890 <validar_com_self+0x31c>
        for(j = colsel + 2; j < 8 ;  j++ ){
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b07      	cmp	r3, #7
 8008634:	ddec      	ble.n	8008610 <validar_com_self+0x9c>
        }
    }


    //CIMA
    if(tabuleiro[linsel+1][colsel] == adv){
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3301      	adds	r3, #1
 800863a:	4a77      	ldr	r2, [pc, #476]	; (8008818 <validar_com_self+0x2a4>)
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	441a      	add	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	4413      	add	r3, r2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	7dba      	ldrb	r2, [r7, #22]
 800864a:	429a      	cmp	r2, r3
 800864c:	d116      	bne.n	800867c <validar_com_self+0x108>
        for(i = linsel + 2; i < 8 ;  i++ ){
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3302      	adds	r3, #2
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	e00f      	b.n	8008676 <validar_com_self+0x102>
            if(tabuleiro[i][colsel] == self){
 8008656:	4a70      	ldr	r2, [pc, #448]	; (8008818 <validar_com_self+0x2a4>)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	441a      	add	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	7dfa      	ldrb	r2, [r7, #23]
 8008668:	429a      	cmp	r2, r3
 800866a:	d101      	bne.n	8008670 <validar_com_self+0xfc>
                return 1;
 800866c:	2301      	movs	r3, #1
 800866e:	e10f      	b.n	8008890 <validar_com_self+0x31c>
        for(i = linsel + 2; i < 8 ;  i++ ){
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	3301      	adds	r3, #1
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b07      	cmp	r3, #7
 800867a:	ddec      	ble.n	8008656 <validar_com_self+0xe2>
        }
    }


    //BAIXO
    if(tabuleiro[linsel-1][colsel] == adv){
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3b01      	subs	r3, #1
 8008680:	4a65      	ldr	r2, [pc, #404]	; (8008818 <validar_com_self+0x2a4>)
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	441a      	add	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	4413      	add	r3, r2
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	7dba      	ldrb	r2, [r7, #22]
 8008690:	429a      	cmp	r2, r3
 8008692:	d116      	bne.n	80086c2 <validar_com_self+0x14e>
        for(i = linsel-2; i >= 0 ;  i-- ){
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3b02      	subs	r3, #2
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	e00f      	b.n	80086bc <validar_com_self+0x148>
            if(tabuleiro[i][colsel] == self){
 800869c:	4a5e      	ldr	r2, [pc, #376]	; (8008818 <validar_com_self+0x2a4>)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	441a      	add	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	4413      	add	r3, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	7dfa      	ldrb	r2, [r7, #23]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d101      	bne.n	80086b6 <validar_com_self+0x142>
                return 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e0ec      	b.n	8008890 <validar_com_self+0x31c>
        for(i = linsel-2; i >= 0 ;  i-- ){
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	daec      	bge.n	800869c <validar_com_self+0x128>
        }
    }


   //DIAGONAL SUPERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel+1] == adv){
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1e5a      	subs	r2, r3, #1
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	4953      	ldr	r1, [pc, #332]	; (8008818 <validar_com_self+0x2a4>)
 80086cc:	00d2      	lsls	r2, r2, #3
 80086ce:	440a      	add	r2, r1
 80086d0:	4413      	add	r3, r2
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	7dba      	ldrb	r2, [r7, #22]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d11f      	bne.n	800871c <validar_com_self+0x1a8>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3b02      	subs	r3, #2
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	3302      	adds	r3, #2
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e012      	b.n	8008710 <validar_com_self+0x19c>
           if(tabuleiro[i][j] == self){
 80086ea:	4a4b      	ldr	r2, [pc, #300]	; (8008818 <validar_com_self+0x2a4>)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	441a      	add	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	7dfa      	ldrb	r2, [r7, #23]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d101      	bne.n	8008704 <validar_com_self+0x190>
               return 1;
 8008700:	2301      	movs	r3, #1
 8008702:	e0c5      	b.n	8008890 <validar_com_self+0x31c>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	db02      	blt.n	800871c <validar_com_self+0x1a8>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b07      	cmp	r3, #7
 800871a:	dde6      	ble.n	80086ea <validar_com_self+0x176>
       }
   }


   // DIAGONAL INFERIOR DIREITA
     if(tabuleiro[linsel+1][colsel-1] == adv){ //verfica se há adversário junto à casa onde pretendemos jogar
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3b01      	subs	r3, #1
 8008724:	493c      	ldr	r1, [pc, #240]	; (8008818 <validar_com_self+0x2a4>)
 8008726:	00d2      	lsls	r2, r2, #3
 8008728:	440a      	add	r2, r1
 800872a:	4413      	add	r3, r2
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	7dba      	ldrb	r2, [r7, #22]
 8008732:	429a      	cmp	r2, r3
 8008734:	d11f      	bne.n	8008776 <validar_com_self+0x202>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3302      	adds	r3, #2
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	3b02      	subs	r3, #2
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	e012      	b.n	800876a <validar_com_self+0x1f6>
           if(tabuleiro[i][j] == self){ // ve se tem self
 8008744:	4a34      	ldr	r2, [pc, #208]	; (8008818 <validar_com_self+0x2a4>)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	7dfa      	ldrb	r2, [r7, #23]
 8008756:	429a      	cmp	r2, r3
 8008758:	d101      	bne.n	800875e <validar_com_self+0x1ea>
               return 1;
 800875a:	2301      	movs	r3, #1
 800875c:	e098      	b.n	8008890 <validar_com_self+0x31c>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3301      	adds	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3b01      	subs	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b07      	cmp	r3, #7
 800876e:	dc02      	bgt.n	8008776 <validar_com_self+0x202>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dae6      	bge.n	8008744 <validar_com_self+0x1d0>
   }



     // DIAGONAL INFERIOR ESQUERDA
     if(tabuleiro[linsel+1][colsel+1] == adv){ //verfica se ha adversario junto
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	4926      	ldr	r1, [pc, #152]	; (8008818 <validar_com_self+0x2a4>)
 8008780:	00d2      	lsls	r2, r2, #3
 8008782:	440a      	add	r2, r1
 8008784:	4413      	add	r3, r2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	7dba      	ldrb	r2, [r7, #22]
 800878c:	429a      	cmp	r2, r3
 800878e:	d11f      	bne.n	80087d0 <validar_com_self+0x25c>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3302      	adds	r3, #2
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	3302      	adds	r3, #2
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e012      	b.n	80087c4 <validar_com_self+0x250>
           if(tabuleiro[i][j] == self){ //verifica se ha self a seguir
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <validar_com_self+0x2a4>)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	441a      	add	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	7dfa      	ldrb	r2, [r7, #23]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d101      	bne.n	80087b8 <validar_com_self+0x244>
               return 1;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e06b      	b.n	8008890 <validar_com_self+0x31c>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	3301      	adds	r3, #1
 80087bc:	613b      	str	r3, [r7, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b07      	cmp	r3, #7
 80087c8:	dc02      	bgt.n	80087d0 <validar_com_self+0x25c>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b07      	cmp	r3, #7
 80087ce:	dde6      	ble.n	800879e <validar_com_self+0x22a>
       }
   }


     // DIAGONAL SUPERIOR DIREITA
     if(tabuleiro[linsel-1][colsel-1] == adv){ //ve se ha adversario
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	1e5a      	subs	r2, r3, #1
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	490f      	ldr	r1, [pc, #60]	; (8008818 <validar_com_self+0x2a4>)
 80087da:	00d2      	lsls	r2, r2, #3
 80087dc:	440a      	add	r2, r1
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	7dba      	ldrb	r2, [r7, #22]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d124      	bne.n	8008834 <validar_com_self+0x2c0>
       for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3b02      	subs	r3, #2
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	3b02      	subs	r3, #2
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	e017      	b.n	8008828 <validar_com_self+0x2b4>
           if(tabuleiro[i][j] == self){ //ve se ha self
 80087f8:	4a07      	ldr	r2, [pc, #28]	; (8008818 <validar_com_self+0x2a4>)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4413      	add	r3, r2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	7dfa      	ldrb	r2, [r7, #23]
 800880a:	429a      	cmp	r2, r3
 800880c:	d106      	bne.n	800881c <validar_com_self+0x2a8>
               return 1;
 800880e:	2301      	movs	r3, #1
 8008810:	e03e      	b.n	8008890 <validar_com_self+0x31c>
 8008812:	bf00      	nop
 8008814:	20000070 	.word	0x20000070
 8008818:	2000058c 	.word	0x2000058c
       for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	3b01      	subs	r3, #1
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b01      	subs	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	db02      	blt.n	8008834 <validar_com_self+0x2c0>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dae1      	bge.n	80087f8 <validar_com_self+0x284>
       }
   }


     // DIAGONAL SUPERIOR ESQUERDA
     if(tabuleiro[linsel-1][colsel+1] == adv){ //adversario ao lado
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1e5a      	subs	r2, r3, #1
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	4917      	ldr	r1, [pc, #92]	; (800889c <validar_com_self+0x328>)
 800883e:	00d2      	lsls	r2, r2, #3
 8008840:	440a      	add	r2, r1
 8008842:	4413      	add	r3, r2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	7dba      	ldrb	r2, [r7, #22]
 800884a:	429a      	cmp	r2, r3
 800884c:	d11f      	bne.n	800888e <validar_com_self+0x31a>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3b02      	subs	r3, #2
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	3302      	adds	r3, #2
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e012      	b.n	8008882 <validar_com_self+0x30e>
           if(tabuleiro[i][j] == self){ //self a seguir ao adversario
 800885c:	4a0f      	ldr	r2, [pc, #60]	; (800889c <validar_com_self+0x328>)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	441a      	add	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	7dfa      	ldrb	r2, [r7, #23]
 800886e:	429a      	cmp	r2, r3
 8008870:	d101      	bne.n	8008876 <validar_com_self+0x302>
               return 1;
 8008872:	2301      	movs	r3, #1
 8008874:	e00c      	b.n	8008890 <validar_com_self+0x31c>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	3b01      	subs	r3, #1
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	db02      	blt.n	800888e <validar_com_self+0x31a>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b07      	cmp	r3, #7
 800888c:	dde6      	ble.n	800885c <validar_com_self+0x2e8>
           }
       }
   }

     return 0;
 800888e:	2300      	movs	r3, #0

}
 8008890:	4618      	mov	r0, r3
 8008892:	371c      	adds	r7, #28
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	2000058c 	.word	0x2000058c

080088a0 <jogadas_possiveis>:

void jogadas_possiveis(){
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
    char adv;
    int i = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]
    int j = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	607b      	str	r3, [r7, #4]


    if (ver_quem_joga%2 == 1){
 80088ae:	4b95      	ldr	r3, [pc, #596]	; (8008b04 <jogadas_possiveis+0x264>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	bfb8      	it	lt
 80088ba:	425b      	neglt	r3, r3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d102      	bne.n	80088c6 <jogadas_possiveis+0x26>
        adv = PECA_JOGADOR_2;
 80088c0:	2359      	movs	r3, #89	; 0x59
 80088c2:	73fb      	strb	r3, [r7, #15]
 80088c4:	e001      	b.n	80088ca <jogadas_possiveis+0x2a>
    }
    else{
    	adv = PECA_JOGADOR_1;
 80088c6:	2358      	movs	r3, #88	; 0x58
 80088c8:	73fb      	strb	r3, [r7, #15]
    }




    	for(i = 0; i < 8; i++){
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
 80088ce:	e2b0      	b.n	8008e32 <jogadas_possiveis+0x592>
    		for(j = 0; j < 8; j++){
 80088d0:	2300      	movs	r3, #0
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	e2a6      	b.n	8008e24 <jogadas_possiveis+0x584>
    			if(i==0 && j==0){ //canto superior esquerdo
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d12c      	bne.n	8008936 <jogadas_possiveis+0x96>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d129      	bne.n	8008936 <jogadas_possiveis+0x96>
    				if((tabuleiro[0][1] == adv ||
 80088e2:	4b89      	ldr	r3, [pc, #548]	; (8008b08 <jogadas_possiveis+0x268>)
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	7bfa      	ldrb	r2, [r7, #15]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d00c      	beq.n	8008908 <jogadas_possiveis+0x68>
    					tabuleiro[1][1] == adv ||
 80088ee:	4b86      	ldr	r3, [pc, #536]	; (8008b08 <jogadas_possiveis+0x268>)
 80088f0:	7a5b      	ldrb	r3, [r3, #9]
 80088f2:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][1] == adv ||
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d006      	beq.n	8008908 <jogadas_possiveis+0x68>
						tabuleiro[1][0] == adv)
 80088fa:	4b83      	ldr	r3, [pc, #524]	; (8008b08 <jogadas_possiveis+0x268>)
 80088fc:	7a1b      	ldrb	r3, [r3, #8]
 80088fe:	b2db      	uxtb	r3, r3
    					tabuleiro[1][1] == adv ||
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	429a      	cmp	r2, r3
 8008904:	f040 827c 	bne.w	8008e00 <jogadas_possiveis+0x560>
    					&& tabuleiro[0][0]==SEM_PECA && validar_com_self(i, j)){
 8008908:	4b7f      	ldr	r3, [pc, #508]	; (8008b08 <jogadas_possiveis+0x268>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b4e      	cmp	r3, #78	; 0x4e
 8008910:	f040 8276 	bne.w	8008e00 <jogadas_possiveis+0x560>
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	68b8      	ldr	r0, [r7, #8]
 8008918:	f7ff fe2c 	bl	8008574 <validar_com_self>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 826e 	beq.w	8008e00 <jogadas_possiveis+0x560>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008924:	4a78      	ldr	r2, [pc, #480]	; (8008b08 <jogadas_possiveis+0x268>)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	441a      	add	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4413      	add	r3, r2
 8008930:	2250      	movs	r2, #80	; 0x50
 8008932:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][1] == adv ||
 8008934:	e264      	b.n	8008e00 <jogadas_possiveis+0x560>
    				}
    			}
    			else if(i==0 && j==7){ //canto superior direito
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d12c      	bne.n	8008996 <jogadas_possiveis+0xf6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b07      	cmp	r3, #7
 8008940:	d129      	bne.n	8008996 <jogadas_possiveis+0xf6>
    				if((tabuleiro[0][6] == adv ||
 8008942:	4b71      	ldr	r3, [pc, #452]	; (8008b08 <jogadas_possiveis+0x268>)
 8008944:	799b      	ldrb	r3, [r3, #6]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	7bfa      	ldrb	r2, [r7, #15]
 800894a:	429a      	cmp	r2, r3
 800894c:	d00c      	beq.n	8008968 <jogadas_possiveis+0xc8>
    					tabuleiro[1][6] == adv ||
 800894e:	4b6e      	ldr	r3, [pc, #440]	; (8008b08 <jogadas_possiveis+0x268>)
 8008950:	7b9b      	ldrb	r3, [r3, #14]
 8008952:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][6] == adv ||
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	429a      	cmp	r2, r3
 8008958:	d006      	beq.n	8008968 <jogadas_possiveis+0xc8>
						tabuleiro[1][7] == adv)
 800895a:	4b6b      	ldr	r3, [pc, #428]	; (8008b08 <jogadas_possiveis+0x268>)
 800895c:	7bdb      	ldrb	r3, [r3, #15]
 800895e:	b2db      	uxtb	r3, r3
    					tabuleiro[1][6] == adv ||
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	429a      	cmp	r2, r3
 8008964:	f040 824e 	bne.w	8008e04 <jogadas_possiveis+0x564>
    					&& tabuleiro[0][7]==SEM_PECA && validar_com_self(i, j)){
 8008968:	4b67      	ldr	r3, [pc, #412]	; (8008b08 <jogadas_possiveis+0x268>)
 800896a:	79db      	ldrb	r3, [r3, #7]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b4e      	cmp	r3, #78	; 0x4e
 8008970:	f040 8248 	bne.w	8008e04 <jogadas_possiveis+0x564>
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	68b8      	ldr	r0, [r7, #8]
 8008978:	f7ff fdfc 	bl	8008574 <validar_com_self>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8240 	beq.w	8008e04 <jogadas_possiveis+0x564>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008984:	4a60      	ldr	r2, [pc, #384]	; (8008b08 <jogadas_possiveis+0x268>)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	441a      	add	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4413      	add	r3, r2
 8008990:	2250      	movs	r2, #80	; 0x50
 8008992:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][6] == adv ||
 8008994:	e236      	b.n	8008e04 <jogadas_possiveis+0x564>
    				}
    			}
    			else if(i==7 && j==0){ //canto inferior esquerdo
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b07      	cmp	r3, #7
 800899a:	d130      	bne.n	80089fe <jogadas_possiveis+0x15e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d12d      	bne.n	80089fe <jogadas_possiveis+0x15e>
    				if((tabuleiro[6][0] == adv ||
 80089a2:	4b59      	ldr	r3, [pc, #356]	; (8008b08 <jogadas_possiveis+0x268>)
 80089a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	7bfa      	ldrb	r2, [r7, #15]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d00e      	beq.n	80089ce <jogadas_possiveis+0x12e>
    					tabuleiro[6][1] == adv ||
 80089b0:	4b55      	ldr	r3, [pc, #340]	; (8008b08 <jogadas_possiveis+0x268>)
 80089b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089b6:	b2db      	uxtb	r3, r3
    				if((tabuleiro[6][0] == adv ||
 80089b8:	7bfa      	ldrb	r2, [r7, #15]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d007      	beq.n	80089ce <jogadas_possiveis+0x12e>
						tabuleiro[7][1] == adv)
 80089be:	4b52      	ldr	r3, [pc, #328]	; (8008b08 <jogadas_possiveis+0x268>)
 80089c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089c4:	b2db      	uxtb	r3, r3
    					tabuleiro[6][1] == adv ||
 80089c6:	7bfa      	ldrb	r2, [r7, #15]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	f040 821d 	bne.w	8008e08 <jogadas_possiveis+0x568>
    					&& tabuleiro[7][0]==SEM_PECA && validar_com_self(i, j)){
 80089ce:	4b4e      	ldr	r3, [pc, #312]	; (8008b08 <jogadas_possiveis+0x268>)
 80089d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b4e      	cmp	r3, #78	; 0x4e
 80089d8:	f040 8216 	bne.w	8008e08 <jogadas_possiveis+0x568>
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	68b8      	ldr	r0, [r7, #8]
 80089e0:	f7ff fdc8 	bl	8008574 <validar_com_self>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 820e 	beq.w	8008e08 <jogadas_possiveis+0x568>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 80089ec:	4a46      	ldr	r2, [pc, #280]	; (8008b08 <jogadas_possiveis+0x268>)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	441a      	add	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	2250      	movs	r2, #80	; 0x50
 80089fa:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[6][0] == adv ||
 80089fc:	e204      	b.n	8008e08 <jogadas_possiveis+0x568>
    				}
    			}
    			else if(i==7 && j==7){ //canto inferior direito
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b07      	cmp	r3, #7
 8008a02:	d130      	bne.n	8008a66 <jogadas_possiveis+0x1c6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b07      	cmp	r3, #7
 8008a08:	d12d      	bne.n	8008a66 <jogadas_possiveis+0x1c6>
    				if((tabuleiro[6][7] == adv ||
 8008a0a:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a0c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	7bfa      	ldrb	r2, [r7, #15]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d00e      	beq.n	8008a36 <jogadas_possiveis+0x196>
    					tabuleiro[6][6] == adv ||
 8008a18:	4b3b      	ldr	r3, [pc, #236]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a1e:	b2db      	uxtb	r3, r3
    				if((tabuleiro[6][7] == adv ||
 8008a20:	7bfa      	ldrb	r2, [r7, #15]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d007      	beq.n	8008a36 <jogadas_possiveis+0x196>
						tabuleiro[7][6] == adv)
 8008a26:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a2c:	b2db      	uxtb	r3, r3
    					tabuleiro[6][6] == adv ||
 8008a2e:	7bfa      	ldrb	r2, [r7, #15]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	f040 81eb 	bne.w	8008e0c <jogadas_possiveis+0x56c>
    					&& tabuleiro[7][7]==SEM_PECA && validar_com_self(i, j)){
 8008a36:	4b34      	ldr	r3, [pc, #208]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b4e      	cmp	r3, #78	; 0x4e
 8008a40:	f040 81e4 	bne.w	8008e0c <jogadas_possiveis+0x56c>
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	68b8      	ldr	r0, [r7, #8]
 8008a48:	f7ff fd94 	bl	8008574 <validar_com_self>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 81dc 	beq.w	8008e0c <jogadas_possiveis+0x56c>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008a54:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	441a      	add	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4413      	add	r3, r2
 8008a60:	2250      	movs	r2, #80	; 0x50
 8008a62:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[6][7] == adv ||
 8008a64:	e1d2      	b.n	8008e0c <jogadas_possiveis+0x56c>
    				}
    			}
    			else if(i==0 && j!=0 && j!=7){ //linha de cima
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d14f      	bne.n	8008b0c <jogadas_possiveis+0x26c>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d04c      	beq.n	8008b0c <jogadas_possiveis+0x26c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b07      	cmp	r3, #7
 8008a76:	d049      	beq.n	8008b0c <jogadas_possiveis+0x26c>
    				if((tabuleiro[0][j-1] == adv ||
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a7e:	5cd3      	ldrb	r3, [r2, r3]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d023      	beq.n	8008ad0 <jogadas_possiveis+0x230>
    					tabuleiro[0][j+1] == adv ||
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a8e:	5cd3      	ldrb	r3, [r2, r3]
 8008a90:	b2db      	uxtb	r3, r3
    				if((tabuleiro[0][j-1] == adv ||
 8008a92:	7bfa      	ldrb	r2, [r7, #15]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d01b      	beq.n	8008ad0 <jogadas_possiveis+0x230>
						tabuleiro[1][j] == adv ||
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <jogadas_possiveis+0x268>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b2db      	uxtb	r3, r3
    					tabuleiro[0][j+1] == adv ||
 8008aa4:	7bfa      	ldrb	r2, [r7, #15]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d012      	beq.n	8008ad0 <jogadas_possiveis+0x230>
						tabuleiro[1][j+1] == adv ||
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <jogadas_possiveis+0x268>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	7a1b      	ldrb	r3, [r3, #8]
 8008ab4:	b2db      	uxtb	r3, r3
						tabuleiro[1][j] == adv ||
 8008ab6:	7bfa      	ldrb	r2, [r7, #15]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d009      	beq.n	8008ad0 <jogadas_possiveis+0x230>
						tabuleiro[1][j-1] == adv)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <jogadas_possiveis+0x268>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	7a1b      	ldrb	r3, [r3, #8]
 8008ac6:	b2db      	uxtb	r3, r3
						tabuleiro[1][j+1] == adv ||
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	f040 81a0 	bne.w	8008e10 <jogadas_possiveis+0x570>
    					&& tabuleiro[0][j]==SEM_PECA && validar_com_self(i, j)){
 8008ad0:	4a0d      	ldr	r2, [pc, #52]	; (8008b08 <jogadas_possiveis+0x268>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b4e      	cmp	r3, #78	; 0x4e
 8008adc:	f040 8198 	bne.w	8008e10 <jogadas_possiveis+0x570>
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	68b8      	ldr	r0, [r7, #8]
 8008ae4:	f7ff fd46 	bl	8008574 <validar_com_self>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8190 	beq.w	8008e10 <jogadas_possiveis+0x570>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008af0:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <jogadas_possiveis+0x268>)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	441a      	add	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4413      	add	r3, r2
 8008afc:	2250      	movs	r2, #80	; 0x50
 8008afe:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[0][j-1] == adv ||
 8008b00:	e186      	b.n	8008e10 <jogadas_possiveis+0x570>
 8008b02:	bf00      	nop
 8008b04:	20000070 	.word	0x20000070
 8008b08:	2000058c 	.word	0x2000058c
    				}
    			}
    			else if(j==0 && i!=0 && i!=7){ //linha esquerda
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d14c      	bne.n	8008bac <jogadas_possiveis+0x30c>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d049      	beq.n	8008bac <jogadas_possiveis+0x30c>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	d046      	beq.n	8008bac <jogadas_possiveis+0x30c>
    				if((tabuleiro[i-1][0] == adv ||
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	4a77      	ldr	r2, [pc, #476]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b24:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	7bfa      	ldrb	r2, [r7, #15]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d024      	beq.n	8008b7a <jogadas_possiveis+0x2da>
    					tabuleiro[i+1][0] == adv ||
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3301      	adds	r3, #1
 8008b34:	4a72      	ldr	r2, [pc, #456]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008b3a:	b2db      	uxtb	r3, r3
    				if((tabuleiro[i-1][0] == adv ||
 8008b3c:	7bfa      	ldrb	r2, [r7, #15]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d01b      	beq.n	8008b7a <jogadas_possiveis+0x2da>
						tabuleiro[1][i-1] == adv ||
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4a6e      	ldr	r2, [pc, #440]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b48:	4413      	add	r3, r2
 8008b4a:	7a1b      	ldrb	r3, [r3, #8]
 8008b4c:	b2db      	uxtb	r3, r3
    					tabuleiro[i+1][0] == adv ||
 8008b4e:	7bfa      	ldrb	r2, [r7, #15]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d012      	beq.n	8008b7a <jogadas_possiveis+0x2da>
						tabuleiro[1][i+1] == adv ||
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	3301      	adds	r3, #1
 8008b58:	4a69      	ldr	r2, [pc, #420]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b5a:	4413      	add	r3, r2
 8008b5c:	7a1b      	ldrb	r3, [r3, #8]
 8008b5e:	b2db      	uxtb	r3, r3
						tabuleiro[1][i-1] == adv ||
 8008b60:	7bfa      	ldrb	r2, [r7, #15]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d009      	beq.n	8008b7a <jogadas_possiveis+0x2da>
						tabuleiro[1][i] == adv)
 8008b66:	4a66      	ldr	r2, [pc, #408]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
						tabuleiro[1][i+1] == adv ||
 8008b72:	7bfa      	ldrb	r2, [r7, #15]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	f040 814d 	bne.w	8008e14 <jogadas_possiveis+0x574>
    					&& tabuleiro[i][0]==SEM_PECA && validar_com_self(i, j)){
 8008b7a:	4a61      	ldr	r2, [pc, #388]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b4e      	cmp	r3, #78	; 0x4e
 8008b86:	f040 8145 	bne.w	8008e14 <jogadas_possiveis+0x574>
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	68b8      	ldr	r0, [r7, #8]
 8008b8e:	f7ff fcf1 	bl	8008574 <validar_com_self>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 813d 	beq.w	8008e14 <jogadas_possiveis+0x574>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008b9a:	4a59      	ldr	r2, [pc, #356]	; (8008d00 <jogadas_possiveis+0x460>)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	441a      	add	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	2250      	movs	r2, #80	; 0x50
 8008ba8:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[i-1][0] == adv ||
 8008baa:	e133      	b.n	8008e14 <jogadas_possiveis+0x574>
    				}
    			}
    			else if(i==7 && j!=0 && j!=7){ //linha de baixo
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b07      	cmp	r3, #7
 8008bb0:	d151      	bne.n	8008c56 <jogadas_possiveis+0x3b6>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d04e      	beq.n	8008c56 <jogadas_possiveis+0x3b6>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	d04b      	beq.n	8008c56 <jogadas_possiveis+0x3b6>
    				if((tabuleiro[7][j-1] == adv ||
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	4a4f      	ldr	r2, [pc, #316]	; (8008d00 <jogadas_possiveis+0x460>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	7bfa      	ldrb	r2, [r7, #15]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d027      	beq.n	8008c22 <jogadas_possiveis+0x382>
    					tabuleiro[7][j+1] == adv ||
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	4a4a      	ldr	r2, [pc, #296]	; (8008d00 <jogadas_possiveis+0x460>)
 8008bd8:	4413      	add	r3, r2
 8008bda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bde:	b2db      	uxtb	r3, r3
    				if((tabuleiro[7][j-1] == adv ||
 8008be0:	7bfa      	ldrb	r2, [r7, #15]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d01d      	beq.n	8008c22 <jogadas_possiveis+0x382>
						tabuleiro[6][j] == adv ||
 8008be6:	4a46      	ldr	r2, [pc, #280]	; (8008d00 <jogadas_possiveis+0x460>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3330      	adds	r3, #48	; 0x30
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b2db      	uxtb	r3, r3
    					tabuleiro[7][j+1] == adv ||
 8008bf2:	7bfa      	ldrb	r2, [r7, #15]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d014      	beq.n	8008c22 <jogadas_possiveis+0x382>
						tabuleiro[6][j-1] == adv ||
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	4a40      	ldr	r2, [pc, #256]	; (8008d00 <jogadas_possiveis+0x460>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c04:	b2db      	uxtb	r3, r3
						tabuleiro[6][j] == adv ||
 8008c06:	7bfa      	ldrb	r2, [r7, #15]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d00a      	beq.n	8008c22 <jogadas_possiveis+0x382>
						tabuleiro[6][j+1] == adv)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	4a3b      	ldr	r2, [pc, #236]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c12:	4413      	add	r3, r2
 8008c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c18:	b2db      	uxtb	r3, r3
						tabuleiro[6][j-1] == adv ||
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	f040 80fb 	bne.w	8008e18 <jogadas_possiveis+0x578>
    					&& tabuleiro[7][j]==SEM_PECA && validar_com_self(i, j)){
 8008c22:	4a37      	ldr	r2, [pc, #220]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4413      	add	r3, r2
 8008c28:	3338      	adds	r3, #56	; 0x38
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8008c30:	f040 80f2 	bne.w	8008e18 <jogadas_possiveis+0x578>
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	68b8      	ldr	r0, [r7, #8]
 8008c38:	f7ff fc9c 	bl	8008574 <validar_com_self>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80ea 	beq.w	8008e18 <jogadas_possiveis+0x578>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008c44:	4a2e      	ldr	r2, [pc, #184]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	441a      	add	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	2250      	movs	r2, #80	; 0x50
 8008c52:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[7][j-1] == adv ||
 8008c54:	e0e0      	b.n	8008e18 <jogadas_possiveis+0x578>
    				}
    			}
    			else if(j==7 && i!=0 && i!=7){ //linha direita
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b07      	cmp	r3, #7
 8008c5a:	d153      	bne.n	8008d04 <jogadas_possiveis+0x464>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d050      	beq.n	8008d04 <jogadas_possiveis+0x464>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	d04d      	beq.n	8008d04 <jogadas_possiveis+0x464>
    				if((tabuleiro[i-1][7] == adv ||
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a24      	ldr	r2, [pc, #144]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	79db      	ldrb	r3, [r3, #7]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	7bfa      	ldrb	r2, [r7, #15]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d027      	beq.n	8008ccc <jogadas_possiveis+0x42c>
    					tabuleiro[i+1][7] == adv ||
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	79db      	ldrb	r3, [r3, #7]
 8008c88:	b2db      	uxtb	r3, r3
    				if((tabuleiro[i-1][7] == adv ||
 8008c8a:	7bfa      	ldrb	r2, [r7, #15]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d01d      	beq.n	8008ccc <jogadas_possiveis+0x42c>
						tabuleiro[i][6] == adv ||
 8008c90:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <jogadas_possiveis+0x460>)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	799b      	ldrb	r3, [r3, #6]
 8008c9a:	b2db      	uxtb	r3, r3
    					tabuleiro[i+1][7] == adv ||
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d014      	beq.n	8008ccc <jogadas_possiveis+0x42c>
						tabuleiro[i-1][6] == adv||
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <jogadas_possiveis+0x460>)
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4413      	add	r3, r2
 8008cac:	799b      	ldrb	r3, [r3, #6]
 8008cae:	b2db      	uxtb	r3, r3
						tabuleiro[i][6] == adv ||
 8008cb0:	7bfa      	ldrb	r2, [r7, #15]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d00a      	beq.n	8008ccc <jogadas_possiveis+0x42c>
						tabuleiro[i+1][6] == adv)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	4a11      	ldr	r2, [pc, #68]	; (8008d00 <jogadas_possiveis+0x460>)
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	799b      	ldrb	r3, [r3, #6]
 8008cc2:	b2db      	uxtb	r3, r3
						tabuleiro[i-1][6] == adv||
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	f040 80a8 	bne.w	8008e1c <jogadas_possiveis+0x57c>
    					&& tabuleiro[i][7]==SEM_PECA && validar_com_self(i, j)){
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <jogadas_possiveis+0x460>)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	79db      	ldrb	r3, [r3, #7]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b4e      	cmp	r3, #78	; 0x4e
 8008cda:	f040 809f 	bne.w	8008e1c <jogadas_possiveis+0x57c>
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	68b8      	ldr	r0, [r7, #8]
 8008ce2:	f7ff fc47 	bl	8008574 <validar_com_self>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 8097 	beq.w	8008e1c <jogadas_possiveis+0x57c>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008cee:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <jogadas_possiveis+0x460>)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	441a      	add	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	2250      	movs	r2, #80	; 0x50
 8008cfc:	701a      	strb	r2, [r3, #0]
    				if((tabuleiro[i-1][7] == adv ||
 8008cfe:	e08d      	b.n	8008e1c <jogadas_possiveis+0x57c>
 8008d00:	2000058c 	.word	0x2000058c
    				}
    			}
    			//regra geral:
    			else if((tabuleiro[i-1][j-1] == adv ||
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	1e5a      	subs	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	494f      	ldr	r1, [pc, #316]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d0e:	00d2      	lsls	r2, r2, #3
 8008d10:	440a      	add	r2, r1
 8008d12:	4413      	add	r3, r2
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	7bfa      	ldrb	r2, [r7, #15]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d056      	beq.n	8008dcc <jogadas_possiveis+0x52c>
    					tabuleiro[i-1][j] == adv ||
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4a4a      	ldr	r2, [pc, #296]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	441a      	add	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b2db      	uxtb	r3, r3
    			else if((tabuleiro[i-1][j-1] == adv ||
 8008d30:	7bfa      	ldrb	r2, [r7, #15]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d04a      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i-1][j+1] == adv ||
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	1e5a      	subs	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	4943      	ldr	r1, [pc, #268]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d40:	00d2      	lsls	r2, r2, #3
 8008d42:	440a      	add	r2, r1
 8008d44:	4413      	add	r3, r2
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
    					tabuleiro[i-1][j] == adv ||
 8008d4a:	7bfa      	ldrb	r2, [r7, #15]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d03d      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j-1] == adv ||
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	493c      	ldr	r1, [pc, #240]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d5a:	00d2      	lsls	r2, r2, #3
 8008d5c:	440a      	add	r2, r1
 8008d5e:	4413      	add	r3, r2
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b2db      	uxtb	r3, r3
						tabuleiro[i-1][j+1] == adv ||
 8008d64:	7bfa      	ldrb	r2, [r7, #15]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d030      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j] == adv ||
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	4a37      	ldr	r2, [pc, #220]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	441a      	add	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j-1] == adv ||
 8008d7c:	7bfa      	ldrb	r2, [r7, #15]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d024      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i+1][j+1] == adv ||
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	4930      	ldr	r1, [pc, #192]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008d8c:	00d2      	lsls	r2, r2, #3
 8008d8e:	440a      	add	r2, r1
 8008d90:	4413      	add	r3, r2
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j] == adv ||
 8008d96:	7bfa      	ldrb	r2, [r7, #15]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d017      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i][j-1] == adv ||
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	492a      	ldr	r1, [pc, #168]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	00d2      	lsls	r2, r2, #3
 8008da6:	440a      	add	r2, r1
 8008da8:	4413      	add	r3, r2
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
						tabuleiro[i+1][j+1] == adv ||
 8008dae:	7bfa      	ldrb	r2, [r7, #15]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d00b      	beq.n	8008dcc <jogadas_possiveis+0x52c>
						tabuleiro[i][j+1] == adv)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3301      	adds	r3, #1
 8008db8:	4924      	ldr	r1, [pc, #144]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	00d2      	lsls	r2, r2, #3
 8008dbe:	440a      	add	r2, r1
 8008dc0:	4413      	add	r3, r2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b2db      	uxtb	r3, r3
						tabuleiro[i][j-1] == adv ||
 8008dc6:	7bfa      	ldrb	r2, [r7, #15]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d128      	bne.n	8008e1e <jogadas_possiveis+0x57e>
    					&& tabuleiro[i][j]==SEM_PECA && validar_com_self(i, j)){
 8008dcc:	4a1f      	ldr	r2, [pc, #124]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	441a      	add	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b4e      	cmp	r3, #78	; 0x4e
 8008dde:	d11e      	bne.n	8008e1e <jogadas_possiveis+0x57e>
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	68b8      	ldr	r0, [r7, #8]
 8008de4:	f7ff fbc6 	bl	8008574 <validar_com_self>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d017      	beq.n	8008e1e <jogadas_possiveis+0x57e>

    						tabuleiro[i][j] = JOGADA_POSSIVEL;
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <jogadas_possiveis+0x5ac>)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	2250      	movs	r2, #80	; 0x50
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e00e      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][1] == adv ||
 8008e00:	bf00      	nop
 8008e02:	e00c      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][6] == adv ||
 8008e04:	bf00      	nop
 8008e06:	e00a      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[6][0] == adv ||
 8008e08:	bf00      	nop
 8008e0a:	e008      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[6][7] == adv ||
 8008e0c:	bf00      	nop
 8008e0e:	e006      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[0][j-1] == adv ||
 8008e10:	bf00      	nop
 8008e12:	e004      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[i-1][0] == adv ||
 8008e14:	bf00      	nop
 8008e16:	e002      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[7][j-1] == adv ||
 8008e18:	bf00      	nop
 8008e1a:	e000      	b.n	8008e1e <jogadas_possiveis+0x57e>
    				if((tabuleiro[i-1][7] == adv ||
 8008e1c:	bf00      	nop
    		for(j = 0; j < 8; j++){
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3301      	adds	r3, #1
 8008e22:	607b      	str	r3, [r7, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	f77f ad55 	ble.w	80088d6 <jogadas_possiveis+0x36>
    	for(i = 0; i < 8; i++){
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b07      	cmp	r3, #7
 8008e36:	f77f ad4b 	ble.w	80088d0 <jogadas_possiveis+0x30>
    				}
    			}

    }
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008e3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008e3e:	f7f8 fbdd 	bl	80015fc <BSP_LCD_SetTextColor>
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	2000058c 	.word	0x2000058c

08008e50 <vira_pecas>:





void vira_pecas(int linsel, int colsel){
 8008e50:	b480      	push	{r7}
 8008e52:	b089      	sub	sp, #36	; 0x24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	char self;
	char adv;
	int j = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
	int ok = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]

    if (ver_quem_joga%2 == 1){
 8008e66:	4ba3      	ldr	r3, [pc, #652]	; (80090f4 <vira_pecas+0x2a4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	bfb8      	it	lt
 8008e72:	425b      	neglt	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d104      	bne.n	8008e82 <vira_pecas+0x32>
    	self = PECA_JOGADOR_1;
 8008e78:	2358      	movs	r3, #88	; 0x58
 8008e7a:	77fb      	strb	r3, [r7, #31]
        adv = PECA_JOGADOR_2;
 8008e7c:	2359      	movs	r3, #89	; 0x59
 8008e7e:	77bb      	strb	r3, [r7, #30]
 8008e80:	e003      	b.n	8008e8a <vira_pecas+0x3a>
    }
    else{
    	self = PECA_JOGADOR_2;
 8008e82:	2359      	movs	r3, #89	; 0x59
 8008e84:	77fb      	strb	r3, [r7, #31]
    	adv = PECA_JOGADOR_1;
 8008e86:	2358      	movs	r3, #88	; 0x58
 8008e88:	77bb      	strb	r3, [r7, #30]



    //ver relaçoes com as peças vizinhas
    //ESQUERDA
    if(tabuleiro[linsel][colsel-1] == adv){
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	499a      	ldr	r1, [pc, #616]	; (80090f8 <vira_pecas+0x2a8>)
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	00d2      	lsls	r2, r2, #3
 8008e94:	440a      	add	r2, r1
 8008e96:	4413      	add	r3, r2
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	7fba      	ldrb	r2, [r7, #30]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d119      	bne.n	8008ed6 <vira_pecas+0x86>
        for(j = colsel-2; j >= 0 ;  j-- ){
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	3b02      	subs	r3, #2
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	e012      	b.n	8008ed0 <vira_pecas+0x80>
            if(tabuleiro[linsel][j] == self){
 8008eaa:	4a93      	ldr	r2, [pc, #588]	; (80090f8 <vira_pecas+0x2a8>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	441a      	add	r2, r3
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	7ffa      	ldrb	r2, [r7, #31]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d102      	bne.n	8008ec6 <vira_pecas+0x76>
                ok = 1;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
                break;
 8008ec4:	e007      	b.n	8008ed6 <vira_pecas+0x86>
            }
            else{
                ok = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	613b      	str	r3, [r7, #16]
        for(j = colsel-2; j >= 0 ;  j-- ){
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dae9      	bge.n	8008eaa <vira_pecas+0x5a>
            }
        }
    }

    if(ok){
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01c      	beq.n	8008f16 <vira_pecas+0xc6>
        for(j = colsel-1; j >= 0 && tabuleiro[linsel][j] == adv; j--){
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	e00a      	b.n	8008efa <vira_pecas+0xaa>
        	tabuleiro[linsel][j] = self;
 8008ee4:	4a84      	ldr	r2, [pc, #528]	; (80090f8 <vira_pecas+0x2a8>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	441a      	add	r2, r3
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	4413      	add	r3, r2
 8008ef0:	7ffa      	ldrb	r2, [r7, #31]
 8008ef2:	701a      	strb	r2, [r3, #0]
        for(j = colsel-1; j >= 0 && tabuleiro[linsel][j] == adv; j--){
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	61bb      	str	r3, [r7, #24]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	db0a      	blt.n	8008f16 <vira_pecas+0xc6>
 8008f00:	4a7d      	ldr	r2, [pc, #500]	; (80090f8 <vira_pecas+0x2a8>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	441a      	add	r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	7fba      	ldrb	r2, [r7, #30]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d0e6      	beq.n	8008ee4 <vira_pecas+0x94>
        }
    }

    ok = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]


    //DIREITA
    if(tabuleiro[linsel][colsel+1] == adv){
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	4976      	ldr	r1, [pc, #472]	; (80090f8 <vira_pecas+0x2a8>)
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	00d2      	lsls	r2, r2, #3
 8008f24:	440a      	add	r2, r1
 8008f26:	4413      	add	r3, r2
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	7fba      	ldrb	r2, [r7, #30]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d119      	bne.n	8008f66 <vira_pecas+0x116>
        for(j = colsel + 2; j < 8 ;  j++ ){
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	3302      	adds	r3, #2
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	e012      	b.n	8008f60 <vira_pecas+0x110>
            if(tabuleiro[linsel][j] == self){
 8008f3a:	4a6f      	ldr	r2, [pc, #444]	; (80090f8 <vira_pecas+0x2a8>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	441a      	add	r2, r3
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	4413      	add	r3, r2
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	7ffa      	ldrb	r2, [r7, #31]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d102      	bne.n	8008f56 <vira_pecas+0x106>
                ok = 1;
 8008f50:	2301      	movs	r3, #1
 8008f52:	613b      	str	r3, [r7, #16]
                break;
 8008f54:	e007      	b.n	8008f66 <vira_pecas+0x116>
            }
            else{
                ok = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	613b      	str	r3, [r7, #16]
        for(j = colsel + 2; j < 8 ;  j++ ){
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	61bb      	str	r3, [r7, #24]
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b07      	cmp	r3, #7
 8008f64:	dde9      	ble.n	8008f3a <vira_pecas+0xea>
            }
        }
    }

    if(ok){
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01c      	beq.n	8008fa6 <vira_pecas+0x156>
        for(j = colsel + 1; j < 8 && tabuleiro[linsel][j] == adv; j++){
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	e00a      	b.n	8008f8a <vira_pecas+0x13a>
        	tabuleiro[linsel][j] = self;
 8008f74:	4a60      	ldr	r2, [pc, #384]	; (80090f8 <vira_pecas+0x2a8>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	441a      	add	r2, r3
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	4413      	add	r3, r2
 8008f80:	7ffa      	ldrb	r2, [r7, #31]
 8008f82:	701a      	strb	r2, [r3, #0]
        for(j = colsel + 1; j < 8 && tabuleiro[linsel][j] == adv; j++){
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	3301      	adds	r3, #1
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b07      	cmp	r3, #7
 8008f8e:	dc0a      	bgt.n	8008fa6 <vira_pecas+0x156>
 8008f90:	4a59      	ldr	r2, [pc, #356]	; (80090f8 <vira_pecas+0x2a8>)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	441a      	add	r2, r3
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	7fba      	ldrb	r2, [r7, #30]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d0e6      	beq.n	8008f74 <vira_pecas+0x124>
        }
    }

    ok = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]


    //CIMA
    if(tabuleiro[linsel+1][colsel] == adv){
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a52      	ldr	r2, [pc, #328]	; (80090f8 <vira_pecas+0x2a8>)
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	441a      	add	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	7fba      	ldrb	r2, [r7, #30]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d119      	bne.n	8008ff6 <vira_pecas+0x1a6>
        for(i = linsel + 2; i < 8 ;  i++ ){
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e012      	b.n	8008ff0 <vira_pecas+0x1a0>
            if(tabuleiro[i][colsel] == self){
 8008fca:	4a4b      	ldr	r2, [pc, #300]	; (80090f8 <vira_pecas+0x2a8>)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	441a      	add	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	7ffa      	ldrb	r2, [r7, #31]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d102      	bne.n	8008fe6 <vira_pecas+0x196>
                ok = 1;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]
                break;
 8008fe4:	e007      	b.n	8008ff6 <vira_pecas+0x1a6>
            }
            else{
                ok = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]
        for(i = linsel + 2; i < 8 ;  i++ ){
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	3301      	adds	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2b07      	cmp	r3, #7
 8008ff4:	dde9      	ble.n	8008fca <vira_pecas+0x17a>
            }
        }
    }


    if(ok){
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01c      	beq.n	8009036 <vira_pecas+0x1e6>
        for(i = linsel + 1; i < 8 && tabuleiro[i][colsel] == adv; i++){
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3301      	adds	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
 8009002:	e00a      	b.n	800901a <vira_pecas+0x1ca>
        	tabuleiro[i][colsel] = self;
 8009004:	4a3c      	ldr	r2, [pc, #240]	; (80090f8 <vira_pecas+0x2a8>)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	441a      	add	r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	4413      	add	r3, r2
 8009010:	7ffa      	ldrb	r2, [r7, #31]
 8009012:	701a      	strb	r2, [r3, #0]
        for(i = linsel + 1; i < 8 && tabuleiro[i][colsel] == adv; i++){
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	3301      	adds	r3, #1
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b07      	cmp	r3, #7
 800901e:	dc0a      	bgt.n	8009036 <vira_pecas+0x1e6>
 8009020:	4a35      	ldr	r2, [pc, #212]	; (80090f8 <vira_pecas+0x2a8>)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	441a      	add	r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	4413      	add	r3, r2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	7fba      	ldrb	r2, [r7, #30]
 8009032:	429a      	cmp	r2, r3
 8009034:	d0e6      	beq.n	8009004 <vira_pecas+0x1b4>
        }
    }

    ok = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]


    //BAIXO
    if(tabuleiro[linsel-1][colsel] == adv){
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3b01      	subs	r3, #1
 800903e:	4a2e      	ldr	r2, [pc, #184]	; (80090f8 <vira_pecas+0x2a8>)
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	441a      	add	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	4413      	add	r3, r2
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	7fba      	ldrb	r2, [r7, #30]
 800904e:	429a      	cmp	r2, r3
 8009050:	d119      	bne.n	8009086 <vira_pecas+0x236>
        for(i = linsel-2; i >= 0 ;  i-- ){
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3b02      	subs	r3, #2
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	e012      	b.n	8009080 <vira_pecas+0x230>
            if(tabuleiro[i][colsel] == self){
 800905a:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <vira_pecas+0x2a8>)
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	441a      	add	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	4413      	add	r3, r2
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	7ffa      	ldrb	r2, [r7, #31]
 800906c:	429a      	cmp	r2, r3
 800906e:	d102      	bne.n	8009076 <vira_pecas+0x226>
                ok = 1;
 8009070:	2301      	movs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
                break;
 8009074:	e007      	b.n	8009086 <vira_pecas+0x236>
            }
            else{
                ok = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
        for(i = linsel-2; i >= 0 ;  i-- ){
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	3b01      	subs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	dae9      	bge.n	800905a <vira_pecas+0x20a>
            }
        }
    }

    if(ok){
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01c      	beq.n	80090c6 <vira_pecas+0x276>
        for(i = linsel-1; i >= 0 && tabuleiro[i][colsel] == adv; i--){
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3b01      	subs	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	e00a      	b.n	80090aa <vira_pecas+0x25a>
        	tabuleiro[i][colsel] = self;
 8009094:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <vira_pecas+0x2a8>)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	441a      	add	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	4413      	add	r3, r2
 80090a0:	7ffa      	ldrb	r2, [r7, #31]
 80090a2:	701a      	strb	r2, [r3, #0]
        for(i = linsel-1; i >= 0 && tabuleiro[i][colsel] == adv; i--){
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db0a      	blt.n	80090c6 <vira_pecas+0x276>
 80090b0:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <vira_pecas+0x2a8>)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	441a      	add	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	4413      	add	r3, r2
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	7fba      	ldrb	r2, [r7, #30]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d0e6      	beq.n	8009094 <vira_pecas+0x244>
        }
    }

    ok = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	613b      	str	r3, [r7, #16]


   //DIAGONAL SUPERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel+1] == adv){
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	1e5a      	subs	r2, r3, #1
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	4909      	ldr	r1, [pc, #36]	; (80090f8 <vira_pecas+0x2a8>)
 80090d4:	00d2      	lsls	r2, r2, #3
 80090d6:	440a      	add	r2, r1
 80090d8:	4413      	add	r3, r2
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	7fba      	ldrb	r2, [r7, #30]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d127      	bne.n	8009134 <vira_pecas+0x2e4>
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3b02      	subs	r3, #2
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	3302      	adds	r3, #2
 80090ee:	61bb      	str	r3, [r7, #24]
 80090f0:	e01a      	b.n	8009128 <vira_pecas+0x2d8>
 80090f2:	bf00      	nop
 80090f4:	20000070 	.word	0x20000070
 80090f8:	2000058c 	.word	0x2000058c
           if(tabuleiro[i][j] == self){
 80090fc:	4a9b      	ldr	r2, [pc, #620]	; (800936c <vira_pecas+0x51c>)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	441a      	add	r2, r3
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	4413      	add	r3, r2
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	7ffa      	ldrb	r2, [r7, #31]
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <vira_pecas+0x2c8>
               ok = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	613b      	str	r3, [r7, #16]
               break;
 8009116:	e00d      	b.n	8009134 <vira_pecas+0x2e4>
           }
           else{
               ok = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
       for(i=linsel-2, j=colsel+2; i>=0 && j< 8; i--, j++){
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3b01      	subs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	3301      	adds	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	db02      	blt.n	8009134 <vira_pecas+0x2e4>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b07      	cmp	r3, #7
 8009132:	dde3      	ble.n	80090fc <vira_pecas+0x2ac>
           }
       }
   }

   if(ok){
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d025      	beq.n	8009186 <vira_pecas+0x336>
      for(i=linsel-1, j=colsel+1; i>=0 && j< 8 && tabuleiro[i][j] == adv; i--, j++){
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3b01      	subs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	e00d      	b.n	8009164 <vira_pecas+0x314>
    	  tabuleiro[i][j] = self;
 8009148:	4a88      	ldr	r2, [pc, #544]	; (800936c <vira_pecas+0x51c>)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	441a      	add	r2, r3
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	4413      	add	r3, r2
 8009154:	7ffa      	ldrb	r2, [r7, #31]
 8009156:	701a      	strb	r2, [r3, #0]
      for(i=linsel-1, j=colsel+1; i>=0 && j< 8 && tabuleiro[i][j] == adv; i--, j++){
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	3b01      	subs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	3301      	adds	r3, #1
 8009162:	61bb      	str	r3, [r7, #24]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	db0d      	blt.n	8009186 <vira_pecas+0x336>
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b07      	cmp	r3, #7
 800916e:	dc0a      	bgt.n	8009186 <vira_pecas+0x336>
 8009170:	4a7e      	ldr	r2, [pc, #504]	; (800936c <vira_pecas+0x51c>)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	441a      	add	r2, r3
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	4413      	add	r3, r2
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	7fba      	ldrb	r2, [r7, #30]
 8009182:	429a      	cmp	r2, r3
 8009184:	d0e0      	beq.n	8009148 <vira_pecas+0x2f8>
       }
   }

   ok = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	613b      	str	r3, [r7, #16]


   //DIAGONAL INFERIOR ESQUERDA
   if(tabuleiro[linsel+1][colsel-1] == adv){
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	3b01      	subs	r3, #1
 8009192:	4976      	ldr	r1, [pc, #472]	; (800936c <vira_pecas+0x51c>)
 8009194:	00d2      	lsls	r2, r2, #3
 8009196:	440a      	add	r2, r1
 8009198:	4413      	add	r3, r2
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	7fba      	ldrb	r2, [r7, #30]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d122      	bne.n	80091ea <vira_pecas+0x39a>
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3302      	adds	r3, #2
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	3b02      	subs	r3, #2
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e015      	b.n	80091de <vira_pecas+0x38e>
           if(tabuleiro[i][j] == self){
 80091b2:	4a6e      	ldr	r2, [pc, #440]	; (800936c <vira_pecas+0x51c>)
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	441a      	add	r2, r3
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	4413      	add	r3, r2
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	7ffa      	ldrb	r2, [r7, #31]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d102      	bne.n	80091ce <vira_pecas+0x37e>
               ok = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	613b      	str	r3, [r7, #16]
               break;
 80091cc:	e00d      	b.n	80091ea <vira_pecas+0x39a>
           }
           else{
               ok = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
       for(i=linsel+2, j=colsel-2; i<8 && j>= 0; i++, j--){
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3301      	adds	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	3b01      	subs	r3, #1
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b07      	cmp	r3, #7
 80091e2:	dc02      	bgt.n	80091ea <vira_pecas+0x39a>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dae3      	bge.n	80091b2 <vira_pecas+0x362>
           }
       }
   }

   if(ok){
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d025      	beq.n	800923c <vira_pecas+0x3ec>
      for(i=linsel+1, j=colsel-1; i<8 && j>= 0 && tabuleiro[i][j] == adv; i++, j--){
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3301      	adds	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	e00d      	b.n	800921a <vira_pecas+0x3ca>
    	  tabuleiro[i][j] = self;
 80091fe:	4a5b      	ldr	r2, [pc, #364]	; (800936c <vira_pecas+0x51c>)
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	441a      	add	r2, r3
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	4413      	add	r3, r2
 800920a:	7ffa      	ldrb	r2, [r7, #31]
 800920c:	701a      	strb	r2, [r3, #0]
      for(i=linsel+1, j=colsel-1; i<8 && j>= 0 && tabuleiro[i][j] == adv; i++, j--){
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	3301      	adds	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	3b01      	subs	r3, #1
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b07      	cmp	r3, #7
 800921e:	dc0d      	bgt.n	800923c <vira_pecas+0x3ec>
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	db0a      	blt.n	800923c <vira_pecas+0x3ec>
 8009226:	4a51      	ldr	r2, [pc, #324]	; (800936c <vira_pecas+0x51c>)
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	441a      	add	r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	4413      	add	r3, r2
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	7fba      	ldrb	r2, [r7, #30]
 8009238:	429a      	cmp	r2, r3
 800923a:	d0e0      	beq.n	80091fe <vira_pecas+0x3ae>
       }
   }

   ok = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]


   //DIAGONAL SUPERIOR DIREITA
   if(tabuleiro[linsel+1][colsel+1] == adv){
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	4948      	ldr	r1, [pc, #288]	; (800936c <vira_pecas+0x51c>)
 800924a:	00d2      	lsls	r2, r2, #3
 800924c:	440a      	add	r2, r1
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	7fba      	ldrb	r2, [r7, #30]
 8009256:	429a      	cmp	r2, r3
 8009258:	d122      	bne.n	80092a0 <vira_pecas+0x450>
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3302      	adds	r3, #2
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	3302      	adds	r3, #2
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e015      	b.n	8009294 <vira_pecas+0x444>
           if(tabuleiro[i][j] == self){
 8009268:	4a40      	ldr	r2, [pc, #256]	; (800936c <vira_pecas+0x51c>)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	441a      	add	r2, r3
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	4413      	add	r3, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	7ffa      	ldrb	r2, [r7, #31]
 800927a:	429a      	cmp	r2, r3
 800927c:	d102      	bne.n	8009284 <vira_pecas+0x434>
               ok = 1;
 800927e:	2301      	movs	r3, #1
 8009280:	613b      	str	r3, [r7, #16]
               break;
 8009282:	e00d      	b.n	80092a0 <vira_pecas+0x450>
           }
           else{
               ok = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
       for(i=linsel+2, j=colsel+2; i<8 && j< 8; i++, j++){
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	3301      	adds	r3, #1
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	3301      	adds	r3, #1
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b07      	cmp	r3, #7
 8009298:	dc02      	bgt.n	80092a0 <vira_pecas+0x450>
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b07      	cmp	r3, #7
 800929e:	dde3      	ble.n	8009268 <vira_pecas+0x418>
           }
       }
   }

   if(ok){
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d025      	beq.n	80092f2 <vira_pecas+0x4a2>
      for(int i=linsel+1, j=colsel+1; i<8 && j < 8 && tabuleiro[i][j] == adv; i++, j++){
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	e00d      	b.n	80092d0 <vira_pecas+0x480>
    	  tabuleiro[i][j] = self;
 80092b4:	4a2d      	ldr	r2, [pc, #180]	; (800936c <vira_pecas+0x51c>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	441a      	add	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4413      	add	r3, r2
 80092c0:	7ffa      	ldrb	r2, [r7, #31]
 80092c2:	701a      	strb	r2, [r3, #0]
      for(int i=linsel+1, j=colsel+1; i<8 && j < 8 && tabuleiro[i][j] == adv; i++, j++){
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3301      	adds	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60bb      	str	r3, [r7, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b07      	cmp	r3, #7
 80092d4:	dc0d      	bgt.n	80092f2 <vira_pecas+0x4a2>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b07      	cmp	r3, #7
 80092da:	dc0a      	bgt.n	80092f2 <vira_pecas+0x4a2>
 80092dc:	4a23      	ldr	r2, [pc, #140]	; (800936c <vira_pecas+0x51c>)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	441a      	add	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4413      	add	r3, r2
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	7fba      	ldrb	r2, [r7, #30]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d0e0      	beq.n	80092b4 <vira_pecas+0x464>
       }
   }

   ok = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	613b      	str	r3, [r7, #16]


   //DIAGONAL INFERIOR ESQUERDA
   if(tabuleiro[linsel-1][colsel-1] == adv){
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	491b      	ldr	r1, [pc, #108]	; (800936c <vira_pecas+0x51c>)
 8009300:	00d2      	lsls	r2, r2, #3
 8009302:	440a      	add	r2, r1
 8009304:	4413      	add	r3, r2
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	7fba      	ldrb	r2, [r7, #30]
 800930c:	429a      	cmp	r2, r3
 800930e:	d122      	bne.n	8009356 <vira_pecas+0x506>
      for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3b02      	subs	r3, #2
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	3b02      	subs	r3, #2
 800931a:	61bb      	str	r3, [r7, #24]
 800931c:	e015      	b.n	800934a <vira_pecas+0x4fa>
           if(tabuleiro[i][j] == self){
 800931e:	4a13      	ldr	r2, [pc, #76]	; (800936c <vira_pecas+0x51c>)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	441a      	add	r2, r3
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	7ffa      	ldrb	r2, [r7, #31]
 8009330:	429a      	cmp	r2, r3
 8009332:	d102      	bne.n	800933a <vira_pecas+0x4ea>
               ok = 1;
 8009334:	2301      	movs	r3, #1
 8009336:	613b      	str	r3, [r7, #16]
               break;
 8009338:	e00d      	b.n	8009356 <vira_pecas+0x506>
           }
           else{
               ok = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
      for(i=linsel-2, j=colsel-2; i>=0 && j>= 0; i--, j--){
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	3b01      	subs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3b01      	subs	r3, #1
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	db02      	blt.n	8009356 <vira_pecas+0x506>
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dae3      	bge.n	800931e <vira_pecas+0x4ce>
           }
       }
   }

   if(ok){
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d028      	beq.n	80093ae <vira_pecas+0x55e>
      for(i=linsel-1, j=colsel-1; i>=0 && j>= 0 && tabuleiro[i][j] == adv; i--, j--){
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3b01      	subs	r3, #1
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	e010      	b.n	800938c <vira_pecas+0x53c>
 800936a:	bf00      	nop
 800936c:	2000058c 	.word	0x2000058c
    	  tabuleiro[i][j] = self;
 8009370:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <vira_pecas+0x570>)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	441a      	add	r2, r3
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	4413      	add	r3, r2
 800937c:	7ffa      	ldrb	r2, [r7, #31]
 800937e:	701a      	strb	r2, [r3, #0]
      for(i=linsel-1, j=colsel-1; i>=0 && j>= 0 && tabuleiro[i][j] == adv; i--, j--){
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	3b01      	subs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	3b01      	subs	r3, #1
 800938a:	61bb      	str	r3, [r7, #24]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	db0d      	blt.n	80093ae <vira_pecas+0x55e>
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	db0a      	blt.n	80093ae <vira_pecas+0x55e>
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <vira_pecas+0x570>)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	441a      	add	r2, r3
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	4413      	add	r3, r2
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	7fba      	ldrb	r2, [r7, #30]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d0e0      	beq.n	8009370 <vira_pecas+0x520>
       }
   }

    ok = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]


}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	; 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	2000058c 	.word	0x2000058c

080093c4 <tocar_ecran>:

void tocar_ecran(){
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0

	int i=0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
	int j=0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
	float x = 0.0;
 80093d2:	f04f 0300 	mov.w	r3, #0
 80093d6:	607b      	str	r3, [r7, #4]
	float y = 0.0;
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	603b      	str	r3, [r7, #0]



	if(ts_flag==1){
 80093de:	4b51      	ldr	r3, [pc, #324]	; (8009524 <tocar_ecran+0x160>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	f040 809a 	bne.w	800951c <tocar_ecran+0x158>
		ts_flag=0;
 80093e8:	4b4e      	ldr	r3, [pc, #312]	; (8009524 <tocar_ecran+0x160>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
			if(TS_State.touchX[0]>=(BSP_LCD_GetXSize()/10+15) && TS_State.touchY[0]>=(BSP_LCD_GetYSize()/10+15) && TS_State.touchX[0]<=475 && TS_State.touchY[0]<=450){
 80093ee:	4b4e      	ldr	r3, [pc, #312]	; (8009528 <tocar_ecran+0x164>)
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	461c      	mov	r4, r3
 80093f4:	f7f8 f88a 	bl	800150c <BSP_LCD_GetXSize>
 80093f8:	4602      	mov	r2, r0
 80093fa:	4b4c      	ldr	r3, [pc, #304]	; (800952c <tocar_ecran+0x168>)
 80093fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009400:	08db      	lsrs	r3, r3, #3
 8009402:	330f      	adds	r3, #15
 8009404:	429c      	cmp	r4, r3
 8009406:	f0c0 8089 	bcc.w	800951c <tocar_ecran+0x158>
 800940a:	4b47      	ldr	r3, [pc, #284]	; (8009528 <tocar_ecran+0x164>)
 800940c:	88db      	ldrh	r3, [r3, #6]
 800940e:	461c      	mov	r4, r3
 8009410:	f7f8 f888 	bl	8001524 <BSP_LCD_GetYSize>
 8009414:	4602      	mov	r2, r0
 8009416:	4b45      	ldr	r3, [pc, #276]	; (800952c <tocar_ecran+0x168>)
 8009418:	fba3 2302 	umull	r2, r3, r3, r2
 800941c:	08db      	lsrs	r3, r3, #3
 800941e:	330f      	adds	r3, #15
 8009420:	429c      	cmp	r4, r3
 8009422:	d37b      	bcc.n	800951c <tocar_ecran+0x158>
 8009424:	4b40      	ldr	r3, [pc, #256]	; (8009528 <tocar_ecran+0x164>)
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 800942c:	d276      	bcs.n	800951c <tocar_ecran+0x158>
 800942e:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <tocar_ecran+0x164>)
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8009436:	d871      	bhi.n	800951c <tocar_ecran+0x158>

				for(i=0; i<8; i++){
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e022      	b.n	8009484 <tocar_ecran+0xc0>
					if((TS_State.touchX[0]) >= 50*i + 80 && (TS_State.touchX[0]) < 50*i + 130){
 800943e:	4b3a      	ldr	r3, [pc, #232]	; (8009528 <tocar_ecran+0x164>)
 8009440:	885b      	ldrh	r3, [r3, #2]
 8009442:	4619      	mov	r1, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2232      	movs	r2, #50	; 0x32
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	3350      	adds	r3, #80	; 0x50
 800944e:	4299      	cmp	r1, r3
 8009450:	db15      	blt.n	800947e <tocar_ecran+0xba>
 8009452:	4b35      	ldr	r3, [pc, #212]	; (8009528 <tocar_ecran+0x164>)
 8009454:	885b      	ldrh	r3, [r3, #2]
 8009456:	4619      	mov	r1, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2232      	movs	r2, #50	; 0x32
 800945c:	fb02 f303 	mul.w	r3, r2, r3
 8009460:	3382      	adds	r3, #130	; 0x82
 8009462:	4299      	cmp	r1, r3
 8009464:	da0b      	bge.n	800947e <tocar_ecran+0xba>
						x = 50*i + 105;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2232      	movs	r2, #50	; 0x32
 800946a:	fb02 f303 	mul.w	r3, r2, r3
 800946e:	3369      	adds	r3, #105	; 0x69
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009478:	edc7 7a01 	vstr	s15, [r7, #4]
						break;
 800947c:	e005      	b.n	800948a <tocar_ecran+0xc6>
				for(i=0; i<8; i++){
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b07      	cmp	r3, #7
 8009488:	ddd9      	ble.n	800943e <tocar_ecran+0x7a>
					}
				}

				for(j=0; j<8; j++){
 800948a:	2300      	movs	r3, #0
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	e021      	b.n	80094d4 <tocar_ecran+0x110>
					if((TS_State.touchY[0]) >= (50*j) && (TS_State.touchY[0]) < (50*j+100)){
 8009490:	4b25      	ldr	r3, [pc, #148]	; (8009528 <tocar_ecran+0x164>)
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	4619      	mov	r1, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2232      	movs	r2, #50	; 0x32
 800949a:	fb02 f303 	mul.w	r3, r2, r3
 800949e:	4299      	cmp	r1, r3
 80094a0:	db15      	blt.n	80094ce <tocar_ecran+0x10a>
 80094a2:	4b21      	ldr	r3, [pc, #132]	; (8009528 <tocar_ecran+0x164>)
 80094a4:	88db      	ldrh	r3, [r3, #6]
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2232      	movs	r2, #50	; 0x32
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	3364      	adds	r3, #100	; 0x64
 80094b2:	4299      	cmp	r1, r3
 80094b4:	da0b      	bge.n	80094ce <tocar_ecran+0x10a>
						y = 50*j + 75;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2232      	movs	r2, #50	; 0x32
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	334b      	adds	r3, #75	; 0x4b
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094c8:	edc7 7a00 	vstr	s15, [r7]
						break;
 80094cc:	e005      	b.n	80094da <tocar_ecran+0x116>
				for(j=0; j<8; j++){
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b07      	cmp	r3, #7
 80094d8:	ddda      	ble.n	8009490 <tocar_ecran+0xcc>
					}
				}


				if(tabuleiro[i][j]==JOGADA_POSSIVEL){
 80094da:	4a15      	ldr	r2, [pc, #84]	; (8009530 <tocar_ecran+0x16c>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	441a      	add	r2, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b50      	cmp	r3, #80	; 0x50
 80094ec:	d116      	bne.n	800951c <tocar_ecran+0x158>
					imprime_jogada(x, y, i, j);
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	edd7 0a00 	vldr	s1, [r7]
 80094f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80094fa:	f7fe fecd 	bl	8008298 <imprime_jogada>
					vira_pecas(i, j);
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fca5 	bl	8008e50 <vira_pecas>
					ver_quem_joga++;
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <tocar_ecran+0x170>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	4a09      	ldr	r2, [pc, #36]	; (8009534 <tocar_ecran+0x170>)
 800950e:	6013      	str	r3, [r2, #0]
					limpa_possibilidades();
 8009510:	f7fe fffc 	bl	800850c <limpa_possibilidades>
					jogadas_possiveis();
 8009514:	f7ff f9c4 	bl	80088a0 <jogadas_possiveis>
					actualiza_pecas_tabuleiro();
 8009518:	f7fe ff16 	bl	8008348 <actualiza_pecas_tabuleiro>
				}

		}
	}
}
 800951c:	bf00      	nop
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	bd90      	pop	{r4, r7, pc}
 8009524:	20000314 	.word	0x20000314
 8009528:	200006cc 	.word	0x200006cc
 800952c:	cccccccd 	.word	0xcccccccd
 8009530:	2000058c 	.word	0x2000058c
 8009534:	20000070 	.word	0x20000070

08009538 <sem_mais_jogadas_possiveis>:


int sem_mais_jogadas_possiveis(){
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
	int i = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]
	int conta_possiveis = 1;
 8009546:	2301      	movs	r3, #1
 8009548:	607b      	str	r3, [r7, #4]

	for (i = 0; i < 8; i++){
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	e018      	b.n	8009582 <sem_mais_jogadas_possiveis+0x4a>
		for (j = 0; j < 8; j++){
 8009550:	2300      	movs	r3, #0
 8009552:	60bb      	str	r3, [r7, #8]
 8009554:	e00f      	b.n	8009576 <sem_mais_jogadas_possiveis+0x3e>
			if(tabuleiro[i][j] == JOGADA_POSSIVEL){
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <sem_mais_jogadas_possiveis+0x60>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	441a      	add	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b50      	cmp	r3, #80	; 0x50
 8009568:	d102      	bne.n	8009570 <sem_mais_jogadas_possiveis+0x38>
				conta_possiveis++;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3301      	adds	r3, #1
 800956e:	607b      	str	r3, [r7, #4]
		for (j = 0; j < 8; j++){
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	3301      	adds	r3, #1
 8009574:	60bb      	str	r3, [r7, #8]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b07      	cmp	r3, #7
 800957a:	ddec      	ble.n	8009556 <sem_mais_jogadas_possiveis+0x1e>
	for (i = 0; i < 8; i++){
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b07      	cmp	r3, #7
 8009586:	dde3      	ble.n	8009550 <sem_mais_jogadas_possiveis+0x18>
			}
		}
	}
	return conta_possiveis-1;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3b01      	subs	r3, #1
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	2000058c 	.word	0x2000058c

0800959c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800959c:	b590      	push	{r4, r7, lr}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int i = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
int j = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	603b      	str	r3, [r7, #0]

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80095aa:	f7fe fb13 	bl	8007bd4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80095ae:	f7fe fb31 	bl	8007c14 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80095b2:	f7f9 f94f 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80095b6:	f000 f8b1 	bl	800971c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80095ba:	f000 fc01 	bl	8009dc0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80095be:	f000 f99b 	bl	80098f8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80095c2:	f000 fbaf 	bl	8009d24 <MX_FMC_Init>
  MX_LTDC_Init();
 80095c6:	f000 fac3 	bl	8009b50 <MX_LTDC_Init>
  MX_ADC1_Init();
 80095ca:	f000 f941 	bl	8009850 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 80095ce:	f000 f9cb 	bl	8009968 <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 80095d2:	f000 fb6f 	bl	8009cb4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80095d6:	484c      	ldr	r0, [pc, #304]	; (8009708 <main+0x16c>)
 80095d8:	f7fd ff4a 	bl	8007470 <HAL_TIM_Base_Start_IT>
  LCD_Config();
 80095dc:	f000 fc7a 	bl	8009ed4 <LCD_Config>
  BSP_LED_Init(LED_GREEN);
 80095e0:	2001      	movs	r0, #1
 80095e2:	f7f7 fb8b 	bl	8000cfc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80095e6:	2000      	movs	r0, #0
 80095e8:	f7f7 fb88 	bl	8000cfc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80095ec:	2100      	movs	r1, #0
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7f7 fbce 	bl	8000d90 <BSP_PB_Init>
//start do adc
  HAL_ADC_Start(&hadc1);
 80095f4:	4845      	ldr	r0, [pc, #276]	; (800970c <main+0x170>)
 80095f6:	f7f9 f9f1 	bl	80029dc <HAL_ADC_Start>


  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80095fa:	f7f7 ff87 	bl	800150c <BSP_LCD_GetXSize>
 80095fe:	4603      	mov	r3, r0
 8009600:	b29c      	uxth	r4, r3
 8009602:	f7f7 ff8f 	bl	8001524 <BSP_LCD_GetYSize>
 8009606:	4603      	mov	r3, r0
 8009608:	b29b      	uxth	r3, r3
 800960a:	4619      	mov	r1, r3
 800960c:	4620      	mov	r0, r4
 800960e:	f7f8 ff45 	bl	800249c <BSP_TS_Init>
  BSP_TS_ITConfig();
 8009612:	f7f8 ffa3 	bl	800255c <BSP_TS_ITConfig>

  jump:

  HAL_Delay(250);
 8009616:	20fa      	movs	r0, #250	; 0xfa
 8009618:	f7f9 f97a 	bl	8002910 <HAL_Delay>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	f7f7 ffec 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 8009624:	f7f7 ff72 	bl	800150c <BSP_LCD_GetXSize>
 8009628:	4603      	mov	r3, r0
 800962a:	b29c      	uxth	r4, r3
 800962c:	f7f7 ff7a 	bl	8001524 <BSP_LCD_GetYSize>
 8009630:	4603      	mov	r3, r0
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b32      	subs	r3, #50	; 0x32
 8009636:	b29b      	uxth	r3, r3
 8009638:	4622      	mov	r2, r4
 800963a:	2132      	movs	r1, #50	; 0x32
 800963c:	2000      	movs	r0, #0
 800963e:	f7f8 fac9 	bl	8001bd4 <BSP_LCD_FillRect>
  while(BSP_PB_GetState(BUTTON_WAKEUP)!=1){
 8009642:	e005      	b.n	8009650 <main+0xb4>
	  menu_inicial();
 8009644:	f7fe fba6 	bl	8007d94 <menu_inicial>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009648:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800964c:	f7f7 ffd6 	bl	80015fc <BSP_LCD_SetTextColor>
  while(BSP_PB_GetState(BUTTON_WAKEUP)!=1){
 8009650:	2000      	movs	r0, #0
 8009652:	f7f7 fbf1 	bl	8000e38 <BSP_PB_GetState>
 8009656:	4603      	mov	r3, r0
 8009658:	2b01      	cmp	r3, #1
 800965a:	d1f3      	bne.n	8009644 <main+0xa8>
  }
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	f7f7 ffcc 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 50, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-50);
 8009664:	f7f7 ff52 	bl	800150c <BSP_LCD_GetXSize>
 8009668:	4603      	mov	r3, r0
 800966a:	b29c      	uxth	r4, r3
 800966c:	f7f7 ff5a 	bl	8001524 <BSP_LCD_GetYSize>
 8009670:	4603      	mov	r3, r0
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b32      	subs	r3, #50	; 0x32
 8009676:	b29b      	uxth	r3, r3
 8009678:	4622      	mov	r2, r4
 800967a:	2132      	movs	r1, #50	; 0x32
 800967c:	2000      	movs	r0, #0
 800967e:	f7f8 faa9 	bl	8001bd4 <BSP_LCD_FillRect>

  ver_quem_joga = 1;
 8009682:	4b23      	ldr	r3, [pc, #140]	; (8009710 <main+0x174>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
  count = 0;
 8009688:	4b22      	ldr	r3, [pc, #136]	; (8009714 <main+0x178>)
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]

  imprime_tabuleiro();
 800968e:	f7fe fc93 	bl	8007fb8 <imprime_tabuleiro>

  for (i = 0; i < 8; i++){
 8009692:	2300      	movs	r3, #0
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	e013      	b.n	80096c0 <main+0x124>
	  for (j = 0; j < 8; j++){
 8009698:	2300      	movs	r3, #0
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	e00a      	b.n	80096b4 <main+0x118>
		  tabuleiro[i][j] = SEM_PECA;
 800969e:	4a1e      	ldr	r2, [pc, #120]	; (8009718 <main+0x17c>)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	441a      	add	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	4413      	add	r3, r2
 80096aa:	224e      	movs	r2, #78	; 0x4e
 80096ac:	701a      	strb	r2, [r3, #0]
	  for (j = 0; j < 8; j++){
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	ddf1      	ble.n	800969e <main+0x102>
  for (i = 0; i < 8; i++){
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3301      	adds	r3, #1
 80096be:	607b      	str	r3, [r7, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b07      	cmp	r3, #7
 80096c4:	dde8      	ble.n	8009698 <main+0xfc>
	  }
  }

  imprime_pecas_iniciais();
 80096c6:	f7fe fdad 	bl	8008224 <imprime_pecas_iniciais>
  jogadas_possiveis();
 80096ca:	f7ff f8e9 	bl	80088a0 <jogadas_possiveis>
  actualiza_pecas_tabuleiro();
 80096ce:	f7fe fe3b 	bl	8008348 <actualiza_pecas_tabuleiro>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mostra_temperatura();
 80096d2:	f7fe fd0d 	bl	80080f0 <mostra_temperatura>
	  mostra_tempo();
 80096d6:	f7fe fd2d 	bl	8008134 <mostra_tempo>
	  mostra_quem_joga();
 80096da:	f7fe fd4d 	bl	8008178 <mostra_quem_joga>
	  tocar_ecran();
 80096de:	f7ff fe71 	bl	80093c4 <tocar_ecran>

	  if(BSP_PB_GetState(BUTTON_WAKEUP)==1 && count>1){
 80096e2:	2000      	movs	r0, #0
 80096e4:	f7f7 fba8 	bl	8000e38 <BSP_PB_GetState>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d104      	bne.n	80096f8 <main+0x15c>
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <main+0x178>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	dd00      	ble.n	80096f8 <main+0x15c>
		  goto jump;
 80096f6:	e78e      	b.n	8009616 <main+0x7a>
	  }

	  if(!sem_mais_jogadas_possiveis()){
 80096f8:	f7ff ff1e 	bl	8009538 <sem_mais_jogadas_possiveis>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e7      	bne.n	80096d2 <main+0x136>
			  fim_do_jogo();
 8009702:	f7fe fb99 	bl	8007e38 <fim_do_jogo>
	  mostra_temperatura();
 8009706:	e7e4      	b.n	80096d2 <main+0x136>
 8009708:	200005d0 	.word	0x200005d0
 800970c:	20000544 	.word	0x20000544
 8009710:	20000070 	.word	0x20000070
 8009714:	2000030c 	.word	0x2000030c
 8009718:	2000058c 	.word	0x2000058c

0800971c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b0b8      	sub	sp, #224	; 0xe0
 8009720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009726:	2234      	movs	r2, #52	; 0x34
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f000 feea 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	605a      	str	r2, [r3, #4]
 800973a:	609a      	str	r2, [r3, #8]
 800973c:	60da      	str	r2, [r3, #12]
 800973e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009740:	f107 0308 	add.w	r3, r7, #8
 8009744:	2290      	movs	r2, #144	; 0x90
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fedb 	bl	800a504 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800974e:	4b3e      	ldr	r3, [pc, #248]	; (8009848 <SystemClock_Config+0x12c>)
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	4a3d      	ldr	r2, [pc, #244]	; (8009848 <SystemClock_Config+0x12c>)
 8009754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009758:	6413      	str	r3, [r2, #64]	; 0x40
 800975a:	4b3b      	ldr	r3, [pc, #236]	; (8009848 <SystemClock_Config+0x12c>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009762:	607b      	str	r3, [r7, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009766:	4b39      	ldr	r3, [pc, #228]	; (800984c <SystemClock_Config+0x130>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a38      	ldr	r2, [pc, #224]	; (800984c <SystemClock_Config+0x130>)
 800976c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	4b36      	ldr	r3, [pc, #216]	; (800984c <SystemClock_Config+0x130>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800977e:	2301      	movs	r3, #1
 8009780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800978c:	2302      	movs	r3, #2
 800978e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800979a:	2319      	movs	r3, #25
 800979c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 80097a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80097a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80097a8:	2302      	movs	r3, #2
 80097aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80097ae:	2302      	movs	r3, #2
 80097b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fc fd7d 	bl	80062b8 <HAL_RCC_OscConfig>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80097c4:	f000 fbe6 	bl	8009f94 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80097c8:	f7fc fd26 	bl	8006218 <HAL_PWREx_EnableOverDrive>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80097d2:	f000 fbdf 	bl	8009f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80097d6:	230f      	movs	r3, #15
 80097d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80097dc:	2302      	movs	r3, #2
 80097de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80097e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80097ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80097f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80097f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80097fc:	2106      	movs	r1, #6
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fc ffcc 	bl	800679c <HAL_RCC_ClockConfig>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800980a:	f000 fbc3 	bl	8009f94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800980e:	2308      	movs	r3, #8
 8009810:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009812:	23c0      	movs	r3, #192	; 0xc0
 8009814:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8009816:	2302      	movs	r3, #2
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800981a:	2302      	movs	r3, #2
 800981c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800981e:	2300      	movs	r3, #0
 8009820:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009822:	2301      	movs	r3, #1
 8009824:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009826:	2300      	movs	r3, #0
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd f94e 	bl	8006ad0 <HAL_RCCEx_PeriphCLKConfig>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <SystemClock_Config+0x122>
  {
    Error_Handler();
 800983a:	f000 fbab 	bl	8009f94 <Error_Handler>
  }
}
 800983e:	bf00      	nop
 8009840:	37e0      	adds	r7, #224	; 0xe0
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40023800 	.word	0x40023800
 800984c:	40007000 	.word	0x40007000

08009850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009856:	463b      	mov	r3, r7
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	609a      	str	r2, [r3, #8]
 8009860:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009862:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009864:	4a21      	ldr	r2, [pc, #132]	; (80098ec <MX_ADC1_Init+0x9c>)
 8009866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009868:	4b1f      	ldr	r3, [pc, #124]	; (80098e8 <MX_ADC1_Init+0x98>)
 800986a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800986e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009870:	4b1d      	ldr	r3, [pc, #116]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009872:	2200      	movs	r2, #0
 8009874:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009878:	2200      	movs	r2, #0
 800987a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800987c:	4b1a      	ldr	r3, [pc, #104]	; (80098e8 <MX_ADC1_Init+0x98>)
 800987e:	2201      	movs	r2, #1
 8009880:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009882:	4b19      	ldr	r3, [pc, #100]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800988a:	4b17      	ldr	r3, [pc, #92]	; (80098e8 <MX_ADC1_Init+0x98>)
 800988c:	2200      	movs	r2, #0
 800988e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009890:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009892:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <MX_ADC1_Init+0xa0>)
 8009894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009896:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <MX_ADC1_Init+0x98>)
 8009898:	2200      	movs	r2, #0
 800989a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800989c:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <MX_ADC1_Init+0x98>)
 800989e:	2201      	movs	r2, #1
 80098a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80098a2:	4b11      	ldr	r3, [pc, #68]	; (80098e8 <MX_ADC1_Init+0x98>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80098aa:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <MX_ADC1_Init+0x98>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80098b0:	480d      	ldr	r0, [pc, #52]	; (80098e8 <MX_ADC1_Init+0x98>)
 80098b2:	f7f9 f84f 	bl	8002954 <HAL_ADC_Init>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80098bc:	f000 fb6a 	bl	8009f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80098c0:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <MX_ADC1_Init+0xa4>)
 80098c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80098c4:	2301      	movs	r3, #1
 80098c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80098c8:	2303      	movs	r3, #3
 80098ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80098cc:	463b      	mov	r3, r7
 80098ce:	4619      	mov	r1, r3
 80098d0:	4805      	ldr	r0, [pc, #20]	; (80098e8 <MX_ADC1_Init+0x98>)
 80098d2:	f7f9 f951 	bl	8002b78 <HAL_ADC_ConfigChannel>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80098dc:	f000 fb5a 	bl	8009f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80098e0:	bf00      	nop
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000544 	.word	0x20000544
 80098ec:	40012000 	.word	0x40012000
 80098f0:	0f000001 	.word	0x0f000001
 80098f4:	10000012 	.word	0x10000012

080098f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80098fc:	4b18      	ldr	r3, [pc, #96]	; (8009960 <MX_DMA2D_Init+0x68>)
 80098fe:	4a19      	ldr	r2, [pc, #100]	; (8009964 <MX_DMA2D_Init+0x6c>)
 8009900:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8009902:	4b17      	ldr	r3, [pc, #92]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009904:	2200      	movs	r2, #0
 8009906:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009908:	4b15      	ldr	r3, [pc, #84]	; (8009960 <MX_DMA2D_Init+0x68>)
 800990a:	2200      	movs	r2, #0
 800990c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800990e:	4b14      	ldr	r3, [pc, #80]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009910:	2200      	movs	r2, #0
 8009912:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009916:	2200      	movs	r2, #0
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800991a:	4b11      	ldr	r3, [pc, #68]	; (8009960 <MX_DMA2D_Init+0x68>)
 800991c:	2200      	movs	r2, #0
 800991e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009920:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009922:	2200      	movs	r2, #0
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009928:	2200      	movs	r2, #0
 800992a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800992c:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <MX_DMA2D_Init+0x68>)
 800992e:	2200      	movs	r2, #0
 8009930:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <MX_DMA2D_Init+0x68>)
 8009934:	2200      	movs	r2, #0
 8009936:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009938:	4809      	ldr	r0, [pc, #36]	; (8009960 <MX_DMA2D_Init+0x68>)
 800993a:	f7f9 fe19 	bl	8003570 <HAL_DMA2D_Init>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009944:	f000 fb26 	bl	8009f94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009948:	2101      	movs	r1, #1
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <MX_DMA2D_Init+0x68>)
 800994c:	f7f9 ff7e 	bl	800384c <HAL_DMA2D_ConfigLayer>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8009956:	f000 fb1d 	bl	8009f94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800995a:	bf00      	nop
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20000674 	.word	0x20000674
 8009964:	4002b000 	.word	0x4002b000

08009968 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b0aa      	sub	sp, #168	; 0xa8
 800996c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800996e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	605a      	str	r2, [r3, #4]
 8009978:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800997a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800997e:	2224      	movs	r2, #36	; 0x24
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fdbe 	bl	800a504 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8009988:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	609a      	str	r2, [r3, #8]
 8009994:	60da      	str	r2, [r3, #12]
 8009996:	611a      	str	r2, [r3, #16]
 8009998:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800999a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800999e:	2234      	movs	r2, #52	; 0x34
 80099a0:	2100      	movs	r1, #0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fdae 	bl	800a504 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80099a8:	463b      	mov	r3, r7
 80099aa:	222c      	movs	r2, #44	; 0x2c
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fda8 	bl	800a504 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80099b4:	4b64      	ldr	r3, [pc, #400]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 80099b6:	4a65      	ldr	r2, [pc, #404]	; (8009b4c <MX_DSIHOST_DSI_Init+0x1e4>)
 80099b8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80099ba:	4b63      	ldr	r3, [pc, #396]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 80099bc:	2200      	movs	r2, #0
 80099be:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80099c0:	4b61      	ldr	r3, [pc, #388]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 80099c2:	2204      	movs	r2, #4
 80099c4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80099c6:	4b60      	ldr	r3, [pc, #384]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80099cc:	2314      	movs	r3, #20
 80099ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80099d8:	2300      	movs	r3, #0
 80099da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80099de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80099e2:	4619      	mov	r1, r3
 80099e4:	4858      	ldr	r0, [pc, #352]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 80099e6:	f7fa f8b3 	bl	8003b50 <HAL_DSI_Init>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80099f0:	f000 fad0 	bl	8009f94 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80099f4:	2301      	movs	r3, #1
 80099f6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8009a26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4846      	ldr	r0, [pc, #280]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009a2e:	f7fa fecb 	bl	80047c8 <HAL_DSI_ConfigHostTimeouts>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8009a38:	f000 faac 	bl	8009f94 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8009a3c:	231c      	movs	r3, #28
 8009a3e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8009a40:	2321      	movs	r3, #33	; 0x21
 8009a42:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8009a44:	230f      	movs	r3, #15
 8009a46:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8009a48:	2319      	movs	r3, #25
 8009a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8009a54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009a58:	4619      	mov	r1, r3
 8009a5a:	483b      	ldr	r0, [pc, #236]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009a5c:	f7fa fe4a 	bl	80046f4 <HAL_DSI_ConfigPhyTimer>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8009a66:	f000 fa95 	bl	8009f94 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8009a6a:	2104      	movs	r1, #4
 8009a6c:	4836      	ldr	r0, [pc, #216]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009a6e:	f7fa fe19 	bl	80046a4 <HAL_DSI_ConfigFlowControl>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8009a78:	f000 fa8c 	bl	8009f94 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8009a7c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009a80:	4831      	ldr	r0, [pc, #196]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009a82:	f7fb f85f 	bl	8004b44 <HAL_DSI_SetLowPowerRXFilter>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8009a8c:	f000 fa82 	bl	8009f94 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8009a90:	2100      	movs	r1, #0
 8009a92:	482d      	ldr	r0, [pc, #180]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009a94:	f7fa f9ea 	bl	8003e6c <HAL_DSI_ConfigErrorMonitor>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8009a9e:	f000 fa79 	bl	8009f94 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8009aba:	2300      	movs	r3, #0
 8009abc:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8009ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ada:	4619      	mov	r1, r3
 8009adc:	481a      	ldr	r0, [pc, #104]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009ade:	f7fa fd83 	bl	80045e8 <HAL_DSI_ConfigCommand>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8009ae8:	f000 fa54 	bl	8009f94 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8009af0:	2305      	movs	r3, #5
 8009af2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8009af4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8009af8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8009afa:	2310      	movs	r3, #16
 8009afc:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8009b02:	2304      	movs	r3, #4
 8009b04:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8009b06:	2302      	movs	r3, #2
 8009b08:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	480a      	ldr	r0, [pc, #40]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009b20:	f7fa fc88 	bl	8004434 <HAL_DSI_ConfigAdaptedCommandMode>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8009b2a:	f000 fa33 	bl	8009f94 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4805      	ldr	r0, [pc, #20]	; (8009b48 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009b32:	f7fa fa57 	bl	8003fe4 <HAL_DSI_SetGenericVCID>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8009b3c:	f000 fa2a 	bl	8009f94 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8009b40:	bf00      	nop
 8009b42:	37a8      	adds	r7, #168	; 0xa8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000480 	.word	0x20000480
 8009b4c:	40016c00 	.word	0x40016c00

08009b50 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b09a      	sub	sp, #104	; 0x68
 8009b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b5a:	2234      	movs	r2, #52	; 0x34
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fcd0 	bl	800a504 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8009b64:	463b      	mov	r3, r7
 8009b66:	2234      	movs	r2, #52	; 0x34
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fcca 	bl	800a504 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8009b70:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b72:	4a4f      	ldr	r2, [pc, #316]	; (8009cb0 <MX_LTDC_Init+0x160>)
 8009b74:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009b76:	4b4d      	ldr	r3, [pc, #308]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009b7c:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009b82:	4b4a      	ldr	r3, [pc, #296]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009b88:	4b48      	ldr	r3, [pc, #288]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8009b8e:	4b47      	ldr	r3, [pc, #284]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b90:	2207      	movs	r2, #7
 8009b92:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8009b94:	4b45      	ldr	r3, [pc, #276]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b96:	2203      	movs	r2, #3
 8009b98:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8009b9a:	4b44      	ldr	r3, [pc, #272]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009b9c:	220e      	movs	r2, #14
 8009b9e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8009ba0:	4b42      	ldr	r3, [pc, #264]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009ba2:	2205      	movs	r2, #5
 8009ba4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8009ba6:	4b41      	ldr	r3, [pc, #260]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009ba8:	f240 228e 	movw	r2, #654	; 0x28e
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8009bae:	4b3f      	ldr	r3, [pc, #252]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bb0:	f240 12e5 	movw	r2, #485	; 0x1e5
 8009bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8009bb6:	4b3d      	ldr	r3, [pc, #244]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bb8:	f44f 7225 	mov.w	r2, #660	; 0x294
 8009bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8009bbe:	4b3b      	ldr	r3, [pc, #236]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bc0:	f240 12e7 	movw	r2, #487	; 0x1e7
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8009bc6:	4b39      	ldr	r3, [pc, #228]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009bd6:	4b35      	ldr	r3, [pc, #212]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009bde:	4833      	ldr	r0, [pc, #204]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009be0:	f7fc f822 	bl	8005c28 <HAL_LTDC_Init>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8009bea:	f000 f9d3 	bl	8009f94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009c10:	2305      	movs	r3, #5
 8009c12:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009c36:	2200      	movs	r2, #0
 8009c38:	4619      	mov	r1, r3
 8009c3a:	481c      	ldr	r0, [pc, #112]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009c3c:	f7fc f8c4 	bl	8005dc8 <HAL_LTDC_ConfigLayer>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8009c46:	f000 f9a5 	bl	8009f94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009c6c:	2305      	movs	r3, #5
 8009c6e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009c8e:	463b      	mov	r3, r7
 8009c90:	2201      	movs	r2, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	4805      	ldr	r0, [pc, #20]	; (8009cac <MX_LTDC_Init+0x15c>)
 8009c96:	f7fc f897 	bl	8005dc8 <HAL_LTDC_ConfigLayer>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8009ca0:	f000 f978 	bl	8009f94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009ca4:	bf00      	nop
 8009ca6:	3768      	adds	r7, #104	; 0x68
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2000049c 	.word	0x2000049c
 8009cb0:	40016800 	.word	0x40016800

08009cb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009cba:	1d3b      	adds	r3, r7, #4
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009cc6:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <MX_TIM6_Init+0x6c>)
 8009cc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009ccc:	f242 720f 	movw	r2, #9999	; 0x270f
 8009cd0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8009cd8:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009cda:	f242 720f 	movw	r2, #9999	; 0x270f
 8009cde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009ce6:	480d      	ldr	r0, [pc, #52]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009ce8:	f7fd fb97 	bl	800741a <HAL_TIM_Base_Init>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009cf2:	f000 f94f 	bl	8009f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009cfe:	1d3b      	adds	r3, r7, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	4806      	ldr	r0, [pc, #24]	; (8009d1c <MX_TIM6_Init+0x68>)
 8009d04:	f7fd fdc6 	bl	8007894 <HAL_TIMEx_MasterConfigSynchronization>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8009d0e:	f000 f941 	bl	8009f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200005d0 	.word	0x200005d0
 8009d20:	40001000 	.word	0x40001000

08009d24 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8009d2a:	1d3b      	adds	r3, r7, #4
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	609a      	str	r2, [r3, #8]
 8009d34:	60da      	str	r2, [r3, #12]
 8009d36:	611a      	str	r2, [r3, #16]
 8009d38:	615a      	str	r2, [r3, #20]
 8009d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009d3c:	4b1e      	ldr	r3, [pc, #120]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d3e:	4a1f      	ldr	r2, [pc, #124]	; (8009dbc <MX_FMC_Init+0x98>)
 8009d40:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8009d42:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d44:	2201      	movs	r2, #1
 8009d46:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009d48:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d50:	2208      	movs	r2, #8
 8009d52:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009d54:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d56:	2220      	movs	r2, #32
 8009d58:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009d5a:	4b17      	ldr	r3, [pc, #92]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d5c:	2240      	movs	r2, #64	; 0x40
 8009d5e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8009d60:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d62:	2280      	movs	r2, #128	; 0x80
 8009d64:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8009d6c:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8009d72:	4b11      	ldr	r3, [pc, #68]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009d78:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <MX_FMC_Init+0x94>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8009d7e:	2310      	movs	r3, #16
 8009d80:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8009d82:	2310      	movs	r3, #16
 8009d84:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8009d86:	2310      	movs	r3, #16
 8009d88:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8009d8a:	2310      	movs	r3, #16
 8009d8c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8009d8e:	2310      	movs	r3, #16
 8009d90:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8009d92:	2310      	movs	r3, #16
 8009d94:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8009d96:	2310      	movs	r3, #16
 8009d98:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009d9a:	1d3b      	adds	r3, r7, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4806      	ldr	r0, [pc, #24]	; (8009db8 <MX_FMC_Init+0x94>)
 8009da0:	f7fd fabc 	bl	800731c <HAL_SDRAM_Init>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8009daa:	f000 f8f3 	bl	8009f94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009dae:	bf00      	nop
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	200006d8 	.word	0x200006d8
 8009dbc:	a0000140 	.word	0xa0000140

08009dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	; 0x38
 8009dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	609a      	str	r2, [r3, #8]
 8009dd2:	60da      	str	r2, [r3, #12]
 8009dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dd6:	4b3c      	ldr	r3, [pc, #240]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	4a3b      	ldr	r2, [pc, #236]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009ddc:	f043 0302 	orr.w	r3, r3, #2
 8009de0:	6313      	str	r3, [r2, #48]	; 0x30
 8009de2:	4b39      	ldr	r3, [pc, #228]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	623b      	str	r3, [r7, #32]
 8009dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009dee:	4b36      	ldr	r3, [pc, #216]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df2:	4a35      	ldr	r2, [pc, #212]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dfa:	4b33      	ldr	r3, [pc, #204]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e06:	4b30      	ldr	r3, [pc, #192]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	4a2f      	ldr	r2, [pc, #188]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e0c:	f043 0308 	orr.w	r3, r3, #8
 8009e10:	6313      	str	r3, [r2, #48]	; 0x30
 8009e12:	4b2d      	ldr	r3, [pc, #180]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	61bb      	str	r3, [r7, #24]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009e1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e22:	4a29      	ldr	r2, [pc, #164]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e28:	6313      	str	r3, [r2, #48]	; 0x30
 8009e2a:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3a:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e3c:	f043 0320 	orr.w	r3, r3, #32
 8009e40:	6313      	str	r3, [r2, #48]	; 0x30
 8009e42:	4b21      	ldr	r3, [pc, #132]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	613b      	str	r3, [r7, #16]
 8009e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009e4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e52:	4a1d      	ldr	r2, [pc, #116]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e58:	6313      	str	r3, [r2, #48]	; 0x30
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e66:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e6c:	f043 0310 	orr.w	r3, r3, #16
 8009e70:	6313      	str	r3, [r2, #48]	; 0x30
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	60bb      	str	r3, [r7, #8]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009e7e:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	4a11      	ldr	r2, [pc, #68]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e88:	6313      	str	r3, [r2, #48]	; 0x30
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <MX_GPIO_Init+0x108>)
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e92:	607b      	str	r3, [r7, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <MX_GPIO_Init+0x10c>)
 8009e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4809      	ldr	r0, [pc, #36]	; (8009ed0 <MX_GPIO_Init+0x110>)
 8009eac:	f7fa fe78 	bl	8004ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	2028      	movs	r0, #40	; 0x28
 8009eb6:	f7f9 f968 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009eba:	2028      	movs	r0, #40	; 0x28
 8009ebc:	f7f9 f981 	bl	80031c2 <HAL_NVIC_EnableIRQ>

}
 8009ec0:	bf00      	nop
 8009ec2:	3738      	adds	r7, #56	; 0x38
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	40023800 	.word	0x40023800
 8009ecc:	10110000 	.word	0x10110000
 8009ed0:	40022000 	.word	0x40022000

08009ed4 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8009ede:	f7f7 f990 	bl	8001202 <BSP_LCD_Init>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1fc      	bne.n	8009ee6 <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8009eec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	f7f7 fb23 	bl	800153c <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8009efa:	f7f7 fbcb 	bl	8001694 <BSP_LCD_Clear>

  /* Set LCD Example description */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8009efe:	481e      	ldr	r0, [pc, #120]	; (8009f78 <LCD_Config+0xa4>)
 8009f00:	f7f7 fb7c 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8009f04:	481d      	ldr	r0, [pc, #116]	; (8009f7c <LCD_Config+0xa8>)
 8009f06:	f7f7 fbab 	bl	8001660 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"Copyright (c) Laufeyson 2019", CENTER_MODE);
 8009f0a:	f7f7 fb0b 	bl	8001524 <BSP_LCD_GetYSize>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b14      	subs	r3, #20
 8009f14:	b299      	uxth	r1, r3
 8009f16:	2301      	movs	r3, #1
 8009f18:	4a19      	ldr	r2, [pc, #100]	; (8009f80 <LCD_Config+0xac>)
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f7f7 fc26 	bl	800176c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8009f20:	4818      	ldr	r0, [pc, #96]	; (8009f84 <LCD_Config+0xb0>)
 8009f22:	f7f7 fb6b 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 50);
 8009f26:	f7f7 faf1 	bl	800150c <BSP_LCD_GetXSize>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	2332      	movs	r3, #50	; 0x32
 8009f30:	2100      	movs	r1, #0
 8009f32:	2000      	movs	r0, #0
 8009f34:	f7f7 fe4e 	bl	8001bd4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	f7f7 fb5e 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8009f40:	4810      	ldr	r0, [pc, #64]	; (8009f84 <LCD_Config+0xb0>)
 8009f42:	f7f7 fb73 	bl	800162c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009f46:	4810      	ldr	r0, [pc, #64]	; (8009f88 <LCD_Config+0xb4>)
 8009f48:	f7f7 fb8a 	bl	8001660 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4a0f      	ldr	r2, [pc, #60]	; (8009f8c <LCD_Config+0xb8>)
 8009f50:	210a      	movs	r1, #10
 8009f52:	2000      	movs	r0, #0
 8009f54:	f7f7 fc0a 	bl	800176c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8009f58:	480d      	ldr	r0, [pc, #52]	; (8009f90 <LCD_Config+0xbc>)
 8009f5a:	f7f7 fb81 	bl	8001660 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009f5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009f62:	f7f7 fb4b 	bl	80015fc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009f66:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6a:	f7f7 fb5f 	bl	800162c <BSP_LCD_SetBackColor>
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	ff000080 	.word	0xff000080
 8009f7c:	20000054 	.word	0x20000054
 8009f80:	0800ae64 	.word	0x0800ae64
 8009f84:	ffffa500 	.word	0xffffa500
 8009f88:	2000003c 	.word	0x2000003c
 8009f8c:	0800ad38 	.word	0x0800ad38
 8009f90:	2000004c 	.word	0x2000004c

08009f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009f98:	bf00      	nop
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
	...

08009fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	4a0e      	ldr	r2, [pc, #56]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fbe:	607b      	str	r3, [r7, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fc2:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc6:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <HAL_MspInit+0x44>)
 8009fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40023800 	.word	0x40023800

08009fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a0a      	ldr	r2, [pc, #40]	; (800a024 <HAL_ADC_MspInit+0x38>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d10b      	bne.n	800a016 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <HAL_ADC_MspInit+0x3c>)
 800a000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a002:	4a09      	ldr	r2, [pc, #36]	; (800a028 <HAL_ADC_MspInit+0x3c>)
 800a004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a008:	6453      	str	r3, [r2, #68]	; 0x44
 800a00a:	4b07      	ldr	r3, [pc, #28]	; (800a028 <HAL_ADC_MspInit+0x3c>)
 800a00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40012000 	.word	0x40012000
 800a028:	40023800 	.word	0x40023800

0800a02c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a0a      	ldr	r2, [pc, #40]	; (800a064 <HAL_DMA2D_MspInit+0x38>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d10b      	bne.n	800a056 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a03e:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <HAL_DMA2D_MspInit+0x3c>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	4a09      	ldr	r2, [pc, #36]	; (800a068 <HAL_DMA2D_MspInit+0x3c>)
 800a044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a048:	6313      	str	r3, [r2, #48]	; 0x30
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <HAL_DMA2D_MspInit+0x3c>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	4002b000 	.word	0x4002b000
 800a068:	40023800 	.word	0x40023800

0800a06c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	; 0x28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a074:	f107 0314 	add.w	r3, r7, #20
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	605a      	str	r2, [r3, #4]
 800a07e:	609a      	str	r2, [r3, #8]
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <HAL_DSI_MspInit+0x7c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d127      	bne.n	800a0de <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800a08e:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a092:	4a16      	ldr	r2, [pc, #88]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a094:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a098:	6453      	str	r3, [r2, #68]	; 0x44
 800a09a:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0aa:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a0ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a0b2:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <HAL_DSI_MspInit+0x80>)
 800a0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a0be:	2304      	movs	r3, #4
 800a0c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800a0ce:	230d      	movs	r3, #13
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800a0d2:	f107 0314 	add.w	r3, r7, #20
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4805      	ldr	r0, [pc, #20]	; (800a0f0 <HAL_DSI_MspInit+0x84>)
 800a0da:	f7fa fd61 	bl	8004ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800a0de:	bf00      	nop
 800a0e0:	3728      	adds	r7, #40	; 0x28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	40016c00 	.word	0x40016c00
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	40022400 	.word	0x40022400

0800a0f4 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a08      	ldr	r2, [pc, #32]	; (800a124 <HAL_DSI_MspDeInit+0x30>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d109      	bne.n	800a11a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800a106:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_DSI_MspDeInit+0x34>)
 800a108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a10a:	4a07      	ldr	r2, [pc, #28]	; (800a128 <HAL_DSI_MspDeInit+0x34>)
 800a10c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a110:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800a112:	2104      	movs	r1, #4
 800a114:	4805      	ldr	r0, [pc, #20]	; (800a12c <HAL_DSI_MspDeInit+0x38>)
 800a116:	f7fa feed 	bl	8004ef4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	40016c00 	.word	0x40016c00
 800a128:	40023800 	.word	0x40023800
 800a12c:	40022400 	.word	0x40022400

0800a130 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <HAL_LTDC_MspInit+0x38>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d10b      	bne.n	800a15a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a142:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <HAL_LTDC_MspInit+0x3c>)
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	4a09      	ldr	r2, [pc, #36]	; (800a16c <HAL_LTDC_MspInit+0x3c>)
 800a148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a14c:	6453      	str	r3, [r2, #68]	; 0x44
 800a14e:	4b07      	ldr	r3, [pc, #28]	; (800a16c <HAL_LTDC_MspInit+0x3c>)
 800a150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40016800 	.word	0x40016800
 800a16c:	40023800 	.word	0x40023800

0800a170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a0d      	ldr	r2, [pc, #52]	; (800a1b4 <HAL_TIM_Base_MspInit+0x44>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d113      	bne.n	800a1aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <HAL_TIM_Base_MspInit+0x48>)
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <HAL_TIM_Base_MspInit+0x48>)
 800a188:	f043 0310 	orr.w	r3, r3, #16
 800a18c:	6413      	str	r3, [r2, #64]	; 0x40
 800a18e:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <HAL_TIM_Base_MspInit+0x48>)
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	f003 0310 	and.w	r3, r3, #16
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	2036      	movs	r0, #54	; 0x36
 800a1a0:	f7f8 fff3 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a1a4:	2036      	movs	r0, #54	; 0x36
 800a1a6:	f7f9 f80c 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40001000 	.word	0x40001000
 800a1b8:	40023800 	.word	0x40023800

0800a1bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800a1c2:	1d3b      	adds	r3, r7, #4
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	609a      	str	r2, [r3, #8]
 800a1cc:	60da      	str	r2, [r3, #12]
 800a1ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a1d0:	4b43      	ldr	r3, [pc, #268]	; (800a2e0 <HAL_FMC_MspInit+0x124>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d17e      	bne.n	800a2d6 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800a1d8:	4b41      	ldr	r3, [pc, #260]	; (800a2e0 <HAL_FMC_MspInit+0x124>)
 800a1da:	2201      	movs	r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a1de:	4b41      	ldr	r3, [pc, #260]	; (800a2e4 <HAL_FMC_MspInit+0x128>)
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	4a40      	ldr	r2, [pc, #256]	; (800a2e4 <HAL_FMC_MspInit+0x128>)
 800a1e4:	f043 0301 	orr.w	r3, r3, #1
 800a1e8:	6393      	str	r3, [r2, #56]	; 0x38
 800a1ea:	4b3e      	ldr	r3, [pc, #248]	; (800a2e4 <HAL_FMC_MspInit+0x128>)
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a1f6:	2360      	movs	r3, #96	; 0x60
 800a1f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a202:	2303      	movs	r3, #3
 800a204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a206:	230c      	movs	r3, #12
 800a208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a20a:	1d3b      	adds	r3, r7, #4
 800a20c:	4619      	mov	r1, r3
 800a20e:	4836      	ldr	r0, [pc, #216]	; (800a2e8 <HAL_FMC_MspInit+0x12c>)
 800a210:	f7fa fcc6 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800a214:	f248 1337 	movw	r3, #33079	; 0x8137
 800a218:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a21a:	2302      	movs	r3, #2
 800a21c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a222:	2303      	movs	r3, #3
 800a224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a226:	230c      	movs	r3, #12
 800a228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a22a:	1d3b      	adds	r3, r7, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	482f      	ldr	r0, [pc, #188]	; (800a2ec <HAL_FMC_MspInit+0x130>)
 800a230:	f7fa fcb6 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800a234:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a238:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a23a:	2302      	movs	r3, #2
 800a23c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a242:	2303      	movs	r3, #3
 800a244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a246:	230c      	movs	r3, #12
 800a248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a24a:	1d3b      	adds	r3, r7, #4
 800a24c:	4619      	mov	r1, r3
 800a24e:	4828      	ldr	r0, [pc, #160]	; (800a2f0 <HAL_FMC_MspInit+0x134>)
 800a250:	f7fa fca6 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 800a254:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800a258:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a25a:	2302      	movs	r3, #2
 800a25c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a262:	2303      	movs	r3, #3
 800a264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a266:	230c      	movs	r3, #12
 800a268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a26a:	1d3b      	adds	r3, r7, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	4821      	ldr	r0, [pc, #132]	; (800a2f4 <HAL_FMC_MspInit+0x138>)
 800a270:	f7fa fc96 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a274:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a278:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a27a:	2302      	movs	r3, #2
 800a27c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a282:	2303      	movs	r3, #3
 800a284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a286:	230c      	movs	r3, #12
 800a288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a28a:	1d3b      	adds	r3, r7, #4
 800a28c:	4619      	mov	r1, r3
 800a28e:	481a      	ldr	r0, [pc, #104]	; (800a2f8 <HAL_FMC_MspInit+0x13c>)
 800a290:	f7fa fc86 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800a294:	f64f 7320 	movw	r3, #65312	; 0xff20
 800a298:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a29a:	2302      	movs	r3, #2
 800a29c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2a6:	230c      	movs	r3, #12
 800a2a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a2aa:	1d3b      	adds	r3, r7, #4
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4813      	ldr	r0, [pc, #76]	; (800a2fc <HAL_FMC_MspInit+0x140>)
 800a2b0:	f7fa fc76 	bl	8004ba0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 800a2b4:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a2b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	480c      	ldr	r0, [pc, #48]	; (800a300 <HAL_FMC_MspInit+0x144>)
 800a2d0:	f7fa fc66 	bl	8004ba0 <HAL_GPIO_Init>
 800a2d4:	e000      	b.n	800a2d8 <HAL_FMC_MspInit+0x11c>
    return;
 800a2d6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000318 	.word	0x20000318
 800a2e4:	40023800 	.word	0x40023800
 800a2e8:	40020400 	.word	0x40020400
 800a2ec:	40021800 	.word	0x40021800
 800a2f0:	40020c00 	.word	0x40020c00
 800a2f4:	40022000 	.word	0x40022000
 800a2f8:	40021400 	.word	0x40021400
 800a2fc:	40021c00 	.word	0x40021c00
 800a300:	40021000 	.word	0x40021000

0800a304 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a30c:	f7ff ff56 	bl	800a1bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a31c:	bf00      	nop
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a326:	b480      	push	{r7}
 800a328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a32a:	e7fe      	b.n	800a32a <HardFault_Handler+0x4>

0800a32c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a330:	e7fe      	b.n	800a330 <MemManage_Handler+0x4>

0800a332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a332:	b480      	push	{r7}
 800a334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a336:	e7fe      	b.n	800a336 <BusFault_Handler+0x4>

0800a338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a33c:	e7fe      	b.n	800a33c <UsageFault_Handler+0x4>

0800a33e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a33e:	b480      	push	{r7}
 800a340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a342:	bf00      	nop
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a350:	bf00      	nop
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a35a:	b480      	push	{r7}
 800a35c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a35e:	bf00      	nop
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a36c:	f7f8 fab0 	bl	80028d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a370:	bf00      	nop
 800a372:	bd80      	pop	{r7, pc}

0800a374 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a378:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a37c:	f7fa ff10 	bl	80051a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a380:	bf00      	nop
 800a382:	bd80      	pop	{r7, pc}

0800a384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a388:	4802      	ldr	r0, [pc, #8]	; (800a394 <TIM6_DAC_IRQHandler+0x10>)
 800a38a:	f7fd f89b 	bl	80074c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a38e:	bf00      	nop
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	200005d0 	.word	0x200005d0

0800a398 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a3a0:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <_sbrk+0x50>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <_sbrk+0x16>
		heap_end = &end;
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <_sbrk+0x50>)
 800a3aa:	4a10      	ldr	r2, [pc, #64]	; (800a3ec <_sbrk+0x54>)
 800a3ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <_sbrk+0x50>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <_sbrk+0x50>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	466a      	mov	r2, sp
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d907      	bls.n	800a3d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a3c2:	f000 f875 	bl	800a4b0 <__errno>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d0:	e006      	b.n	800a3e0 <_sbrk+0x48>
	}

	heap_end += incr;
 800a3d2:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <_sbrk+0x50>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	4a03      	ldr	r2, [pc, #12]	; (800a3e8 <_sbrk+0x50>)
 800a3dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a3de:	68fb      	ldr	r3, [r7, #12]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	2000031c 	.word	0x2000031c
 800a3ec:	20000710 	.word	0x20000710

0800a3f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a3f4:	4b15      	ldr	r3, [pc, #84]	; (800a44c <SystemInit+0x5c>)
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	4a14      	ldr	r2, [pc, #80]	; (800a44c <SystemInit+0x5c>)
 800a3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a404:	4b12      	ldr	r3, [pc, #72]	; (800a450 <SystemInit+0x60>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a11      	ldr	r2, [pc, #68]	; (800a450 <SystemInit+0x60>)
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <SystemInit+0x60>)
 800a412:	2200      	movs	r2, #0
 800a414:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a416:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <SystemInit+0x60>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	490d      	ldr	r1, [pc, #52]	; (800a450 <SystemInit+0x60>)
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <SystemInit+0x64>)
 800a41e:	4013      	ands	r3, r2
 800a420:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <SystemInit+0x60>)
 800a424:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <SystemInit+0x68>)
 800a426:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <SystemInit+0x60>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a08      	ldr	r2, [pc, #32]	; (800a450 <SystemInit+0x60>)
 800a42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a432:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <SystemInit+0x60>)
 800a436:	2200      	movs	r2, #0
 800a438:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a43a:	4b04      	ldr	r3, [pc, #16]	; (800a44c <SystemInit+0x5c>)
 800a43c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a440:	609a      	str	r2, [r3, #8]
#endif
}
 800a442:	bf00      	nop
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	e000ed00 	.word	0xe000ed00
 800a450:	40023800 	.word	0x40023800
 800a454:	fef6ffff 	.word	0xfef6ffff
 800a458:	24003010 	.word	0x24003010

0800a45c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a45c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a494 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a462:	e003      	b.n	800a46c <LoopCopyDataInit>

0800a464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a464:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a46a:	3104      	adds	r1, #4

0800a46c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a46c:	480b      	ldr	r0, [pc, #44]	; (800a49c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a474:	d3f6      	bcc.n	800a464 <CopyDataInit>
  ldr  r2, =_sbss
 800a476:	4a0b      	ldr	r2, [pc, #44]	; (800a4a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a478:	e002      	b.n	800a480 <LoopFillZerobss>

0800a47a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a47a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a47c:	f842 3b04 	str.w	r3, [r2], #4

0800a480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a484:	d3f9      	bcc.n	800a47a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a486:	f7ff ffb3 	bl	800a3f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a48a:	f000 f817 	bl	800a4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a48e:	f7ff f885 	bl	800959c <main>
  bx  lr    
 800a492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a494:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800a498:	0800ead8 	.word	0x0800ead8
  ldr  r0, =_sdata
 800a49c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a4a0:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 800a4a4:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 800a4a8:	20000710 	.word	0x20000710

0800a4ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a4ac:	e7fe      	b.n	800a4ac <ADC_IRQHandler>
	...

0800a4b0 <__errno>:
 800a4b0:	4b01      	ldr	r3, [pc, #4]	; (800a4b8 <__errno+0x8>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000078 	.word	0x20000078

0800a4bc <__libc_init_array>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	4e0d      	ldr	r6, [pc, #52]	; (800a4f4 <__libc_init_array+0x38>)
 800a4c0:	4c0d      	ldr	r4, [pc, #52]	; (800a4f8 <__libc_init_array+0x3c>)
 800a4c2:	1ba4      	subs	r4, r4, r6
 800a4c4:	10a4      	asrs	r4, r4, #2
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	42a5      	cmp	r5, r4
 800a4ca:	d109      	bne.n	800a4e0 <__libc_init_array+0x24>
 800a4cc:	4e0b      	ldr	r6, [pc, #44]	; (800a4fc <__libc_init_array+0x40>)
 800a4ce:	4c0c      	ldr	r4, [pc, #48]	; (800a500 <__libc_init_array+0x44>)
 800a4d0:	f000 fc26 	bl	800ad20 <_init>
 800a4d4:	1ba4      	subs	r4, r4, r6
 800a4d6:	10a4      	asrs	r4, r4, #2
 800a4d8:	2500      	movs	r5, #0
 800a4da:	42a5      	cmp	r5, r4
 800a4dc:	d105      	bne.n	800a4ea <__libc_init_array+0x2e>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4e4:	4798      	blx	r3
 800a4e6:	3501      	adds	r5, #1
 800a4e8:	e7ee      	b.n	800a4c8 <__libc_init_array+0xc>
 800a4ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4ee:	4798      	blx	r3
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	e7f2      	b.n	800a4da <__libc_init_array+0x1e>
 800a4f4:	0800ead0 	.word	0x0800ead0
 800a4f8:	0800ead0 	.word	0x0800ead0
 800a4fc:	0800ead0 	.word	0x0800ead0
 800a500:	0800ead4 	.word	0x0800ead4

0800a504 <memset>:
 800a504:	4402      	add	r2, r0
 800a506:	4603      	mov	r3, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <siprintf>:
 800a514:	b40e      	push	{r1, r2, r3}
 800a516:	b500      	push	{lr}
 800a518:	b09c      	sub	sp, #112	; 0x70
 800a51a:	ab1d      	add	r3, sp, #116	; 0x74
 800a51c:	9002      	str	r0, [sp, #8]
 800a51e:	9006      	str	r0, [sp, #24]
 800a520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a524:	4809      	ldr	r0, [pc, #36]	; (800a54c <siprintf+0x38>)
 800a526:	9107      	str	r1, [sp, #28]
 800a528:	9104      	str	r1, [sp, #16]
 800a52a:	4909      	ldr	r1, [pc, #36]	; (800a550 <siprintf+0x3c>)
 800a52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a530:	9105      	str	r1, [sp, #20]
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	a902      	add	r1, sp, #8
 800a538:	f000 f866 	bl	800a608 <_svfiprintf_r>
 800a53c:	9b02      	ldr	r3, [sp, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	b01c      	add	sp, #112	; 0x70
 800a544:	f85d eb04 	ldr.w	lr, [sp], #4
 800a548:	b003      	add	sp, #12
 800a54a:	4770      	bx	lr
 800a54c:	20000078 	.word	0x20000078
 800a550:	ffff0208 	.word	0xffff0208

0800a554 <__ssputs_r>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	688e      	ldr	r6, [r1, #8]
 800a55a:	429e      	cmp	r6, r3
 800a55c:	4682      	mov	sl, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	4690      	mov	r8, r2
 800a562:	4699      	mov	r9, r3
 800a564:	d837      	bhi.n	800a5d6 <__ssputs_r+0x82>
 800a566:	898a      	ldrh	r2, [r1, #12]
 800a568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a56c:	d031      	beq.n	800a5d2 <__ssputs_r+0x7e>
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	6909      	ldr	r1, [r1, #16]
 800a572:	1a6f      	subs	r7, r5, r1
 800a574:	6965      	ldr	r5, [r4, #20]
 800a576:	2302      	movs	r3, #2
 800a578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a57c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a580:	f109 0301 	add.w	r3, r9, #1
 800a584:	443b      	add	r3, r7
 800a586:	429d      	cmp	r5, r3
 800a588:	bf38      	it	cc
 800a58a:	461d      	movcc	r5, r3
 800a58c:	0553      	lsls	r3, r2, #21
 800a58e:	d530      	bpl.n	800a5f2 <__ssputs_r+0x9e>
 800a590:	4629      	mov	r1, r5
 800a592:	f000 fb2b 	bl	800abec <_malloc_r>
 800a596:	4606      	mov	r6, r0
 800a598:	b950      	cbnz	r0, 800a5b0 <__ssputs_r+0x5c>
 800a59a:	230c      	movs	r3, #12
 800a59c:	f8ca 3000 	str.w	r3, [sl]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b0:	463a      	mov	r2, r7
 800a5b2:	6921      	ldr	r1, [r4, #16]
 800a5b4:	f000 faa8 	bl	800ab08 <memcpy>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	6126      	str	r6, [r4, #16]
 800a5c6:	6165      	str	r5, [r4, #20]
 800a5c8:	443e      	add	r6, r7
 800a5ca:	1bed      	subs	r5, r5, r7
 800a5cc:	6026      	str	r6, [r4, #0]
 800a5ce:	60a5      	str	r5, [r4, #8]
 800a5d0:	464e      	mov	r6, r9
 800a5d2:	454e      	cmp	r6, r9
 800a5d4:	d900      	bls.n	800a5d8 <__ssputs_r+0x84>
 800a5d6:	464e      	mov	r6, r9
 800a5d8:	4632      	mov	r2, r6
 800a5da:	4641      	mov	r1, r8
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	f000 fa9e 	bl	800ab1e <memmove>
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	1b9b      	subs	r3, r3, r6
 800a5e6:	60a3      	str	r3, [r4, #8]
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	441e      	add	r6, r3
 800a5ec:	6026      	str	r6, [r4, #0]
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e7dc      	b.n	800a5ac <__ssputs_r+0x58>
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	f000 fb54 	bl	800aca0 <_realloc_r>
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1e2      	bne.n	800a5c4 <__ssputs_r+0x70>
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	4650      	mov	r0, sl
 800a602:	f000 faa5 	bl	800ab50 <_free_r>
 800a606:	e7c8      	b.n	800a59a <__ssputs_r+0x46>

0800a608 <_svfiprintf_r>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	461d      	mov	r5, r3
 800a60e:	898b      	ldrh	r3, [r1, #12]
 800a610:	061f      	lsls	r7, r3, #24
 800a612:	b09d      	sub	sp, #116	; 0x74
 800a614:	4680      	mov	r8, r0
 800a616:	460c      	mov	r4, r1
 800a618:	4616      	mov	r6, r2
 800a61a:	d50f      	bpl.n	800a63c <_svfiprintf_r+0x34>
 800a61c:	690b      	ldr	r3, [r1, #16]
 800a61e:	b96b      	cbnz	r3, 800a63c <_svfiprintf_r+0x34>
 800a620:	2140      	movs	r1, #64	; 0x40
 800a622:	f000 fae3 	bl	800abec <_malloc_r>
 800a626:	6020      	str	r0, [r4, #0]
 800a628:	6120      	str	r0, [r4, #16]
 800a62a:	b928      	cbnz	r0, 800a638 <_svfiprintf_r+0x30>
 800a62c:	230c      	movs	r3, #12
 800a62e:	f8c8 3000 	str.w	r3, [r8]
 800a632:	f04f 30ff 	mov.w	r0, #4294967295
 800a636:	e0c8      	b.n	800a7ca <_svfiprintf_r+0x1c2>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	6163      	str	r3, [r4, #20]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a646:	2330      	movs	r3, #48	; 0x30
 800a648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a64c:	9503      	str	r5, [sp, #12]
 800a64e:	f04f 0b01 	mov.w	fp, #1
 800a652:	4637      	mov	r7, r6
 800a654:	463d      	mov	r5, r7
 800a656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a65a:	b10b      	cbz	r3, 800a660 <_svfiprintf_r+0x58>
 800a65c:	2b25      	cmp	r3, #37	; 0x25
 800a65e:	d13e      	bne.n	800a6de <_svfiprintf_r+0xd6>
 800a660:	ebb7 0a06 	subs.w	sl, r7, r6
 800a664:	d00b      	beq.n	800a67e <_svfiprintf_r+0x76>
 800a666:	4653      	mov	r3, sl
 800a668:	4632      	mov	r2, r6
 800a66a:	4621      	mov	r1, r4
 800a66c:	4640      	mov	r0, r8
 800a66e:	f7ff ff71 	bl	800a554 <__ssputs_r>
 800a672:	3001      	adds	r0, #1
 800a674:	f000 80a4 	beq.w	800a7c0 <_svfiprintf_r+0x1b8>
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	4453      	add	r3, sl
 800a67c:	9309      	str	r3, [sp, #36]	; 0x24
 800a67e:	783b      	ldrb	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 809d 	beq.w	800a7c0 <_svfiprintf_r+0x1b8>
 800a686:	2300      	movs	r3, #0
 800a688:	f04f 32ff 	mov.w	r2, #4294967295
 800a68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	9307      	str	r3, [sp, #28]
 800a694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a698:	931a      	str	r3, [sp, #104]	; 0x68
 800a69a:	462f      	mov	r7, r5
 800a69c:	2205      	movs	r2, #5
 800a69e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a6a2:	4850      	ldr	r0, [pc, #320]	; (800a7e4 <_svfiprintf_r+0x1dc>)
 800a6a4:	f7f5 fdcc 	bl	8000240 <memchr>
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	b9d0      	cbnz	r0, 800a6e2 <_svfiprintf_r+0xda>
 800a6ac:	06d9      	lsls	r1, r3, #27
 800a6ae:	bf44      	itt	mi
 800a6b0:	2220      	movmi	r2, #32
 800a6b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6b6:	071a      	lsls	r2, r3, #28
 800a6b8:	bf44      	itt	mi
 800a6ba:	222b      	movmi	r2, #43	; 0x2b
 800a6bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6c0:	782a      	ldrb	r2, [r5, #0]
 800a6c2:	2a2a      	cmp	r2, #42	; 0x2a
 800a6c4:	d015      	beq.n	800a6f2 <_svfiprintf_r+0xea>
 800a6c6:	9a07      	ldr	r2, [sp, #28]
 800a6c8:	462f      	mov	r7, r5
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	250a      	movs	r5, #10
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d4:	3b30      	subs	r3, #48	; 0x30
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d94d      	bls.n	800a776 <_svfiprintf_r+0x16e>
 800a6da:	b1b8      	cbz	r0, 800a70c <_svfiprintf_r+0x104>
 800a6dc:	e00f      	b.n	800a6fe <_svfiprintf_r+0xf6>
 800a6de:	462f      	mov	r7, r5
 800a6e0:	e7b8      	b.n	800a654 <_svfiprintf_r+0x4c>
 800a6e2:	4a40      	ldr	r2, [pc, #256]	; (800a7e4 <_svfiprintf_r+0x1dc>)
 800a6e4:	1a80      	subs	r0, r0, r2
 800a6e6:	fa0b f000 	lsl.w	r0, fp, r0
 800a6ea:	4318      	orrs	r0, r3
 800a6ec:	9004      	str	r0, [sp, #16]
 800a6ee:	463d      	mov	r5, r7
 800a6f0:	e7d3      	b.n	800a69a <_svfiprintf_r+0x92>
 800a6f2:	9a03      	ldr	r2, [sp, #12]
 800a6f4:	1d11      	adds	r1, r2, #4
 800a6f6:	6812      	ldr	r2, [r2, #0]
 800a6f8:	9103      	str	r1, [sp, #12]
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	db01      	blt.n	800a702 <_svfiprintf_r+0xfa>
 800a6fe:	9207      	str	r2, [sp, #28]
 800a700:	e004      	b.n	800a70c <_svfiprintf_r+0x104>
 800a702:	4252      	negs	r2, r2
 800a704:	f043 0302 	orr.w	r3, r3, #2
 800a708:	9207      	str	r2, [sp, #28]
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	783b      	ldrb	r3, [r7, #0]
 800a70e:	2b2e      	cmp	r3, #46	; 0x2e
 800a710:	d10c      	bne.n	800a72c <_svfiprintf_r+0x124>
 800a712:	787b      	ldrb	r3, [r7, #1]
 800a714:	2b2a      	cmp	r3, #42	; 0x2a
 800a716:	d133      	bne.n	800a780 <_svfiprintf_r+0x178>
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	1d1a      	adds	r2, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	9203      	str	r2, [sp, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	bfb8      	it	lt
 800a724:	f04f 33ff 	movlt.w	r3, #4294967295
 800a728:	3702      	adds	r7, #2
 800a72a:	9305      	str	r3, [sp, #20]
 800a72c:	4d2e      	ldr	r5, [pc, #184]	; (800a7e8 <_svfiprintf_r+0x1e0>)
 800a72e:	7839      	ldrb	r1, [r7, #0]
 800a730:	2203      	movs	r2, #3
 800a732:	4628      	mov	r0, r5
 800a734:	f7f5 fd84 	bl	8000240 <memchr>
 800a738:	b138      	cbz	r0, 800a74a <_svfiprintf_r+0x142>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	1b40      	subs	r0, r0, r5
 800a73e:	fa03 f000 	lsl.w	r0, r3, r0
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	4303      	orrs	r3, r0
 800a746:	3701      	adds	r7, #1
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	7839      	ldrb	r1, [r7, #0]
 800a74c:	4827      	ldr	r0, [pc, #156]	; (800a7ec <_svfiprintf_r+0x1e4>)
 800a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a752:	2206      	movs	r2, #6
 800a754:	1c7e      	adds	r6, r7, #1
 800a756:	f7f5 fd73 	bl	8000240 <memchr>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d038      	beq.n	800a7d0 <_svfiprintf_r+0x1c8>
 800a75e:	4b24      	ldr	r3, [pc, #144]	; (800a7f0 <_svfiprintf_r+0x1e8>)
 800a760:	bb13      	cbnz	r3, 800a7a8 <_svfiprintf_r+0x1a0>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	3307      	adds	r3, #7
 800a766:	f023 0307 	bic.w	r3, r3, #7
 800a76a:	3308      	adds	r3, #8
 800a76c:	9303      	str	r3, [sp, #12]
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	444b      	add	r3, r9
 800a772:	9309      	str	r3, [sp, #36]	; 0x24
 800a774:	e76d      	b.n	800a652 <_svfiprintf_r+0x4a>
 800a776:	fb05 3202 	mla	r2, r5, r2, r3
 800a77a:	2001      	movs	r0, #1
 800a77c:	460f      	mov	r7, r1
 800a77e:	e7a6      	b.n	800a6ce <_svfiprintf_r+0xc6>
 800a780:	2300      	movs	r3, #0
 800a782:	3701      	adds	r7, #1
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	4619      	mov	r1, r3
 800a788:	250a      	movs	r5, #10
 800a78a:	4638      	mov	r0, r7
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_svfiprintf_r+0x196>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c8      	beq.n	800a72c <_svfiprintf_r+0x124>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c6      	b.n	800a72c <_svfiprintf_r+0x124>
 800a79e:	fb05 2101 	mla	r1, r5, r1, r2
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	e7f0      	b.n	800a78a <_svfiprintf_r+0x182>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <_svfiprintf_r+0x1ec>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7bc:	4681      	mov	r9, r0
 800a7be:	d1d6      	bne.n	800a76e <_svfiprintf_r+0x166>
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	065b      	lsls	r3, r3, #25
 800a7c4:	f53f af35 	bmi.w	800a632 <_svfiprintf_r+0x2a>
 800a7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ca:	b01d      	add	sp, #116	; 0x74
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	ab03      	add	r3, sp, #12
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <_svfiprintf_r+0x1ec>)
 800a7d8:	a904      	add	r1, sp, #16
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f000 f882 	bl	800a8e4 <_printf_i>
 800a7e0:	e7ea      	b.n	800a7b8 <_svfiprintf_r+0x1b0>
 800a7e2:	bf00      	nop
 800a7e4:	0800ea94 	.word	0x0800ea94
 800a7e8:	0800ea9a 	.word	0x0800ea9a
 800a7ec:	0800ea9e 	.word	0x0800ea9e
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	0800a555 	.word	0x0800a555

0800a7f8 <_printf_common>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	4691      	mov	r9, r2
 800a7fe:	461f      	mov	r7, r3
 800a800:	688a      	ldr	r2, [r1, #8]
 800a802:	690b      	ldr	r3, [r1, #16]
 800a804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a808:	4293      	cmp	r3, r2
 800a80a:	bfb8      	it	lt
 800a80c:	4613      	movlt	r3, r2
 800a80e:	f8c9 3000 	str.w	r3, [r9]
 800a812:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a816:	4606      	mov	r6, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	b112      	cbz	r2, 800a822 <_printf_common+0x2a>
 800a81c:	3301      	adds	r3, #1
 800a81e:	f8c9 3000 	str.w	r3, [r9]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	0699      	lsls	r1, r3, #26
 800a826:	bf42      	ittt	mi
 800a828:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a82c:	3302      	addmi	r3, #2
 800a82e:	f8c9 3000 	strmi.w	r3, [r9]
 800a832:	6825      	ldr	r5, [r4, #0]
 800a834:	f015 0506 	ands.w	r5, r5, #6
 800a838:	d107      	bne.n	800a84a <_printf_common+0x52>
 800a83a:	f104 0a19 	add.w	sl, r4, #25
 800a83e:	68e3      	ldr	r3, [r4, #12]
 800a840:	f8d9 2000 	ldr.w	r2, [r9]
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	42ab      	cmp	r3, r5
 800a848:	dc28      	bgt.n	800a89c <_printf_common+0xa4>
 800a84a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	3300      	adds	r3, #0
 800a852:	bf18      	it	ne
 800a854:	2301      	movne	r3, #1
 800a856:	0692      	lsls	r2, r2, #26
 800a858:	d42d      	bmi.n	800a8b6 <_printf_common+0xbe>
 800a85a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a85e:	4639      	mov	r1, r7
 800a860:	4630      	mov	r0, r6
 800a862:	47c0      	blx	r8
 800a864:	3001      	adds	r0, #1
 800a866:	d020      	beq.n	800a8aa <_printf_common+0xb2>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	68e5      	ldr	r5, [r4, #12]
 800a86c:	f8d9 2000 	ldr.w	r2, [r9]
 800a870:	f003 0306 	and.w	r3, r3, #6
 800a874:	2b04      	cmp	r3, #4
 800a876:	bf08      	it	eq
 800a878:	1aad      	subeq	r5, r5, r2
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	bf0c      	ite	eq
 800a880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a884:	2500      	movne	r5, #0
 800a886:	4293      	cmp	r3, r2
 800a888:	bfc4      	itt	gt
 800a88a:	1a9b      	subgt	r3, r3, r2
 800a88c:	18ed      	addgt	r5, r5, r3
 800a88e:	f04f 0900 	mov.w	r9, #0
 800a892:	341a      	adds	r4, #26
 800a894:	454d      	cmp	r5, r9
 800a896:	d11a      	bne.n	800a8ce <_printf_common+0xd6>
 800a898:	2000      	movs	r0, #0
 800a89a:	e008      	b.n	800a8ae <_printf_common+0xb6>
 800a89c:	2301      	movs	r3, #1
 800a89e:	4652      	mov	r2, sl
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	47c0      	blx	r8
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d103      	bne.n	800a8b2 <_printf_common+0xba>
 800a8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b2:	3501      	adds	r5, #1
 800a8b4:	e7c3      	b.n	800a83e <_printf_common+0x46>
 800a8b6:	18e1      	adds	r1, r4, r3
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	2030      	movs	r0, #48	; 0x30
 800a8bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c0:	4422      	add	r2, r4
 800a8c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	e7c5      	b.n	800a85a <_printf_common+0x62>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	47c0      	blx	r8
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d0e6      	beq.n	800a8aa <_printf_common+0xb2>
 800a8dc:	f109 0901 	add.w	r9, r9, #1
 800a8e0:	e7d8      	b.n	800a894 <_printf_common+0x9c>
	...

0800a8e4 <_printf_i>:
 800a8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	7e09      	ldrb	r1, [r1, #24]
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	296e      	cmp	r1, #110	; 0x6e
 800a8f4:	4617      	mov	r7, r2
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8fc:	f000 80b3 	beq.w	800aa66 <_printf_i+0x182>
 800a900:	d822      	bhi.n	800a948 <_printf_i+0x64>
 800a902:	2963      	cmp	r1, #99	; 0x63
 800a904:	d036      	beq.n	800a974 <_printf_i+0x90>
 800a906:	d80a      	bhi.n	800a91e <_printf_i+0x3a>
 800a908:	2900      	cmp	r1, #0
 800a90a:	f000 80b9 	beq.w	800aa80 <_printf_i+0x19c>
 800a90e:	2958      	cmp	r1, #88	; 0x58
 800a910:	f000 8083 	beq.w	800aa1a <_printf_i+0x136>
 800a914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a918:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a91c:	e032      	b.n	800a984 <_printf_i+0xa0>
 800a91e:	2964      	cmp	r1, #100	; 0x64
 800a920:	d001      	beq.n	800a926 <_printf_i+0x42>
 800a922:	2969      	cmp	r1, #105	; 0x69
 800a924:	d1f6      	bne.n	800a914 <_printf_i+0x30>
 800a926:	6820      	ldr	r0, [r4, #0]
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	0605      	lsls	r5, r0, #24
 800a92c:	f103 0104 	add.w	r1, r3, #4
 800a930:	d52a      	bpl.n	800a988 <_printf_i+0xa4>
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	da03      	bge.n	800a942 <_printf_i+0x5e>
 800a93a:	222d      	movs	r2, #45	; 0x2d
 800a93c:	425b      	negs	r3, r3
 800a93e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a942:	486f      	ldr	r0, [pc, #444]	; (800ab00 <_printf_i+0x21c>)
 800a944:	220a      	movs	r2, #10
 800a946:	e039      	b.n	800a9bc <_printf_i+0xd8>
 800a948:	2973      	cmp	r1, #115	; 0x73
 800a94a:	f000 809d 	beq.w	800aa88 <_printf_i+0x1a4>
 800a94e:	d808      	bhi.n	800a962 <_printf_i+0x7e>
 800a950:	296f      	cmp	r1, #111	; 0x6f
 800a952:	d020      	beq.n	800a996 <_printf_i+0xb2>
 800a954:	2970      	cmp	r1, #112	; 0x70
 800a956:	d1dd      	bne.n	800a914 <_printf_i+0x30>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	f043 0320 	orr.w	r3, r3, #32
 800a95e:	6023      	str	r3, [r4, #0]
 800a960:	e003      	b.n	800a96a <_printf_i+0x86>
 800a962:	2975      	cmp	r1, #117	; 0x75
 800a964:	d017      	beq.n	800a996 <_printf_i+0xb2>
 800a966:	2978      	cmp	r1, #120	; 0x78
 800a968:	d1d4      	bne.n	800a914 <_printf_i+0x30>
 800a96a:	2378      	movs	r3, #120	; 0x78
 800a96c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a970:	4864      	ldr	r0, [pc, #400]	; (800ab04 <_printf_i+0x220>)
 800a972:	e055      	b.n	800aa20 <_printf_i+0x13c>
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	1d19      	adds	r1, r3, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6011      	str	r1, [r2, #0]
 800a97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a984:	2301      	movs	r3, #1
 800a986:	e08c      	b.n	800aaa2 <_printf_i+0x1be>
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6011      	str	r1, [r2, #0]
 800a98c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a990:	bf18      	it	ne
 800a992:	b21b      	sxthne	r3, r3
 800a994:	e7cf      	b.n	800a936 <_printf_i+0x52>
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	6825      	ldr	r5, [r4, #0]
 800a99a:	1d18      	adds	r0, r3, #4
 800a99c:	6010      	str	r0, [r2, #0]
 800a99e:	0628      	lsls	r0, r5, #24
 800a9a0:	d501      	bpl.n	800a9a6 <_printf_i+0xc2>
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	e002      	b.n	800a9ac <_printf_i+0xc8>
 800a9a6:	0668      	lsls	r0, r5, #25
 800a9a8:	d5fb      	bpl.n	800a9a2 <_printf_i+0xbe>
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	4854      	ldr	r0, [pc, #336]	; (800ab00 <_printf_i+0x21c>)
 800a9ae:	296f      	cmp	r1, #111	; 0x6f
 800a9b0:	bf14      	ite	ne
 800a9b2:	220a      	movne	r2, #10
 800a9b4:	2208      	moveq	r2, #8
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9bc:	6865      	ldr	r5, [r4, #4]
 800a9be:	60a5      	str	r5, [r4, #8]
 800a9c0:	2d00      	cmp	r5, #0
 800a9c2:	f2c0 8095 	blt.w	800aaf0 <_printf_i+0x20c>
 800a9c6:	6821      	ldr	r1, [r4, #0]
 800a9c8:	f021 0104 	bic.w	r1, r1, #4
 800a9cc:	6021      	str	r1, [r4, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d13d      	bne.n	800aa4e <_printf_i+0x16a>
 800a9d2:	2d00      	cmp	r5, #0
 800a9d4:	f040 808e 	bne.w	800aaf4 <_printf_i+0x210>
 800a9d8:	4665      	mov	r5, ip
 800a9da:	2a08      	cmp	r2, #8
 800a9dc:	d10b      	bne.n	800a9f6 <_printf_i+0x112>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	07db      	lsls	r3, r3, #31
 800a9e2:	d508      	bpl.n	800a9f6 <_printf_i+0x112>
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	6862      	ldr	r2, [r4, #4]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	bfde      	ittt	le
 800a9ec:	2330      	movle	r3, #48	; 0x30
 800a9ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9f6:	ebac 0305 	sub.w	r3, ip, r5
 800a9fa:	6123      	str	r3, [r4, #16]
 800a9fc:	f8cd 8000 	str.w	r8, [sp]
 800aa00:	463b      	mov	r3, r7
 800aa02:	aa03      	add	r2, sp, #12
 800aa04:	4621      	mov	r1, r4
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff fef6 	bl	800a7f8 <_printf_common>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d14d      	bne.n	800aaac <_printf_i+0x1c8>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	b005      	add	sp, #20
 800aa16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	4839      	ldr	r0, [pc, #228]	; (800ab00 <_printf_i+0x21c>)
 800aa1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa20:	6813      	ldr	r3, [r2, #0]
 800aa22:	6821      	ldr	r1, [r4, #0]
 800aa24:	1d1d      	adds	r5, r3, #4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6015      	str	r5, [r2, #0]
 800aa2a:	060a      	lsls	r2, r1, #24
 800aa2c:	d50b      	bpl.n	800aa46 <_printf_i+0x162>
 800aa2e:	07ca      	lsls	r2, r1, #31
 800aa30:	bf44      	itt	mi
 800aa32:	f041 0120 	orrmi.w	r1, r1, #32
 800aa36:	6021      	strmi	r1, [r4, #0]
 800aa38:	b91b      	cbnz	r3, 800aa42 <_printf_i+0x15e>
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	f022 0220 	bic.w	r2, r2, #32
 800aa40:	6022      	str	r2, [r4, #0]
 800aa42:	2210      	movs	r2, #16
 800aa44:	e7b7      	b.n	800a9b6 <_printf_i+0xd2>
 800aa46:	064d      	lsls	r5, r1, #25
 800aa48:	bf48      	it	mi
 800aa4a:	b29b      	uxthmi	r3, r3
 800aa4c:	e7ef      	b.n	800aa2e <_printf_i+0x14a>
 800aa4e:	4665      	mov	r5, ip
 800aa50:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa54:	fb02 3311 	mls	r3, r2, r1, r3
 800aa58:	5cc3      	ldrb	r3, [r0, r3]
 800aa5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aa5e:	460b      	mov	r3, r1
 800aa60:	2900      	cmp	r1, #0
 800aa62:	d1f5      	bne.n	800aa50 <_printf_i+0x16c>
 800aa64:	e7b9      	b.n	800a9da <_printf_i+0xf6>
 800aa66:	6813      	ldr	r3, [r2, #0]
 800aa68:	6825      	ldr	r5, [r4, #0]
 800aa6a:	6961      	ldr	r1, [r4, #20]
 800aa6c:	1d18      	adds	r0, r3, #4
 800aa6e:	6010      	str	r0, [r2, #0]
 800aa70:	0628      	lsls	r0, r5, #24
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	d501      	bpl.n	800aa7a <_printf_i+0x196>
 800aa76:	6019      	str	r1, [r3, #0]
 800aa78:	e002      	b.n	800aa80 <_printf_i+0x19c>
 800aa7a:	066a      	lsls	r2, r5, #25
 800aa7c:	d5fb      	bpl.n	800aa76 <_printf_i+0x192>
 800aa7e:	8019      	strh	r1, [r3, #0]
 800aa80:	2300      	movs	r3, #0
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	4665      	mov	r5, ip
 800aa86:	e7b9      	b.n	800a9fc <_printf_i+0x118>
 800aa88:	6813      	ldr	r3, [r2, #0]
 800aa8a:	1d19      	adds	r1, r3, #4
 800aa8c:	6011      	str	r1, [r2, #0]
 800aa8e:	681d      	ldr	r5, [r3, #0]
 800aa90:	6862      	ldr	r2, [r4, #4]
 800aa92:	2100      	movs	r1, #0
 800aa94:	4628      	mov	r0, r5
 800aa96:	f7f5 fbd3 	bl	8000240 <memchr>
 800aa9a:	b108      	cbz	r0, 800aaa0 <_printf_i+0x1bc>
 800aa9c:	1b40      	subs	r0, r0, r5
 800aa9e:	6060      	str	r0, [r4, #4]
 800aaa0:	6863      	ldr	r3, [r4, #4]
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaaa:	e7a7      	b.n	800a9fc <_printf_i+0x118>
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	462a      	mov	r2, r5
 800aab0:	4639      	mov	r1, r7
 800aab2:	4630      	mov	r0, r6
 800aab4:	47c0      	blx	r8
 800aab6:	3001      	adds	r0, #1
 800aab8:	d0aa      	beq.n	800aa10 <_printf_i+0x12c>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	079b      	lsls	r3, r3, #30
 800aabe:	d413      	bmi.n	800aae8 <_printf_i+0x204>
 800aac0:	68e0      	ldr	r0, [r4, #12]
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	4298      	cmp	r0, r3
 800aac6:	bfb8      	it	lt
 800aac8:	4618      	movlt	r0, r3
 800aaca:	e7a3      	b.n	800aa14 <_printf_i+0x130>
 800aacc:	2301      	movs	r3, #1
 800aace:	464a      	mov	r2, r9
 800aad0:	4639      	mov	r1, r7
 800aad2:	4630      	mov	r0, r6
 800aad4:	47c0      	blx	r8
 800aad6:	3001      	adds	r0, #1
 800aad8:	d09a      	beq.n	800aa10 <_printf_i+0x12c>
 800aada:	3501      	adds	r5, #1
 800aadc:	68e3      	ldr	r3, [r4, #12]
 800aade:	9a03      	ldr	r2, [sp, #12]
 800aae0:	1a9b      	subs	r3, r3, r2
 800aae2:	42ab      	cmp	r3, r5
 800aae4:	dcf2      	bgt.n	800aacc <_printf_i+0x1e8>
 800aae6:	e7eb      	b.n	800aac0 <_printf_i+0x1dc>
 800aae8:	2500      	movs	r5, #0
 800aaea:	f104 0919 	add.w	r9, r4, #25
 800aaee:	e7f5      	b.n	800aadc <_printf_i+0x1f8>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1ac      	bne.n	800aa4e <_printf_i+0x16a>
 800aaf4:	7803      	ldrb	r3, [r0, #0]
 800aaf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aafa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aafe:	e76c      	b.n	800a9da <_printf_i+0xf6>
 800ab00:	0800eaa5 	.word	0x0800eaa5
 800ab04:	0800eab6 	.word	0x0800eab6

0800ab08 <memcpy>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	1e43      	subs	r3, r0, #1
 800ab0c:	440a      	add	r2, r1
 800ab0e:	4291      	cmp	r1, r2
 800ab10:	d100      	bne.n	800ab14 <memcpy+0xc>
 800ab12:	bd10      	pop	{r4, pc}
 800ab14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1c:	e7f7      	b.n	800ab0e <memcpy+0x6>

0800ab1e <memmove>:
 800ab1e:	4288      	cmp	r0, r1
 800ab20:	b510      	push	{r4, lr}
 800ab22:	eb01 0302 	add.w	r3, r1, r2
 800ab26:	d807      	bhi.n	800ab38 <memmove+0x1a>
 800ab28:	1e42      	subs	r2, r0, #1
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d00a      	beq.n	800ab44 <memmove+0x26>
 800ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab32:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab36:	e7f8      	b.n	800ab2a <memmove+0xc>
 800ab38:	4283      	cmp	r3, r0
 800ab3a:	d9f5      	bls.n	800ab28 <memmove+0xa>
 800ab3c:	1881      	adds	r1, r0, r2
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	42d3      	cmn	r3, r2
 800ab42:	d100      	bne.n	800ab46 <memmove+0x28>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab4e:	e7f7      	b.n	800ab40 <memmove+0x22>

0800ab50 <_free_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d045      	beq.n	800abe4 <_free_r+0x94>
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f0c      	subs	r4, r1, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	18e4      	addlt	r4, r4, r3
 800ab64:	f000 f8d2 	bl	800ad0c <__malloc_lock>
 800ab68:	4a1f      	ldr	r2, [pc, #124]	; (800abe8 <_free_r+0x98>)
 800ab6a:	6813      	ldr	r3, [r2, #0]
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	b933      	cbnz	r3, 800ab7e <_free_r+0x2e>
 800ab70:	6063      	str	r3, [r4, #4]
 800ab72:	6014      	str	r4, [r2, #0]
 800ab74:	4628      	mov	r0, r5
 800ab76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab7a:	f000 b8c8 	b.w	800ad0e <__malloc_unlock>
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d90c      	bls.n	800ab9c <_free_r+0x4c>
 800ab82:	6821      	ldr	r1, [r4, #0]
 800ab84:	1862      	adds	r2, r4, r1
 800ab86:	4293      	cmp	r3, r2
 800ab88:	bf04      	itt	eq
 800ab8a:	681a      	ldreq	r2, [r3, #0]
 800ab8c:	685b      	ldreq	r3, [r3, #4]
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	bf04      	itt	eq
 800ab92:	1852      	addeq	r2, r2, r1
 800ab94:	6022      	streq	r2, [r4, #0]
 800ab96:	6004      	str	r4, [r0, #0]
 800ab98:	e7ec      	b.n	800ab74 <_free_r+0x24>
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	b10a      	cbz	r2, 800aba4 <_free_r+0x54>
 800aba0:	42a2      	cmp	r2, r4
 800aba2:	d9fa      	bls.n	800ab9a <_free_r+0x4a>
 800aba4:	6819      	ldr	r1, [r3, #0]
 800aba6:	1858      	adds	r0, r3, r1
 800aba8:	42a0      	cmp	r0, r4
 800abaa:	d10b      	bne.n	800abc4 <_free_r+0x74>
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	4401      	add	r1, r0
 800abb0:	1858      	adds	r0, r3, r1
 800abb2:	4282      	cmp	r2, r0
 800abb4:	6019      	str	r1, [r3, #0]
 800abb6:	d1dd      	bne.n	800ab74 <_free_r+0x24>
 800abb8:	6810      	ldr	r0, [r2, #0]
 800abba:	6852      	ldr	r2, [r2, #4]
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	4401      	add	r1, r0
 800abc0:	6019      	str	r1, [r3, #0]
 800abc2:	e7d7      	b.n	800ab74 <_free_r+0x24>
 800abc4:	d902      	bls.n	800abcc <_free_r+0x7c>
 800abc6:	230c      	movs	r3, #12
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	e7d3      	b.n	800ab74 <_free_r+0x24>
 800abcc:	6820      	ldr	r0, [r4, #0]
 800abce:	1821      	adds	r1, r4, r0
 800abd0:	428a      	cmp	r2, r1
 800abd2:	bf04      	itt	eq
 800abd4:	6811      	ldreq	r1, [r2, #0]
 800abd6:	6852      	ldreq	r2, [r2, #4]
 800abd8:	6062      	str	r2, [r4, #4]
 800abda:	bf04      	itt	eq
 800abdc:	1809      	addeq	r1, r1, r0
 800abde:	6021      	streq	r1, [r4, #0]
 800abe0:	605c      	str	r4, [r3, #4]
 800abe2:	e7c7      	b.n	800ab74 <_free_r+0x24>
 800abe4:	bd38      	pop	{r3, r4, r5, pc}
 800abe6:	bf00      	nop
 800abe8:	20000320 	.word	0x20000320

0800abec <_malloc_r>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	1ccd      	adds	r5, r1, #3
 800abf0:	f025 0503 	bic.w	r5, r5, #3
 800abf4:	3508      	adds	r5, #8
 800abf6:	2d0c      	cmp	r5, #12
 800abf8:	bf38      	it	cc
 800abfa:	250c      	movcc	r5, #12
 800abfc:	2d00      	cmp	r5, #0
 800abfe:	4606      	mov	r6, r0
 800ac00:	db01      	blt.n	800ac06 <_malloc_r+0x1a>
 800ac02:	42a9      	cmp	r1, r5
 800ac04:	d903      	bls.n	800ac0e <_malloc_r+0x22>
 800ac06:	230c      	movs	r3, #12
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	f000 f87d 	bl	800ad0c <__malloc_lock>
 800ac12:	4a21      	ldr	r2, [pc, #132]	; (800ac98 <_malloc_r+0xac>)
 800ac14:	6814      	ldr	r4, [r2, #0]
 800ac16:	4621      	mov	r1, r4
 800ac18:	b991      	cbnz	r1, 800ac40 <_malloc_r+0x54>
 800ac1a:	4c20      	ldr	r4, [pc, #128]	; (800ac9c <_malloc_r+0xb0>)
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	b91b      	cbnz	r3, 800ac28 <_malloc_r+0x3c>
 800ac20:	4630      	mov	r0, r6
 800ac22:	f000 f863 	bl	800acec <_sbrk_r>
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f85e 	bl	800acec <_sbrk_r>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d124      	bne.n	800ac7e <_malloc_r+0x92>
 800ac34:	230c      	movs	r3, #12
 800ac36:	6033      	str	r3, [r6, #0]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f868 	bl	800ad0e <__malloc_unlock>
 800ac3e:	e7e4      	b.n	800ac0a <_malloc_r+0x1e>
 800ac40:	680b      	ldr	r3, [r1, #0]
 800ac42:	1b5b      	subs	r3, r3, r5
 800ac44:	d418      	bmi.n	800ac78 <_malloc_r+0x8c>
 800ac46:	2b0b      	cmp	r3, #11
 800ac48:	d90f      	bls.n	800ac6a <_malloc_r+0x7e>
 800ac4a:	600b      	str	r3, [r1, #0]
 800ac4c:	50cd      	str	r5, [r1, r3]
 800ac4e:	18cc      	adds	r4, r1, r3
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 f85c 	bl	800ad0e <__malloc_unlock>
 800ac56:	f104 000b 	add.w	r0, r4, #11
 800ac5a:	1d23      	adds	r3, r4, #4
 800ac5c:	f020 0007 	bic.w	r0, r0, #7
 800ac60:	1ac3      	subs	r3, r0, r3
 800ac62:	d0d3      	beq.n	800ac0c <_malloc_r+0x20>
 800ac64:	425a      	negs	r2, r3
 800ac66:	50e2      	str	r2, [r4, r3]
 800ac68:	e7d0      	b.n	800ac0c <_malloc_r+0x20>
 800ac6a:	428c      	cmp	r4, r1
 800ac6c:	684b      	ldr	r3, [r1, #4]
 800ac6e:	bf16      	itet	ne
 800ac70:	6063      	strne	r3, [r4, #4]
 800ac72:	6013      	streq	r3, [r2, #0]
 800ac74:	460c      	movne	r4, r1
 800ac76:	e7eb      	b.n	800ac50 <_malloc_r+0x64>
 800ac78:	460c      	mov	r4, r1
 800ac7a:	6849      	ldr	r1, [r1, #4]
 800ac7c:	e7cc      	b.n	800ac18 <_malloc_r+0x2c>
 800ac7e:	1cc4      	adds	r4, r0, #3
 800ac80:	f024 0403 	bic.w	r4, r4, #3
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d005      	beq.n	800ac94 <_malloc_r+0xa8>
 800ac88:	1a21      	subs	r1, r4, r0
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 f82e 	bl	800acec <_sbrk_r>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d0cf      	beq.n	800ac34 <_malloc_r+0x48>
 800ac94:	6025      	str	r5, [r4, #0]
 800ac96:	e7db      	b.n	800ac50 <_malloc_r+0x64>
 800ac98:	20000320 	.word	0x20000320
 800ac9c:	20000324 	.word	0x20000324

0800aca0 <_realloc_r>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	4607      	mov	r7, r0
 800aca4:	4614      	mov	r4, r2
 800aca6:	460e      	mov	r6, r1
 800aca8:	b921      	cbnz	r1, 800acb4 <_realloc_r+0x14>
 800acaa:	4611      	mov	r1, r2
 800acac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acb0:	f7ff bf9c 	b.w	800abec <_malloc_r>
 800acb4:	b922      	cbnz	r2, 800acc0 <_realloc_r+0x20>
 800acb6:	f7ff ff4b 	bl	800ab50 <_free_r>
 800acba:	4625      	mov	r5, r4
 800acbc:	4628      	mov	r0, r5
 800acbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc0:	f000 f826 	bl	800ad10 <_malloc_usable_size_r>
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d20f      	bcs.n	800ace8 <_realloc_r+0x48>
 800acc8:	4621      	mov	r1, r4
 800acca:	4638      	mov	r0, r7
 800accc:	f7ff ff8e 	bl	800abec <_malloc_r>
 800acd0:	4605      	mov	r5, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0f2      	beq.n	800acbc <_realloc_r+0x1c>
 800acd6:	4631      	mov	r1, r6
 800acd8:	4622      	mov	r2, r4
 800acda:	f7ff ff15 	bl	800ab08 <memcpy>
 800acde:	4631      	mov	r1, r6
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff35 	bl	800ab50 <_free_r>
 800ace6:	e7e9      	b.n	800acbc <_realloc_r+0x1c>
 800ace8:	4635      	mov	r5, r6
 800acea:	e7e7      	b.n	800acbc <_realloc_r+0x1c>

0800acec <_sbrk_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4c06      	ldr	r4, [pc, #24]	; (800ad08 <_sbrk_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4605      	mov	r5, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	f7ff fb4e 	bl	800a398 <_sbrk>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_sbrk_r+0x1a>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_sbrk_r+0x1a>
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	2000070c 	.word	0x2000070c

0800ad0c <__malloc_lock>:
 800ad0c:	4770      	bx	lr

0800ad0e <__malloc_unlock>:
 800ad0e:	4770      	bx	lr

0800ad10 <_malloc_usable_size_r>:
 800ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad14:	1f18      	subs	r0, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfbc      	itt	lt
 800ad1a:	580b      	ldrlt	r3, [r1, r0]
 800ad1c:	18c0      	addlt	r0, r0, r3
 800ad1e:	4770      	bx	lr

0800ad20 <_init>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	bf00      	nop
 800ad24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad26:	bc08      	pop	{r3}
 800ad28:	469e      	mov	lr, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_fini>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr
