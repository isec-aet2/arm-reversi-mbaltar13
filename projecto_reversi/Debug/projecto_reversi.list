
projecto_reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc4  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa08  0800aa08  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa08  0800aa08  0001aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa10  0800aa10  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800aa18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200000a4  0800aabc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800aabc  00020618  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b01d  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031e3  00000000  00000000  0003b0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb99  00000000  00000000  00040c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a9f  00000000  00000000  0006f7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001216b8  00000000  00000000  00081258  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a2910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  001a298c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c2c 	.word	0x08007c2c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	08007c2c 	.word	0x08007c2c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005ea:	49be      	ldr	r1, [pc, #760]	; (80008e4 <OTM8009A_Init+0x304>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fedb 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80005f2:	49bd      	ldr	r1, [pc, #756]	; (80008e8 <OTM8009A_Init+0x308>)
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fed7 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80005fa:	49bc      	ldr	r1, [pc, #752]	; (80008ec <OTM8009A_Init+0x30c>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fed3 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000602:	49bb      	ldr	r1, [pc, #748]	; (80008f0 <OTM8009A_Init+0x310>)
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fecf 	bl	80013a8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800060a:	49b8      	ldr	r1, [pc, #736]	; (80008ec <OTM8009A_Init+0x30c>)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fecb 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000612:	49b8      	ldr	r1, [pc, #736]	; (80008f4 <OTM8009A_Init+0x314>)
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fec7 	bl	80013a8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 fa66 	bl	8000aec <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000620:	49b5      	ldr	r1, [pc, #724]	; (80008f8 <OTM8009A_Init+0x318>)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fec0 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000628:	49b4      	ldr	r1, [pc, #720]	; (80008fc <OTM8009A_Init+0x31c>)
 800062a:	2000      	movs	r0, #0
 800062c:	f000 febc 	bl	80013a8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fa5b 	bl	8000aec <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000636:	49b2      	ldr	r1, [pc, #712]	; (8000900 <OTM8009A_Init+0x320>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 feb5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800063e:	49b1      	ldr	r1, [pc, #708]	; (8000904 <OTM8009A_Init+0x324>)
 8000640:	2000      	movs	r0, #0
 8000642:	f000 feb1 	bl	80013a8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000646:	49b0      	ldr	r1, [pc, #704]	; (8000908 <OTM8009A_Init+0x328>)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fead 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800064e:	49af      	ldr	r1, [pc, #700]	; (800090c <OTM8009A_Init+0x32c>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fea9 	bl	80013a8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000656:	49ae      	ldr	r1, [pc, #696]	; (8000910 <OTM8009A_Init+0x330>)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fea5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800065e:	49ad      	ldr	r1, [pc, #692]	; (8000914 <OTM8009A_Init+0x334>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fea1 	bl	80013a8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000666:	499f      	ldr	r1, [pc, #636]	; (80008e4 <OTM8009A_Init+0x304>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fe9d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800066e:	49aa      	ldr	r1, [pc, #680]	; (8000918 <OTM8009A_Init+0x338>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fe99 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000676:	49a9      	ldr	r1, [pc, #676]	; (800091c <OTM8009A_Init+0x33c>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fe95 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800067e:	49a8      	ldr	r1, [pc, #672]	; (8000920 <OTM8009A_Init+0x340>)
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fe91 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000686:	49a7      	ldr	r1, [pc, #668]	; (8000924 <OTM8009A_Init+0x344>)
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fe8d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800068e:	49a6      	ldr	r1, [pc, #664]	; (8000928 <OTM8009A_Init+0x348>)
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fe89 	bl	80013a8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000696:	49a5      	ldr	r1, [pc, #660]	; (800092c <OTM8009A_Init+0x34c>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fe85 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800069e:	49a4      	ldr	r1, [pc, #656]	; (8000930 <OTM8009A_Init+0x350>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fe81 	bl	80013a8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <OTM8009A_Init+0x354>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fe7d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80006ae:	4997      	ldr	r1, [pc, #604]	; (800090c <OTM8009A_Init+0x32c>)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fe79 	bl	80013a8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80006b6:	498b      	ldr	r1, [pc, #556]	; (80008e4 <OTM8009A_Init+0x304>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fe75 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80006be:	499e      	ldr	r1, [pc, #632]	; (8000938 <OTM8009A_Init+0x358>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fe71 	bl	80013a8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80006c6:	499d      	ldr	r1, [pc, #628]	; (800093c <OTM8009A_Init+0x35c>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fe6d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80006ce:	499c      	ldr	r1, [pc, #624]	; (8000940 <OTM8009A_Init+0x360>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fe69 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80006d6:	499b      	ldr	r1, [pc, #620]	; (8000944 <OTM8009A_Init+0x364>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fe65 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80006de:	499a      	ldr	r1, [pc, #616]	; (8000948 <OTM8009A_Init+0x368>)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fe61 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80006e6:	4999      	ldr	r1, [pc, #612]	; (800094c <OTM8009A_Init+0x36c>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fe5d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80006ee:	4998      	ldr	r1, [pc, #608]	; (8000950 <OTM8009A_Init+0x370>)
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fe59 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80006f6:	4989      	ldr	r1, [pc, #548]	; (800091c <OTM8009A_Init+0x33c>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fe55 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80006fe:	4995      	ldr	r1, [pc, #596]	; (8000954 <OTM8009A_Init+0x374>)
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fe51 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000706:	4987      	ldr	r1, [pc, #540]	; (8000924 <OTM8009A_Init+0x344>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fe4d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800070e:	4992      	ldr	r1, [pc, #584]	; (8000958 <OTM8009A_Init+0x378>)
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fe49 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000716:	4991      	ldr	r1, [pc, #580]	; (800095c <OTM8009A_Init+0x37c>)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe45 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800071e:	4990      	ldr	r1, [pc, #576]	; (8000960 <OTM8009A_Init+0x380>)
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fe41 	bl	80013a8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000726:	4971      	ldr	r1, [pc, #452]	; (80008ec <OTM8009A_Init+0x30c>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fe3d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800072e:	498d      	ldr	r1, [pc, #564]	; (8000964 <OTM8009A_Init+0x384>)
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fe39 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000736:	498c      	ldr	r1, [pc, #560]	; (8000968 <OTM8009A_Init+0x388>)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fe35 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800073e:	498b      	ldr	r1, [pc, #556]	; (800096c <OTM8009A_Init+0x38c>)
 8000740:	200e      	movs	r0, #14
 8000742:	f000 fe31 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000746:	498a      	ldr	r1, [pc, #552]	; (8000970 <OTM8009A_Init+0x390>)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fe2d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800074e:	4989      	ldr	r1, [pc, #548]	; (8000974 <OTM8009A_Init+0x394>)
 8000750:	200e      	movs	r0, #14
 8000752:	f000 fe29 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000756:	4988      	ldr	r1, [pc, #544]	; (8000978 <OTM8009A_Init+0x398>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fe25 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800075e:	4987      	ldr	r1, [pc, #540]	; (800097c <OTM8009A_Init+0x39c>)
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fe21 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000766:	4986      	ldr	r1, [pc, #536]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fe1d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800076e:	4985      	ldr	r1, [pc, #532]	; (8000984 <OTM8009A_Init+0x3a4>)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fe19 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000776:	495d      	ldr	r1, [pc, #372]	; (80008ec <OTM8009A_Init+0x30c>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fe15 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800077e:	4982      	ldr	r1, [pc, #520]	; (8000988 <OTM8009A_Init+0x3a8>)
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fe11 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000786:	4981      	ldr	r1, [pc, #516]	; (800098c <OTM8009A_Init+0x3ac>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fe0d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800078e:	4980      	ldr	r1, [pc, #512]	; (8000990 <OTM8009A_Init+0x3b0>)
 8000790:	200f      	movs	r0, #15
 8000792:	f000 fe09 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000796:	4974      	ldr	r1, [pc, #464]	; (8000968 <OTM8009A_Init+0x388>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe05 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800079e:	497d      	ldr	r1, [pc, #500]	; (8000994 <OTM8009A_Init+0x3b4>)
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fe01 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80007a6:	4972      	ldr	r1, [pc, #456]	; (8000970 <OTM8009A_Init+0x390>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fdfd 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80007ae:	497a      	ldr	r1, [pc, #488]	; (8000998 <OTM8009A_Init+0x3b8>)
 80007b0:	200a      	movs	r0, #10
 80007b2:	f000 fdf9 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80007b6:	4970      	ldr	r1, [pc, #448]	; (8000978 <OTM8009A_Init+0x398>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fdf5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80007be:	4977      	ldr	r1, [pc, #476]	; (800099c <OTM8009A_Init+0x3bc>)
 80007c0:	200f      	movs	r0, #15
 80007c2:	f000 fdf1 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80007c6:	496e      	ldr	r1, [pc, #440]	; (8000980 <OTM8009A_Init+0x3a0>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fded 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80007ce:	4974      	ldr	r1, [pc, #464]	; (80009a0 <OTM8009A_Init+0x3c0>)
 80007d0:	200f      	movs	r0, #15
 80007d2:	f000 fde9 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80007d6:	4973      	ldr	r1, [pc, #460]	; (80009a4 <OTM8009A_Init+0x3c4>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fde5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <OTM8009A_Init+0x3c8>)
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fde1 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80007e6:	4971      	ldr	r1, [pc, #452]	; (80009ac <OTM8009A_Init+0x3cc>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fddd 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80007ee:	4970      	ldr	r1, [pc, #448]	; (80009b0 <OTM8009A_Init+0x3d0>)
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fdd9 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007f6:	493d      	ldr	r1, [pc, #244]	; (80008ec <OTM8009A_Init+0x30c>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fdd5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80007fe:	496d      	ldr	r1, [pc, #436]	; (80009b4 <OTM8009A_Init+0x3d4>)
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fdd1 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000806:	4961      	ldr	r1, [pc, #388]	; (800098c <OTM8009A_Init+0x3ac>)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fdcd 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800080e:	496a      	ldr	r1, [pc, #424]	; (80009b8 <OTM8009A_Init+0x3d8>)
 8000810:	200f      	movs	r0, #15
 8000812:	f000 fdc9 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000816:	4954      	ldr	r1, [pc, #336]	; (8000968 <OTM8009A_Init+0x388>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fdc5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800081e:	4967      	ldr	r1, [pc, #412]	; (80009bc <OTM8009A_Init+0x3dc>)
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fdc1 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000826:	4952      	ldr	r1, [pc, #328]	; (8000970 <OTM8009A_Init+0x390>)
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fdbd 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800082e:	4964      	ldr	r1, [pc, #400]	; (80009c0 <OTM8009A_Init+0x3e0>)
 8000830:	200a      	movs	r0, #10
 8000832:	f000 fdb9 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000836:	4950      	ldr	r1, [pc, #320]	; (8000978 <OTM8009A_Init+0x398>)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fdb5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800083e:	4961      	ldr	r1, [pc, #388]	; (80009c4 <OTM8009A_Init+0x3e4>)
 8000840:	200f      	movs	r0, #15
 8000842:	f000 fdb1 	bl	80013a8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000846:	494e      	ldr	r1, [pc, #312]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fdad 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800084e:	495e      	ldr	r1, [pc, #376]	; (80009c8 <OTM8009A_Init+0x3e8>)
 8000850:	200f      	movs	r0, #15
 8000852:	f000 fda9 	bl	80013a8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000856:	4931      	ldr	r1, [pc, #196]	; (800091c <OTM8009A_Init+0x33c>)
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fda5 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800085e:	495b      	ldr	r1, [pc, #364]	; (80009cc <OTM8009A_Init+0x3ec>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fda1 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000866:	495a      	ldr	r1, [pc, #360]	; (80009d0 <OTM8009A_Init+0x3f0>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 fd9d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800086e:	4959      	ldr	r1, [pc, #356]	; (80009d4 <OTM8009A_Init+0x3f4>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fd99 	bl	80013a8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000876:	4958      	ldr	r1, [pc, #352]	; (80009d8 <OTM8009A_Init+0x3f8>)
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fd95 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800087e:	4957      	ldr	r1, [pc, #348]	; (80009dc <OTM8009A_Init+0x3fc>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fd91 	bl	80013a8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000886:	4917      	ldr	r1, [pc, #92]	; (80008e4 <OTM8009A_Init+0x304>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fd8d 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800088e:	4954      	ldr	r1, [pc, #336]	; (80009e0 <OTM8009A_Init+0x400>)
 8000890:	2003      	movs	r0, #3
 8000892:	f000 fd89 	bl	80013a8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000896:	4913      	ldr	r1, [pc, #76]	; (80008e4 <OTM8009A_Init+0x304>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fd85 	bl	80013a8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800089e:	4911      	ldr	r1, [pc, #68]	; (80008e4 <OTM8009A_Init+0x304>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fd81 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80008a6:	494f      	ldr	r1, [pc, #316]	; (80009e4 <OTM8009A_Init+0x404>)
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fd7d 	bl	80013a8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <OTM8009A_Init+0x304>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fd79 	bl	80013a8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80008b6:	494c      	ldr	r1, [pc, #304]	; (80009e8 <OTM8009A_Init+0x408>)
 80008b8:	2010      	movs	r0, #16
 80008ba:	f000 fd75 	bl	80013a8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80008be:	494b      	ldr	r1, [pc, #300]	; (80009ec <OTM8009A_Init+0x40c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fd71 	bl	80013a8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 f910 	bl	8000aec <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8090 	beq.w	80009f4 <OTM8009A_Init+0x414>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d000      	beq.n	80008da <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 80008d8:	e091      	b.n	80009fe <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80008da:	4945      	ldr	r1, [pc, #276]	; (80009f0 <OTM8009A_Init+0x410>)
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fd63 	bl	80013a8 <DSI_IO_WriteCmd>
    break;
 80008e2:	e08c      	b.n	80009fe <OTM8009A_Init+0x41e>
 80008e4:	08007de4 	.word	0x08007de4
 80008e8:	08007c9c 	.word	0x08007c9c
 80008ec:	08007de8 	.word	0x08007de8
 80008f0:	08007ca0 	.word	0x08007ca0
 80008f4:	08007dec 	.word	0x08007dec
 80008f8:	08007df0 	.word	0x08007df0
 80008fc:	08007df4 	.word	0x08007df4
 8000900:	08007df8 	.word	0x08007df8
 8000904:	08007dfc 	.word	0x08007dfc
 8000908:	08007e00 	.word	0x08007e00
 800090c:	08007e04 	.word	0x08007e04
 8000910:	08007e08 	.word	0x08007e08
 8000914:	08007e0c 	.word	0x08007e0c
 8000918:	08007e10 	.word	0x08007e10
 800091c:	08007e14 	.word	0x08007e14
 8000920:	08007e18 	.word	0x08007e18
 8000924:	08007e1c 	.word	0x08007e1c
 8000928:	08007e20 	.word	0x08007e20
 800092c:	08007e24 	.word	0x08007e24
 8000930:	08007e28 	.word	0x08007e28
 8000934:	08007e2c 	.word	0x08007e2c
 8000938:	08007ccc 	.word	0x08007ccc
 800093c:	08007e30 	.word	0x08007e30
 8000940:	08007e34 	.word	0x08007e34
 8000944:	08007e38 	.word	0x08007e38
 8000948:	08007e3c 	.word	0x08007e3c
 800094c:	08007e40 	.word	0x08007e40
 8000950:	08007e44 	.word	0x08007e44
 8000954:	08007e48 	.word	0x08007e48
 8000958:	08007e4c 	.word	0x08007e4c
 800095c:	08007e50 	.word	0x08007e50
 8000960:	08007cd0 	.word	0x08007cd0
 8000964:	08007cd4 	.word	0x08007cd4
 8000968:	08007e54 	.word	0x08007e54
 800096c:	08007cdc 	.word	0x08007cdc
 8000970:	08007e58 	.word	0x08007e58
 8000974:	08007cec 	.word	0x08007cec
 8000978:	08007e5c 	.word	0x08007e5c
 800097c:	08007cfc 	.word	0x08007cfc
 8000980:	08007e60 	.word	0x08007e60
 8000984:	08007e98 	.word	0x08007e98
 8000988:	08007d08 	.word	0x08007d08
 800098c:	08007e64 	.word	0x08007e64
 8000990:	08007d14 	.word	0x08007d14
 8000994:	08007d24 	.word	0x08007d24
 8000998:	08007d34 	.word	0x08007d34
 800099c:	08007d40 	.word	0x08007d40
 80009a0:	08007d50 	.word	0x08007d50
 80009a4:	08007e68 	.word	0x08007e68
 80009a8:	08007d60 	.word	0x08007d60
 80009ac:	08007e6c 	.word	0x08007e6c
 80009b0:	08007d6c 	.word	0x08007d6c
 80009b4:	08007d78 	.word	0x08007d78
 80009b8:	08007d84 	.word	0x08007d84
 80009bc:	08007d94 	.word	0x08007d94
 80009c0:	08007da4 	.word	0x08007da4
 80009c4:	08007db0 	.word	0x08007db0
 80009c8:	08007dc0 	.word	0x08007dc0
 80009cc:	08007e9c 	.word	0x08007e9c
 80009d0:	08007ea0 	.word	0x08007ea0
 80009d4:	08007ea4 	.word	0x08007ea4
 80009d8:	08007ea8 	.word	0x08007ea8
 80009dc:	08007eac 	.word	0x08007eac
 80009e0:	08007dd0 	.word	0x08007dd0
 80009e4:	08007ca4 	.word	0x08007ca4
 80009e8:	08007cb8 	.word	0x08007cb8
 80009ec:	08007e70 	.word	0x08007e70
 80009f0:	08007e74 	.word	0x08007e74
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80009f4:	491a      	ldr	r1, [pc, #104]	; (8000a60 <OTM8009A_Init+0x480>)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fcd6 	bl	80013a8 <DSI_IO_WriteCmd>
    break;
 80009fc:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10b      	bne.n	8000a1c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000a04:	4917      	ldr	r1, [pc, #92]	; (8000a64 <OTM8009A_Init+0x484>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fcce 	bl	80013a8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000a0c:	4916      	ldr	r1, [pc, #88]	; (8000a68 <OTM8009A_Init+0x488>)
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f000 fcca 	bl	80013a8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000a14:	4915      	ldr	r1, [pc, #84]	; (8000a6c <OTM8009A_Init+0x48c>)
 8000a16:	2004      	movs	r0, #4
 8000a18:	f000 fcc6 	bl	80013a8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000a1c:	4914      	ldr	r1, [pc, #80]	; (8000a70 <OTM8009A_Init+0x490>)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fcc2 	bl	80013a8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000a24:	4913      	ldr	r1, [pc, #76]	; (8000a74 <OTM8009A_Init+0x494>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fcbe 	bl	80013a8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000a2c:	4912      	ldr	r1, [pc, #72]	; (8000a78 <OTM8009A_Init+0x498>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fcba 	bl	80013a8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <OTM8009A_Init+0x49c>)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fcb6 	bl	80013a8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <OTM8009A_Init+0x4a0>)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fcb2 	bl	80013a8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <OTM8009A_Init+0x4a4>)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fcae 	bl	80013a8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <OTM8009A_Init+0x4a8>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fcaa 	bl	80013a8 <DSI_IO_WriteCmd>

  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08007e78 	.word	0x08007e78
 8000a64:	08007e7c 	.word	0x08007e7c
 8000a68:	08007dd4 	.word	0x08007dd4
 8000a6c:	08007ddc 	.word	0x08007ddc
 8000a70:	08007e80 	.word	0x08007e80
 8000a74:	08007e84 	.word	0x08007e84
 8000a78:	08007e88 	.word	0x08007e88
 8000a7c:	08007e8c 	.word	0x08007e8c
 8000a80:	08007e90 	.word	0x08007e90
 8000a84:	08007de4 	.word	0x08007de4
 8000a88:	08007e94 	.word	0x08007e94

08000a8c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <BSP_LED_Init+0x58>)
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <BSP_LED_Init+0x5c>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	f107 020c 	add.w	r2, r7, #12
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f978 	bl	8003dc8 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008

08000aec <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f001 f81f 	bl	8001b38 <HAL_Delay>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f804 	bl	8000b14 <BSP_LCD_InitEx>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b090      	sub	sp, #64	; 0x40
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000b1e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000b2c:	f000 f936 	bl	8000d9c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000b30:	f000 fc64 	bl	80013fc <LCD_IO_GetID>
 8000b34:	4603      	mov	r3, r0
 8000b36:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b3a:	2b11      	cmp	r3, #17
 8000b3c:	d001      	beq.n	8000b42 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e113      	b.n	8000d6a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000b42:	f000 fc63 	bl	800140c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8000b46:	4b8b      	ldr	r3, [pc, #556]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000b48:	4a8b      	ldr	r2, [pc, #556]	; (8000d78 <BSP_LCD_InitEx+0x264>)
 8000b4a:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000b4c:	4889      	ldr	r0, [pc, #548]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000b4e:	f002 fa2d 	bl	8002fac <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000b56:	2305      	movs	r3, #5
 8000b58:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000b5e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b64:	4b83      	ldr	r3, [pc, #524]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	4a83      	ldr	r2, [pc, #524]	; (8000d7c <BSP_LCD_InitEx+0x268>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0a9b      	lsrs	r3, r3, #10
 8000b76:	4a7f      	ldr	r2, [pc, #508]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000b78:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4619      	mov	r1, r3
 8000b80:	487c      	ldr	r0, [pc, #496]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000b82:	f002 f8f9 	bl	8002d78 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000b8c:	4b7c      	ldr	r3, [pc, #496]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000b8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b92:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <BSP_LCD_InitEx+0x270>)
 8000b96:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000b9e:	4b78      	ldr	r3, [pc, #480]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000ba0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000ba4:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000ba6:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <BSP_LCD_InitEx+0x270>)
 8000ba8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bac:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000bae:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8000bb4:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <BSP_LCD_InitEx+0x270>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000bca:	2322      	movs	r3, #34	; 0x22
 8000bcc:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000bce:	2322      	movs	r3, #34	; 0x22
 8000bd0:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000bda:	2205      	movs	r2, #5
 8000bdc:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000bde:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000be4:	4b68      	ldr	r3, [pc, #416]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000bf0:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000bf8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bfc:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000bfe:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000c04:	4a60      	ldr	r2, [pc, #384]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c0e:	fb02 f203 	mul.w	r2, r2, r3
 8000c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c18:	4a5b      	ldr	r2, [pc, #364]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c1a:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c20:	fb02 f203 	mul.w	r2, r2, r3
 8000c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	441a      	add	r2, r3
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	441a      	add	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c3e:	fb02 f203 	mul.w	r2, r2, r3
 8000c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c48:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000c4c:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c50:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000c52:	4a4d      	ldr	r2, [pc, #308]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000c58:	4a4b      	ldr	r2, [pc, #300]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000c5e:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000c64:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c6c:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c6e:	2210      	movs	r2, #16
 8000c70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c78:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000c80:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c88:	4b3f      	ldr	r3, [pc, #252]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c90:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000c98:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000ca0:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000ca8:	4937      	ldr	r1, [pc, #220]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000caa:	4832      	ldr	r0, [pc, #200]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000cac:	f002 fad6 	bl	800325c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cb6:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cc2:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	441a      	add	r2, r3
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cd4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	441a      	add	r2, r3
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	441a      	add	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <BSP_LCD_InitEx+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cf2:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <BSP_LCD_InitEx+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000cfa:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <BSP_LCD_InitEx+0x27c>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <BSP_LCD_InitEx+0x27c>)
 8000d04:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d08:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <BSP_LCD_InitEx+0x27c>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <BSP_LCD_InitEx+0x27c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d16:	481e      	ldr	r0, [pc, #120]	; (8000d90 <BSP_LCD_InitEx+0x27c>)
 8000d18:	f004 fa78 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d3c:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <BSP_LCD_InitEx+0x280>)
 8000d3e:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000d40:	4911      	ldr	r1, [pc, #68]	; (8000d88 <BSP_LCD_InitEx+0x274>)
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d44:	f003 fdb6 	bl	80048b4 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000d48:	4810      	ldr	r0, [pc, #64]	; (8000d8c <BSP_LCD_InitEx+0x278>)
 8000d4a:	f003 fb0b 	bl	8004364 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <BSP_LCD_InitEx+0x260>)
 8000d50:	f002 ff16 	bl	8003b80 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000d54:	f000 fcda 	bl	800170c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <BSP_LCD_InitEx+0x284>)
 8000d5a:	f000 f901 	bl	8000f60 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4619      	mov	r1, r3
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fc3c 	bl	80005e0 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3740      	adds	r7, #64	; 0x40
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000037c 	.word	0x2000037c
 8000d78:	40016c00 	.word	0x40016c00
 8000d7c:	43215e57 	.word	0x43215e57
 8000d80:	20000028 	.word	0x20000028
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	200000c0 	.word	0x200000c0
 8000d8c:	200002d4 	.word	0x200002d4
 8000d90:	20000148 	.word	0x20000148
 8000d94:	40016800 	.word	0x40016800
 8000d98:	20000010 	.word	0x20000010

08000d9c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <BSP_LCD_Reset+0x68>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <BSP_LCD_Reset+0x68>)
 8000da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <BSP_LCD_Reset+0x68>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbe:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <BSP_LCD_Reset+0x6c>)
 8000dd2:	f002 fff9 	bl	8003dc8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <BSP_LCD_Reset+0x6c>)
 8000dde:	f003 faa7 	bl	8004330 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000de2:	2014      	movs	r0, #20
 8000de4:	f000 fea8 	bl	8001b38 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <BSP_LCD_Reset+0x6c>)
 8000df0:	f003 fa9e 	bl	8004330 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f000 fe9f 	bl	8001b38 <HAL_Delay>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40022400 	.word	0x40022400

08000e0c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <BSP_LCD_GetXSize+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000028 	.word	0x20000028

08000e24 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <BSP_LCD_GetYSize+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000002c 	.word	0x2000002c

08000e3c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	; 0x40
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000e4c:	f7ff ffde 	bl	8000e0c <BSP_LCD_GetXSize>
 8000e50:	4603      	mov	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000e58:	f7ff ffe4 	bl	8000e24 <BSP_LCD_GetYSize>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000e8c:	f7ff ffbe 	bl	8000e0c <BSP_LCD_GetXSize>
 8000e90:	4603      	mov	r3, r0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000e94:	f7ff ffc6 	bl	8000e24 <BSP_LCD_GetYSize>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000ea6:	f003 fb2d 	bl	8004504 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3304      	adds	r3, #4
 8000eba:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	3308      	adds	r3, #8
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000ed2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	3740      	adds	r7, #64	; 0x40
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200002d4 	.word	0x200002d4
 8000ef4:	20000130 	.word	0x20000130
 8000ef8:	20000010 	.word	0x20000010

08000efc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <BSP_LCD_SetTextColor+0x28>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <BSP_LCD_SetTextColor+0x2c>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000012c 	.word	0x2000012c
 8000f28:	20000130 	.word	0x20000130

08000f2c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <BSP_LCD_SetBackColor+0x2c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4908      	ldr	r1, [pc, #32]	; (8000f5c <BSP_LCD_SetBackColor+0x30>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	3304      	adds	r3, #4
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000012c 	.word	0x2000012c
 8000f5c:	20000130 	.word	0x20000130

08000f60 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <BSP_LCD_SetFont+0x2c>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <BSP_LCD_SetFont+0x30>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	3308      	adds	r3, #8
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000012c 	.word	0x2000012c
 8000f90:	20000130 	.word	0x20000130

08000f94 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <BSP_LCD_Clear+0x48>)
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <BSP_LCD_Clear+0x48>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <BSP_LCD_Clear+0x4c>)
 8000fa6:	2134      	movs	r1, #52	; 0x34
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	335c      	adds	r3, #92	; 0x5c
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	f7ff ff2a 	bl	8000e0c <BSP_LCD_GetXSize>
 8000fb8:	4606      	mov	r6, r0
 8000fba:	f7ff ff33 	bl	8000e24 <BSP_LCD_GetYSize>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	4632      	mov	r2, r6
 8000fcc:	4629      	mov	r1, r5
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f000 fb64 	bl	800169c <LL_FillBuffer>
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	2000012c 	.word	0x2000012c
 8000fe0:	200002d4 	.word	0x200002d4

08000fe4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <BSP_LCD_DisplayChar+0x80>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	491b      	ldr	r1, [pc, #108]	; (8001068 <BSP_LCD_DisplayChar+0x84>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <BSP_LCD_DisplayChar+0x80>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4c14      	ldr	r4, [pc, #80]	; (8001068 <BSP_LCD_DisplayChar+0x84>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4423      	add	r3, r4
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001028:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <BSP_LCD_DisplayChar+0x80>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4c0d      	ldr	r4, [pc, #52]	; (8001068 <BSP_LCD_DisplayChar+0x84>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4423      	add	r3, r4
 800103c:	3308      	adds	r3, #8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	3307      	adds	r3, #7
 8001044:	2b00      	cmp	r3, #0
 8001046:	da00      	bge.n	800104a <BSP_LCD_DisplayChar+0x66>
 8001048:	3307      	adds	r3, #7
 800104a:	10db      	asrs	r3, r3, #3
 800104c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001050:	18ca      	adds	r2, r1, r3
 8001052:	88b9      	ldrh	r1, [r7, #4]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fa68 	bl	800152c <DrawChar>
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	2000012c 	.word	0x2000012c
 8001068:	20000130 	.word	0x20000130

0800106c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60ba      	str	r2, [r7, #8]
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	81fb      	strh	r3, [r7, #14]
 800107a:	460b      	mov	r3, r1
 800107c:	81bb      	strh	r3, [r7, #12]
 800107e:	4613      	mov	r3, r2
 8001080:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001082:	2301      	movs	r3, #1
 8001084:	83fb      	strh	r3, [r7, #30]
 8001086:	2300      	movs	r3, #0
 8001088:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001096:	e002      	b.n	800109e <BSP_LCD_DisplayStringAt+0x32>
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	3301      	adds	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	617a      	str	r2, [r7, #20]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f6      	bne.n	8001098 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80010aa:	f7ff feaf 	bl	8000e0c <BSP_LCD_GetXSize>
 80010ae:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	494f      	ldr	r1, [pc, #316]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3308      	adds	r3, #8
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	889b      	ldrh	r3, [r3, #4]
 80010c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c8:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d01c      	beq.n	800110a <BSP_LCD_DisplayStringAt+0x9e>
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <BSP_LCD_DisplayStringAt+0x98>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d12e      	bne.n	8001136 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad1      	subs	r1, r2, r3
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4843      	ldr	r0, [pc, #268]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4403      	add	r3, r0
 80010ee:	3308      	adds	r3, #8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	889b      	ldrh	r3, [r3, #4]
 80010f4:	fb03 f301 	mul.w	r3, r3, r1
 80010f8:	085b      	lsrs	r3, r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4413      	add	r3, r2
 8001100:	83fb      	strh	r3, [r7, #30]
      break;
 8001102:	e01b      	b.n	800113c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	83fb      	strh	r3, [r7, #30]
      break;
 8001108:	e018      	b.n	800113c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b299      	uxth	r1, r3
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4836      	ldr	r0, [pc, #216]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4403      	add	r3, r0
 8001122:	3308      	adds	r3, #8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	889b      	ldrh	r3, [r3, #4]
 8001128:	fb11 f303 	smulbb	r3, r1, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	83fb      	strh	r3, [r7, #30]
      break;
 8001134:	e002      	b.n	800113c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	83fb      	strh	r3, [r7, #30]
      break;
 800113a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800113c:	8bfb      	ldrh	r3, [r7, #30]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <BSP_LCD_DisplayStringAt+0xde>
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da1d      	bge.n	8001186 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800114e:	e01a      	b.n	8001186 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	89b9      	ldrh	r1, [r7, #12]
 8001156:	8bfb      	ldrh	r3, [r7, #30]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff43 	bl	8000fe4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4923      	ldr	r1, [pc, #140]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	889a      	ldrh	r2, [r3, #4]
 8001174:	8bfb      	ldrh	r3, [r7, #30]
 8001176:	4413      	add	r3, r2
 8001178:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
    i++;
 8001180:	8bbb      	ldrh	r3, [r7, #28]
 8001182:	3301      	adds	r3, #1
 8001184:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2dc      	uxtb	r4, r3
 8001194:	f7ff fe3a 	bl	8000e0c <BSP_LCD_GetXSize>
 8001198:	4605      	mov	r5, r0
 800119a:	8bb9      	ldrh	r1, [r7, #28]
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4403      	add	r3, r0
 80011ac:	3308      	adds	r3, #8
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	fb03 f301 	mul.w	r3, r3, r1
 80011b6:	1aeb      	subs	r3, r5, r3
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <BSP_LCD_DisplayStringAt+0x180>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <BSP_LCD_DisplayStringAt+0x184>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	4299      	cmp	r1, r3
 80011d2:	bf2c      	ite	cs
 80011d4:	2301      	movcs	r3, #1
 80011d6:	2300      	movcc	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4023      	ands	r3, r4
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1b6      	bne.n	8001150 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000012c 	.word	0x2000012c
 80011f0:	20000130 	.word	0x20000130

080011f4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	460b      	mov	r3, r1
 8001200:	80bb      	strh	r3, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <BSP_LCD_DrawHLine+0x70>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <BSP_LCD_DrawHLine+0x74>)
 8001210:	2134      	movs	r1, #52	; 0x34
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	335c      	adds	r3, #92	; 0x5c
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	f7ff fdf6 	bl	8000e0c <BSP_LCD_GetXSize>
 8001220:	4602      	mov	r2, r0
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4423      	add	r3, r4
 8001230:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <BSP_LCD_DrawHLine+0x70>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	68fc      	ldr	r4, [r7, #12]
 8001238:	887d      	ldrh	r5, [r7, #2]
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <BSP_LCD_DrawHLine+0x70>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	490b      	ldr	r1, [pc, #44]	; (800126c <BSP_LCD_DrawHLine+0x78>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	462a      	mov	r2, r5
 8001256:	4621      	mov	r1, r4
 8001258:	f000 fa20 	bl	800169c <LL_FillBuffer>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bdb0      	pop	{r4, r5, r7, pc}
 8001264:	2000012c 	.word	0x2000012c
 8001268:	200002d4 	.word	0x200002d4
 800126c:	20000130 	.word	0x20000130

08001270 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b087      	sub	sp, #28
 8001274:	af02      	add	r7, sp, #8
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	80bb      	strh	r3, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <BSP_LCD_DrawVLine+0x78>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <BSP_LCD_DrawVLine+0x7c>)
 800128c:	2134      	movs	r1, #52	; 0x34
 800128e:	fb01 f303 	mul.w	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	335c      	adds	r3, #92	; 0x5c
 8001296:	681c      	ldr	r4, [r3, #0]
 8001298:	f7ff fdb8 	bl	8000e0c <BSP_LCD_GetXSize>
 800129c:	4602      	mov	r2, r0
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	fb03 f202 	mul.w	r2, r3, r2
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4423      	add	r3, r4
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <BSP_LCD_DrawVLine+0x78>)
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	68fd      	ldr	r5, [r7, #12]
 80012b4:	887e      	ldrh	r6, [r7, #2]
 80012b6:	f7ff fda9 	bl	8000e0c <BSP_LCD_GetXSize>
 80012ba:	4603      	mov	r3, r0
 80012bc:	1e59      	subs	r1, r3, #1
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <BSP_LCD_DrawVLine+0x78>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <BSP_LCD_DrawVLine+0x80>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4403      	add	r3, r0
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	9100      	str	r1, [sp, #0]
 80012d4:	4633      	mov	r3, r6
 80012d6:	2201      	movs	r2, #1
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f9de 	bl	800169c <LL_FillBuffer>
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e8:	2000012c 	.word	0x2000012c
 80012ec:	200002d4 	.word	0x200002d4
 80012f0:	20000130 	.word	0x20000130

080012f4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af02      	add	r7, sp, #8
 80012fc:	4604      	mov	r4, r0
 80012fe:	4608      	mov	r0, r1
 8001300:	4611      	mov	r1, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4623      	mov	r3, r4
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4603      	mov	r3, r0
 800130a:	80bb      	strh	r3, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <BSP_LCD_FillRect+0xa8>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4920      	ldr	r1, [pc, #128]	; (80013a0 <BSP_LCD_FillRect+0xac>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fde6 	bl	8000efc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <BSP_LCD_FillRect+0xa8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <BSP_LCD_FillRect+0xb0>)
 8001336:	2134      	movs	r1, #52	; 0x34
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
 800133e:	335c      	adds	r3, #92	; 0x5c
 8001340:	681c      	ldr	r4, [r3, #0]
 8001342:	f7ff fd63 	bl	8000e0c <BSP_LCD_GetXSize>
 8001346:	4602      	mov	r2, r0
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	fb03 f202 	mul.w	r2, r3, r2
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4423      	add	r3, r4
 8001356:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <BSP_LCD_FillRect+0xa8>)
 800135a:	681c      	ldr	r4, [r3, #0]
 800135c:	68fd      	ldr	r5, [r7, #12]
 800135e:	887e      	ldrh	r6, [r7, #2]
 8001360:	f8b7 8000 	ldrh.w	r8, [r7]
 8001364:	f7ff fd52 	bl	8000e0c <BSP_LCD_GetXSize>
 8001368:	4602      	mov	r2, r0
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	1ad1      	subs	r1, r2, r3
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <BSP_LCD_FillRect+0xa8>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <BSP_LCD_FillRect+0xac>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4403      	add	r3, r0
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	9100      	str	r1, [sp, #0]
 8001384:	4643      	mov	r3, r8
 8001386:	4632      	mov	r2, r6
 8001388:	4629      	mov	r1, r5
 800138a:	4620      	mov	r0, r4
 800138c:	f000 f986 	bl	800169c <LL_FillBuffer>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800139a:	bf00      	nop
 800139c:	2000012c 	.word	0x2000012c
 80013a0:	20000130 	.word	0x20000130
 80013a4:	200002d4 	.word	0x200002d4

080013a8 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d80d      	bhi.n	80013d4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	2215      	movs	r2, #21
 80013ca:	2100      	movs	r1, #0
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <DSI_IO_WriteCmd+0x50>)
 80013ce:	f002 fc13 	bl	8003bf8 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80013d2:	e00d      	b.n	80013f0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2239      	movs	r2, #57	; 0x39
 80013e8:	2100      	movs	r1, #0
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <DSI_IO_WriteCmd+0x50>)
 80013ec:	f002 fc26 	bl	8003c3c <HAL_DSI_LongWrite>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000037c 	.word	0x2000037c

080013fc <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001400:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a31      	ldr	r2, [pc, #196]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001434:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	4a28      	ldr	r2, [pc, #160]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800143c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001440:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a25      	ldr	r2, [pc, #148]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001464:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800146c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001470:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001478:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001494:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <BSP_LCD_MspInit+0xd0>)
 800149c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80014a0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2103      	movs	r1, #3
 80014a6:	2058      	movs	r0, #88	; 0x58
 80014a8:	f000 ff83 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014ac:	2058      	movs	r0, #88	; 0x58
 80014ae:	f000 ff9c 	bl	80023ea <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2103      	movs	r1, #3
 80014b6:	205a      	movs	r0, #90	; 0x5a
 80014b8:	f000 ff7b 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014bc:	205a      	movs	r0, #90	; 0x5a
 80014be:	f000 ff94 	bl	80023ea <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2103      	movs	r1, #3
 80014c6:	2062      	movs	r0, #98	; 0x62
 80014c8:	f000 ff73 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80014cc:	2062      	movs	r0, #98	; 0x62
 80014ce:	f000 ff8c 	bl	80023ea <HAL_NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	603a      	str	r2, [r7, #0]
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	460b      	mov	r3, r1
 80014ee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <BSP_LCD_DrawPixel+0x44>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <BSP_LCD_DrawPixel+0x48>)
 80014f6:	2134      	movs	r1, #52	; 0x34
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	335c      	adds	r3, #92	; 0x5c
 8001500:	681c      	ldr	r4, [r3, #0]
 8001502:	88bd      	ldrh	r5, [r7, #4]
 8001504:	f7ff fc82 	bl	8000e0c <BSP_LCD_GetXSize>
 8001508:	4603      	mov	r3, r0
 800150a:	fb03 f205 	mul.w	r2, r3, r5
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4423      	add	r3, r4
 8001516:	461a      	mov	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	2000012c 	.word	0x2000012c
 8001528:	200002d4 	.word	0x200002d4

0800152c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	603a      	str	r2, [r7, #0]
 8001536:	80fb      	strh	r3, [r7, #6]
 8001538:	460b      	mov	r3, r1
 800153a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <DrawChar+0x168>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4953      	ldr	r1, [pc, #332]	; (8001698 <DrawChar+0x16c>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3308      	adds	r3, #8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	88db      	ldrh	r3, [r3, #6]
 800155a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800155c:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <DrawChar+0x168>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <DrawChar+0x16c>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3308      	adds	r3, #8
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001574:	8a3b      	ldrh	r3, [r7, #16]
 8001576:	3307      	adds	r3, #7
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <DrawChar+0x52>
 800157c:	3307      	adds	r3, #7
 800157e:	10db      	asrs	r3, r3, #3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	8a3b      	ldrh	r3, [r7, #16]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e076      	b.n	8001682 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001594:	8a3b      	ldrh	r3, [r7, #16]
 8001596:	3307      	adds	r3, #7
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <DrawChar+0x72>
 800159c:	3307      	adds	r3, #7
 800159e:	10db      	asrs	r3, r3, #3
 80015a0:	461a      	mov	r2, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fb03 f302 	mul.w	r3, r3, r2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	3307      	adds	r3, #7
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da00      	bge.n	80015b8 <DrawChar+0x8c>
 80015b6:	3307      	adds	r3, #7
 80015b8:	10db      	asrs	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d002      	beq.n	80015c4 <DrawChar+0x98>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <DrawChar+0xa0>
 80015c2:	e00c      	b.n	80015de <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	617b      	str	r3, [r7, #20]
      break;
 80015ca:	e016      	b.n	80015fa <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	3201      	adds	r2, #1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
      break;
 80015dc:	e00d      	b.n	80015fa <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	041a      	lsls	r2, r3, #16
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	3202      	adds	r2, #2
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
      break;
 80015f8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	e036      	b.n	800166e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001600:	8a3a      	ldrh	r2, [r7, #16]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	4413      	add	r3, r2
 800160a:	3b01      	subs	r3, #1
 800160c:	2201      	movs	r2, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	461a      	mov	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d012      	beq.n	8001642 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	b29a      	uxth	r2, r3
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4413      	add	r3, r2
 8001624:	b298      	uxth	r0, r3
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <DrawChar+0x168>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	491b      	ldr	r1, [pc, #108]	; (8001698 <DrawChar+0x16c>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	88bb      	ldrh	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff ff50 	bl	80014e0 <BSP_LCD_DrawPixel>
 8001640:	e012      	b.n	8001668 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	b29a      	uxth	r2, r3
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4413      	add	r3, r2
 800164a:	b298      	uxth	r0, r3
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DrawChar+0x168>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4911      	ldr	r1, [pc, #68]	; (8001698 <DrawChar+0x16c>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3304      	adds	r3, #4
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff ff3c 	bl	80014e0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3301      	adds	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	8a3b      	ldrh	r3, [r7, #16]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3c4      	bcc.n	8001600 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	3301      	adds	r3, #1
 800167a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3301      	adds	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	429a      	cmp	r2, r3
 8001688:	d384      	bcc.n	8001594 <DrawChar+0x68>
  }
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000012c 	.word	0x2000012c
 8001698:	20000130 	.word	0x20000130

0800169c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <LL_FillBuffer+0x68>)
 80016ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016b0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <LL_FillBuffer+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <LL_FillBuffer+0x68>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <LL_FillBuffer+0x68>)
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <LL_FillBuffer+0x6c>)
 80016c2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <LL_FillBuffer+0x68>)
 80016c6:	f001 f867 	bl	8002798 <HAL_DMA2D_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d115      	bne.n	80016fc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <LL_FillBuffer+0x68>)
 80016d4:	f001 f9ce 	bl	8002a74 <HAL_DMA2D_ConfigLayer>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69f9      	ldr	r1, [r7, #28]
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <LL_FillBuffer+0x68>)
 80016ea:	f001 f8af 	bl	800284c <HAL_DMA2D_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80016f4:	210a      	movs	r1, #10
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <LL_FillBuffer+0x68>)
 80016f8:	f001 f8d3 	bl	80028a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000027c 	.word	0x2000027c
 8001708:	4002b000 	.word	0x4002b000

0800170c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001712:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <BSP_SDRAM_Init+0xb0>)
 8001714:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 800171e:	2207      	movs	r2, #7
 8001720:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 8001724:	2204      	movs	r2, #4
 8001726:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 800172a:	2207      	movs	r2, #7
 800172c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 8001730:	2202      	movs	r2, #2
 8001732:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 8001736:	2202      	movs	r2, #2
 8001738:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 800173c:	2202      	movs	r2, #2
 800173e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 800174e:	2204      	movs	r2, #4
 8001750:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001754:	2220      	movs	r2, #32
 8001756:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001760:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001764:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 800176e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001772:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001782:	2100      	movs	r1, #0
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 8001786:	f000 f87f 	bl	8001888 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800178a:	490d      	ldr	r1, [pc, #52]	; (80017c0 <BSP_SDRAM_Init+0xb4>)
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <BSP_SDRAM_Init+0xac>)
 800178e:	f004 f963 	bl	8005a58 <HAL_SDRAM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <BSP_SDRAM_Init+0xb8>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	e002      	b.n	80017a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <BSP_SDRAM_Init+0xb8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80017a6:	f240 6003 	movw	r0, #1539	; 0x603
 80017aa:	f000 f80d 	bl	80017c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <BSP_SDRAM_Init+0xb8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000398 	.word	0x20000398
 80017bc:	a0000140 	.word	0xa0000140
 80017c0:	200001d8 	.word	0x200001d8
 80017c4:	20000030 	.word	0x20000030

080017c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017dc:	2210      	movs	r2, #16
 80017de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f0:	4923      	ldr	r1, [pc, #140]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80017f2:	4824      	ldr	r0, [pc, #144]	; (8001884 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80017f4:	f004 f964 	bl	8005ac0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f000 f99d 	bl	8001b38 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001806:	2210      	movs	r2, #16
 8001808:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800180c:	2201      	movs	r2, #1
 800180e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	4919      	ldr	r1, [pc, #100]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800181e:	f004 f94f 	bl	8005ac0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001824:	2203      	movs	r2, #3
 8001826:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800182a:	2210      	movs	r2, #16
 800182c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001830:	2208      	movs	r2, #8
 8001832:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	4910      	ldr	r1, [pc, #64]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001840:	4810      	ldr	r0, [pc, #64]	; (8001884 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001842:	f004 f93d 	bl	8005ac0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001846:	f44f 730c 	mov.w	r3, #560	; 0x230
 800184a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800184e:	2204      	movs	r2, #4
 8001850:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001854:	2210      	movs	r2, #16
 8001856:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800185a:	2201      	movs	r2, #1
 800185c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001862:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001868:	4905      	ldr	r1, [pc, #20]	; (8001880 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800186c:	f004 f928 	bl	8005ac0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001874:	f004 f94f 	bl	8005b16 <HAL_SDRAM_ProgramRefreshRate>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001f4 	.word	0x200001f4
 8001884:	20000398 	.word	0x20000398

08001888 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001892:	4b71      	ldr	r3, [pc, #452]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	4a70      	ldr	r2, [pc, #448]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6393      	str	r3, [r2, #56]	; 0x38
 800189e:	4b6e      	ldr	r3, [pc, #440]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a64      	ldr	r2, [pc, #400]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a5e      	ldr	r2, [pc, #376]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f2:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a46      	ldr	r2, [pc, #280]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <BSP_SDRAM_MspInit+0x1d0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001956:	2301      	movs	r3, #1
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800195e:	230c      	movs	r3, #12
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001962:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	483b      	ldr	r0, [pc, #236]	; (8001a5c <BSP_SDRAM_MspInit+0x1d4>)
 8001970:	f002 fa2a 	bl	8003dc8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001974:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4837      	ldr	r0, [pc, #220]	; (8001a60 <BSP_SDRAM_MspInit+0x1d8>)
 8001982:	f002 fa21 	bl	8003dc8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001986:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4834      	ldr	r0, [pc, #208]	; (8001a64 <BSP_SDRAM_MspInit+0x1dc>)
 8001994:	f002 fa18 	bl	8003dc8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001998:	f248 1337 	movw	r3, #33079	; 0x8137
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4830      	ldr	r0, [pc, #192]	; (8001a68 <BSP_SDRAM_MspInit+0x1e0>)
 80019a6:	f002 fa0f 	bl	8003dc8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80019aa:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	482d      	ldr	r0, [pc, #180]	; (8001a6c <BSP_SDRAM_MspInit+0x1e4>)
 80019b8:	f002 fa06 	bl	8003dc8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80019bc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	4829      	ldr	r0, [pc, #164]	; (8001a70 <BSP_SDRAM_MspInit+0x1e8>)
 80019ca:	f002 f9fd 	bl	8003dc8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a06:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a10:	2203      	movs	r2, #3
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <BSP_SDRAM_MspInit+0x1f0>)
 8001a24:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a34:	f000 fda2 	bl	800257c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <BSP_SDRAM_MspInit+0x1ec>)
 8001a3a:	f000 fcf1 	bl	8002420 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	210f      	movs	r1, #15
 8001a42:	2038      	movs	r0, #56	; 0x38
 8001a44:	f000 fcb5 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001a48:	2038      	movs	r0, #56	; 0x38
 8001a4a:	f000 fcce 	bl	80023ea <HAL_NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3740      	adds	r7, #64	; 0x40
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40021c00 	.word	0x40021c00
 8001a70:	40022000 	.word	0x40022000
 8001a74:	20000204 	.word	0x20000204
 8001a78:	40026410 	.word	0x40026410

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fc8b 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f806 	bl	8001a98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f005 fa18 	bl	8006ec0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fca5 	bl	8002406 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 fc6d 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000003c 	.word	0x2000003c
 8001af0:	20000038 	.word	0x20000038
 8001af4:	20000034 	.word	0x20000034

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000038 	.word	0x20000038
 8001b1c:	200003cc 	.word	0x200003cc

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200003cc 	.word	0x200003cc

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_Delay+0x40>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000038 	.word	0x20000038

08001b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e031      	b.n	8001bf6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f005 f9b4 	bl	8006f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_ADC_Init+0x84>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	f043 0202 	orr.w	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa1c 	bl	8002008 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
 8001be6:	e001      	b.n	8001bec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	ffffeefd 	.word	0xffffeefd

08001c04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Start+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e0a0      	b.n	8001d60 <HAL_ADC_Start+0x15c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d018      	beq.n	8001c66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001c44:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_ADC_Start+0x168>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_ADC_Start+0x16c>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9a      	lsrs	r2, r3, #18
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d174      	bne.n	8001d5e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c78:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_ADC_Start+0x170>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f023 0206 	bic.w	r2, r3, #6
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_ADC_Start+0x174>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d136      	bne.n	8001d5e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	e02d      	b.n	8001d5e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_ADC_Start+0x178>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10e      	bne.n	8001d2a <HAL_ADC_Start+0x126>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d28:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_ADC_Start+0x174>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_ADC_Start+0x17c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10e      	bne.n	8001d5e <HAL_ADC_Start+0x15a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d5c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	2000003c 	.word	0x2000003c
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	fffff8fe 	.word	0xfffff8fe
 8001d78:	40012300 	.word	0x40012300
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	40012200 	.word	0x40012200

08001d84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1c>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e115      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x248>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d935      	bls.n	8001e38 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	2207      	movs	r2, #7
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43da      	mvns	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	400a      	ands	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_ADC_ConfigChannel+0x254>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	061a      	lsls	r2, r3, #24
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	e035      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4403      	add	r3, r0
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	e022      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4403      	add	r3, r0
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d824      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b05      	subs	r3, #5
 8001e98:	221f      	movs	r2, #31
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ece:	e04c      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d824      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	; 0x23
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f20:	e023      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b41      	subs	r3, #65	; 0x41
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	; 0x41
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_ADC_ConfigChannel+0x258>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1e8>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_ADC_ConfigChannel+0x25c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_ADC_ConfigChannel+0x25c>)
 8001f82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f86:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_ADC_ConfigChannel+0x258>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d125      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x23e>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_ADC_ConfigChannel+0x254>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x204>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b11      	cmp	r3, #17
 8001fa2:	d11c      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_ADC_ConfigChannel+0x25c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_ADC_ConfigChannel+0x25c>)
 8001faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fae:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <HAL_ADC_ConfigChannel+0x254>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_ADC_ConfigChannel+0x260>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_ADC_ConfigChannel+0x264>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	10000012 	.word	0x10000012
 8001ff8:	40012000 	.word	0x40012000
 8001ffc:	40012300 	.word	0x40012300
 8002000:	2000003c 	.word	0x2000003c
 8002004:	431bde83 	.word	0x431bde83

08002008 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002010:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <ADC_Init+0x1ec>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <ADC_Init+0x1ec>)
 8002016:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800201a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800201c:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <ADC_Init+0x1ec>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4973      	ldr	r1, [pc, #460]	; (80021f4 <ADC_Init+0x1ec>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	021a      	lsls	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800205c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <ADC_Init+0x1f0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6899      	ldr	r1, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e00f      	b.n	8002102 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002100:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0202 	bic.w	r2, r2, #2
 8002110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	005a      	lsls	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800214e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	3b01      	subs	r3, #1
 800215c:	035a      	lsls	r2, r3, #13
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e007      	b.n	8002178 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002176:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	3b01      	subs	r3, #1
 8002194:	051a      	lsls	r2, r3, #20
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ba:	025a      	lsls	r2, r3, #9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	029a      	lsls	r2, r3, #10
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40012300 	.word	0x40012300
 80021f8:	0f000001 	.word	0x0f000001

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <__NVIC_SetPriorityGrouping+0x40>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	4313      	orrs	r3, r2
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x40>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	05fa0000 	.word	0x05fa0000

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff29 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff3e 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff31 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffa2 	bl	8002358 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff fb78 	bl	8001b20 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e099      	b.n	8002570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245c:	e00f      	b.n	800247e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245e:	f7ff fb5f 	bl	8001b20 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b05      	cmp	r3, #5
 800246a:	d908      	bls.n	800247e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e078      	b.n	8002570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e8      	bne.n	800245e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_DMA_Init+0x158>)
 8002498:	4013      	ands	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d107      	bne.n	80024e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4313      	orrs	r3, r2
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b04      	cmp	r3, #4
 8002510:	d117      	bne.n	8002542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8bd 	bl	80026a4 <DMA_CheckFifoParam>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800253e:	2301      	movs	r3, #1
 8002540:	e016      	b.n	8002570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f874 	bl	8002638 <DMA_CalcBaseAndBitshift>
 8002550:	4603      	mov	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e010803f 	.word	0xe010803f

0800257c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e050      	b.n	8002630 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d101      	bne.n	800259e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e048      	b.n	8002630 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f82a 	bl	8002638 <DMA_CalcBaseAndBitshift>
 80025e4:	4603      	mov	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	223f      	movs	r2, #63	; 0x3f
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3b10      	subs	r3, #16
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <DMA_CalcBaseAndBitshift+0x60>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <DMA_CalcBaseAndBitshift+0x64>)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d908      	bls.n	8002678 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <DMA_CalcBaseAndBitshift+0x68>)
 800266e:	4013      	ands	r3, r2
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	; 0x58
 8002676:	e006      	b.n	8002686 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	aaaaaaab 	.word	0xaaaaaaab
 800269c:	0800a9bc 	.word	0x0800a9bc
 80026a0:	fffffc00 	.word	0xfffffc00

080026a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11f      	bne.n	80026fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d855      	bhi.n	8002770 <DMA_CheckFifoParam+0xcc>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <DMA_CheckFifoParam+0x28>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026ef 	.word	0x080026ef
 80026d4:	080026dd 	.word	0x080026dd
 80026d8:	08002771 	.word	0x08002771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d045      	beq.n	8002774 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ec:	e042      	b.n	8002774 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f6:	d13f      	bne.n	8002778 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e03c      	b.n	8002778 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002706:	d121      	bne.n	800274c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d836      	bhi.n	800277c <DMA_CheckFifoParam+0xd8>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <DMA_CheckFifoParam+0x70>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002725 	.word	0x08002725
 8002718:	0800272b 	.word	0x0800272b
 800271c:	08002725 	.word	0x08002725
 8002720:	0800273d 	.word	0x0800273d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e02f      	b.n	800278a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d024      	beq.n	8002780 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273a:	e021      	b.n	8002780 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002744:	d11e      	bne.n	8002784 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800274a:	e01b      	b.n	8002784 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <DMA_CheckFifoParam+0xb4>
 8002752:	2b03      	cmp	r3, #3
 8002754:	d003      	beq.n	800275e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002756:	e018      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e015      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      break;
 800276e:	e00b      	b.n	8002788 <DMA_CheckFifoParam+0xe4>
      break;
 8002770:	bf00      	nop
 8002772:	e00a      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;
 8002774:	bf00      	nop
 8002776:	e008      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;
 8002778:	bf00      	nop
 800277a:	e006      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;
 800277c:	bf00      	nop
 800277e:	e004      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;
 8002780:	bf00      	nop
 8002782:	e002      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;   
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <DMA_CheckFifoParam+0xe6>
      break;
 8002788:	bf00      	nop
    }
  } 
  
  return status; 
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e049      	b.n	800283e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f004 fbc2 	bl	8006f48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	f023 0107 	bic.w	r1, r3, #7
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_DMA2D_Init+0xb0>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d1      	ldr	r1, [r2, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	430b      	orrs	r3, r1
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	051a      	lsls	r2, r3, #20
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	055b      	lsls	r3, r3, #21
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	ffffc000 	.word	0xffffc000

0800284c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_DMA2D_Start+0x1c>
 8002864:	2302      	movs	r3, #2
 8002866:	e018      	b.n	800289a <HAL_DMA2D_Start+0x4e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f994 	bl	8002bb0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d056      	beq.n	800296c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80028be:	f7ff f92f 	bl	8001b20 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80028c4:	e04b      	b.n	800295e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2221      	movs	r2, #33	; 0x21
 800290a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0a5      	b.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d01a      	beq.n	800295e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002928:	f7ff f8fa 	bl	8001b20 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d302      	bcc.n	800293e <HAL_DMA2D_PollForTransfer+0x9c>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2203      	movs	r2, #3
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e086      	b.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ac      	beq.n	80028c6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d061      	beq.n	8002a52 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800298e:	f7ff f8c7 	bl	8001b20 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002994:	e056      	b.n	8002a44 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02e      	beq.n	8002a06 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2229      	movs	r2, #41	; 0x29
 80029f0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e032      	b.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d01a      	beq.n	8002a44 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002a0e:	f7ff f887 	bl	8001b20 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <HAL_DMA2D_PollForTransfer+0x182>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e013      	b.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0a1      	beq.n	8002996 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2212      	movs	r2, #18
 8002a58:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA2D_ConfigLayer+0x20>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e084      	b.n	8002b9e <HAL_DMA2D_ConfigLayer+0x12a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3320      	adds	r3, #32
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002ac8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_DMA2D_ConfigLayer+0x138>)
 8002ad6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b0a      	cmp	r3, #10
 8002ade:	d003      	beq.n	8002ae8 <HAL_DMA2D_ConfigLayer+0x74>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b09      	cmp	r3, #9
 8002ae6:	d107      	bne.n	8002af8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e005      	b.n	8002b04 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d120      	bne.n	8002b4c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	ea02 0103 	and.w	r1, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b0a      	cmp	r3, #10
 8002b32:	d003      	beq.n	8002b3c <HAL_DMA2D_ConfigLayer+0xc8>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d127      	bne.n	8002b8c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	ea02 0103 	and.w	r1, r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b0a      	cmp	r3, #10
 8002b74:	d003      	beq.n	8002b7e <HAL_DMA2D_ConfigLayer+0x10a>
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d106      	bne.n	8002b8c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b8a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	ff33000f 	.word	0xff33000f

08002bb0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	041a      	lsls	r2, r3, #16
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002be8:	d174      	bne.n	8002cd4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bf0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bf8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c00:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	e053      	b.n	8002cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e048      	b.n	8002cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d111      	bne.n	8002c64 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	0cdb      	lsrs	r3, r3, #19
 8002c44:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	0a9b      	lsrs	r3, r3, #10
 8002c4a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	02db      	lsls	r3, r3, #11
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	e032      	b.n	8002cca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d117      	bne.n	8002c9c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	0fdb      	lsrs	r3, r3, #31
 8002c70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	0cdb      	lsrs	r3, r3, #19
 8002c76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	0adb      	lsrs	r3, r3, #11
 8002c7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	03db      	lsls	r3, r3, #15
 8002c92:	4313      	orrs	r3, r2
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e016      	b.n	8002cca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	0f1b      	lsrs	r3, r3, #28
 8002ca0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	0d1b      	lsrs	r3, r3, #20
 8002ca6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	0b1b      	lsrs	r3, r3, #12
 8002cac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	031b      	lsls	r3, r3, #12
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002cd2:	e003      	b.n	8002cdc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	60da      	str	r2, [r3, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	372c      	adds	r7, #44	; 0x2c
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	019a      	lsls	r2, r3, #6
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	431a      	orrs	r2, r3
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d28:	f7fe fefa 	bl	8001b20 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d2e:	e009      	b.n	8002d44 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002d30:	f7fe fef6 	bl	8001b20 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3e:	d901      	bls.n	8002d44 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e015      	b.n	8002d70 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ee      	beq.n	8002d30 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	019a      	lsls	r2, r3, #6
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e106      	b.n	8002f9a <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7c5b      	ldrb	r3, [r3, #17]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f004 f8f6 	bl	8006f88 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002db6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dca:	f7fe fea9 	bl	8001b20 <HAL_GetTick>
 8002dce:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002dd0:	e009      	b.n	8002de6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fea5 	bl	8001b20 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de0:	d901      	bls.n	8002de6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0d9      	b.n	8002f9a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ed      	beq.n	8002dd2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_DSI_Init+0x22c>)
 8002e04:	400b      	ands	r3, r1
 8002e06:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	009a      	lsls	r2, r3, #2
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	02db      	lsls	r3, r3, #11
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5a:	f7fe fe61 	bl	8001b20 <HAL_GetTick>
 8002e5e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e60:	e009      	b.n	8002e76 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e62:	f7fe fe5d 	bl	8001b20 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e70:	d901      	bls.n	8002e76 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e091      	b.n	8002f9a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ed      	beq.n	8002e62 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0206 	orr.w	r2, r2, #6
 8002e96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0203 	bic.w	r2, r2, #3
 8002eaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0203 	bic.w	r2, r2, #3
 8002ed8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f00:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_DSI_Init+0x1aa>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	e000      	b.n	8002f24 <HAL_DSI_Init+0x1ac>
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_DSI_Init+0x230>)
 8002f2a:	fb02 f203 	mul.w	r2, r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	409a      	lsls	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f5a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	fffc8603 	.word	0xfffc8603
 8002fa8:	003d0900 	.word	0x003d0900

08002fac <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e066      	b.n	800308c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0206 	bic.w	r2, r2, #6
 800301e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800305e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800306a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f003 ffcc 	bl	8007010 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7c1b      	ldrb	r3, [r3, #16]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_DSI_ConfigErrorMonitor+0x16>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0aa      	b.n	8003200 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e4:	430b      	orrs	r3, r1
 80030e6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003104:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0202 	orr.w	r2, r2, #2
 8003140:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 020c 	orr.w	r2, r2, #12
 800315e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0210 	orr.w	r2, r2, #16
 800317c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80031f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7c1b      	ldrb	r3, [r3, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_DSI_SetGenericVCID+0x16>
 800321e:	2302      	movs	r3, #2
 8003220:	e016      	b.n	8003250 <HAL_DSI_SetGenericVCID+0x44>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0203 	bic.w	r2, r2, #3
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7c1b      	ldrb	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_DSI_ConfigVideoMode+0x16>
 800326e:	2302      	movs	r3, #2
 8003270:	e1ee      	b.n	8003650 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0203 	bic.w	r2, r2, #3
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80032ca:	400b      	ands	r3, r1
 80032cc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b84      	ldr	r3, [pc, #528]	; (80034fc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b7b      	ldr	r3, [pc, #492]	; (80034fc <HAL_DSI_ConfigVideoMode+0x2a0>)
 800330e:	400b      	ands	r3, r1
 8003310:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0203 	bic.w	r2, r2, #3
 8003332:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68d9      	ldr	r1, [r3, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0207 	bic.w	r2, r2, #7
 8003354:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6959      	ldr	r1, [r3, #20]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	431a      	orrs	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 020f 	bic.w	r2, r2, #15
 8003382:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005a      	lsls	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d110      	bne.n	80033ec <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6919      	ldr	r1, [r3, #16]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80033f8:	400b      	ands	r3, r1
 80033fa:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800341a:	400b      	ands	r3, r1
 800341c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800343c:	400b      	ands	r3, r1
 800343e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800345e:	400b      	ands	r3, r1
 8003460:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003480:	400b      	ands	r3, r1
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80034a2:	400b      	ands	r3, r1
 80034a4:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80034c4:	400b      	ands	r3, r1
 80034c6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f4:	e00a      	b.n	800350c <HAL_DSI_ConfigVideoMode+0x2b0>
 80034f6:	bf00      	nop
 80034f8:	ffffc000 	.word	0xffffc000
 80034fc:	ffffe000 	.word	0xffffe000
 8003500:	fffff000 	.word	0xfffff000
 8003504:	ffff8000 	.word	0xffff8000
 8003508:	fffffc00 	.word	0xfffffc00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003522:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	041a      	lsls	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003546:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7c1b      	ldrb	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800366e:	2302      	movs	r3, #2
 8003670:	e0c5      	b.n	80037fe <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0203 	bic.w	r2, r2, #3
 80036be:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0207 	bic.w	r2, r2, #7
 80036e0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6959      	ldr	r1, [r3, #20]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 020f 	bic.w	r2, r2, #15
 800370e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6919      	ldr	r1, [r3, #16]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020e 	bic.w	r2, r2, #14
 8003732:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	005a      	lsls	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800375a:	400b      	ands	r3, r1
 800375c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003780:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0202 	orr.w	r2, r2, #2
 80037f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	ffff0000 	.word	0xffff0000

08003810 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7c1b      	ldrb	r3, [r3, #16]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_DSI_ConfigCommand+0x16>
 8003822:	2302      	movs	r3, #2
 8003824:	e049      	b.n	80038ba <HAL_DSI_ConfigCommand+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_DSI_ConfigCommand+0xb8>)
 8003838:	400b      	ands	r3, r1
 800383a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800384a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003850:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003856:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800385c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003862:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003868:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800386e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003874:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800387a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003880:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003886:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0202 	bic.w	r2, r2, #2
 800389e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	fef080ff 	.word	0xfef080ff

080038cc <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7c1b      	ldrb	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_DSI_ConfigFlowControl+0x16>
 80038de:	2302      	movs	r3, #2
 80038e0:	e016      	b.n	8003910 <HAL_DSI_ConfigFlowControl+0x44>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 021f 	bic.w	r2, r2, #31
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7c1b      	ldrb	r3, [r3, #16]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_DSI_ConfigPhyTimer+0x16>
 800392e:	2302      	movs	r3, #2
 8003930:	e058      	b.n	80039e4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4293      	cmp	r3, r2
 8003942:	bf38      	it	cc
 8003944:	4613      	movcc	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003958:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	041a      	lsls	r2, r3, #16
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003986:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80039c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7c1b      	ldrb	r3, [r3, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0b4      	b.n	8003b70 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a1a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b292      	uxth	r2, r2
 8003a3c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a80:	400b      	ands	r3, r1
 8003a82:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003ace:	400b      	ands	r3, r1
 8003ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b22:	400b      	ands	r3, r1
 8003b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7c1b      	ldrb	r3, [r3, #16]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_DSI_Start+0x14>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e02b      	b.n	8003bec <HAL_DSI_Start+0x6c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0208 	orr.w	r2, r2, #8
 8003bd0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	7c1b      	ldrb	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_DSI_ShortWrite+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e010      	b.n	8003c34 <HAL_DSI_ShortWrite+0x3c>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff f879 	bl	8002d1a <DSI_ShortWrite>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	741a      	strb	r2, [r3, #16]

  return status;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	7c1b      	ldrb	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_DSI_LongWrite+0x1e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e084      	b.n	8003d64 <HAL_DSI_LongWrite+0x128>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c60:	f7fd ff5e 	bl	8001b20 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c66:	e00c      	b.n	8003c82 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c68:	f7fd ff5a 	bl	8001b20 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c76:	d904      	bls.n	8003c82 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e070      	b.n	8003d64 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0eb      	beq.n	8003c68 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	bf28      	it	cs
 8003c9a:	2303      	movcs	r3, #3
 8003c9c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	e00f      	b.n	8003cc4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	4413      	add	r3, r2
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3eb      	bcc.n	8003ca4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003ce4:	e028      	b.n	8003d38 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	bf28      	it	cs
 8003cec:	2304      	movcs	r3, #4
 8003cee:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	e00e      	b.n	8003d18 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	3301      	adds	r3, #1
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d3ec      	bcc.n	8003cfa <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1d3      	bne.n	8003ce6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d46:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	f7fe ffc6 	bl	8002ce8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3728      	adds	r7, #40	; 0x28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7c1b      	ldrb	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e01b      	b.n	8003dba <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003d98:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	065a      	lsls	r2, r3, #25
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e175      	b.n	80040d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003de8:	2201      	movs	r2, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	f040 8164 	bne.w	80040ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x4e>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b12      	cmp	r3, #18
 8003e14:	d123      	bne.n	8003e5e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	2203      	movs	r2, #3
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0203 	and.w	r2, r3, #3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d00b      	beq.n	8003eb2 <HAL_GPIO_Init+0xea>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d007      	beq.n	8003eb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea6:	2b11      	cmp	r3, #17
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b12      	cmp	r3, #18
 8003eb0:	d130      	bne.n	8003f14 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 0201 	and.w	r2, r3, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	2203      	movs	r2, #3
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80be 	beq.w	80040ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f52:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <HAL_GPIO_Init+0x320>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a64      	ldr	r2, [pc, #400]	; (80040e8 <HAL_GPIO_Init+0x320>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <HAL_GPIO_Init+0x320>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f6a:	4a60      	ldr	r2, [pc, #384]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a57      	ldr	r2, [pc, #348]	; (80040f0 <HAL_GPIO_Init+0x328>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d037      	beq.n	8004006 <HAL_GPIO_Init+0x23e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_GPIO_Init+0x32c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_GPIO_Init+0x23a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02b      	beq.n	8003ffe <HAL_GPIO_Init+0x236>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a54      	ldr	r2, [pc, #336]	; (80040fc <HAL_GPIO_Init+0x334>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d025      	beq.n	8003ffa <HAL_GPIO_Init+0x232>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a53      	ldr	r2, [pc, #332]	; (8004100 <HAL_GPIO_Init+0x338>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01f      	beq.n	8003ff6 <HAL_GPIO_Init+0x22e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_GPIO_Init+0x33c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d019      	beq.n	8003ff2 <HAL_GPIO_Init+0x22a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_GPIO_Init+0x340>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_GPIO_Init+0x226>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_GPIO_Init+0x344>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00d      	beq.n	8003fea <HAL_GPIO_Init+0x222>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_GPIO_Init+0x348>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x21e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <HAL_GPIO_Init+0x34c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_GPIO_Init+0x21a>
 8003fde:	2309      	movs	r3, #9
 8003fe0:	e012      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	e010      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	e00e      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fea:	2307      	movs	r3, #7
 8003fec:	e00c      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fee:	2306      	movs	r3, #6
 8003ff0:	e00a      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e008      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e006      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e004      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8004006:	2300      	movs	r3, #0
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f002 0203 	and.w	r2, r2, #3
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004018:	4934      	ldr	r1, [pc, #208]	; (80040ec <HAL_GPIO_Init+0x324>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004026:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <HAL_GPIO_Init+0x350>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404a:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_GPIO_Init+0x350>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_GPIO_Init+0x350>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_GPIO_Init+0x350>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_GPIO_Init+0x350>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_GPIO_Init+0x350>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <HAL_GPIO_Init+0x350>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c8:	4a13      	ldr	r2, [pc, #76]	; (8004118 <HAL_GPIO_Init+0x350>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	f67f ae86 	bls.w	8003de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	3724      	adds	r7, #36	; 0x24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40021000 	.word	0x40021000
 8004104:	40021400 	.word	0x40021400
 8004108:	40021800 	.word	0x40021800
 800410c:	40021c00 	.word	0x40021c00
 8004110:	40022000 	.word	0x40022000
 8004114:	40022400 	.word	0x40022400
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e0d9      	b.n	80042ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004138:	2201      	movs	r2, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	f040 80c9 	bne.w	80042e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004154:	4a6a      	ldr	r2, [pc, #424]	; (8004300 <HAL_GPIO_DeInit+0x1e4>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	3302      	adds	r3, #2
 800415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004160:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	220f      	movs	r2, #15
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a62      	ldr	r2, [pc, #392]	; (8004304 <HAL_GPIO_DeInit+0x1e8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d037      	beq.n	80041ee <HAL_GPIO_DeInit+0xd2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a61      	ldr	r2, [pc, #388]	; (8004308 <HAL_GPIO_DeInit+0x1ec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d031      	beq.n	80041ea <HAL_GPIO_DeInit+0xce>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a60      	ldr	r2, [pc, #384]	; (800430c <HAL_GPIO_DeInit+0x1f0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02b      	beq.n	80041e6 <HAL_GPIO_DeInit+0xca>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a5f      	ldr	r2, [pc, #380]	; (8004310 <HAL_GPIO_DeInit+0x1f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d025      	beq.n	80041e2 <HAL_GPIO_DeInit+0xc6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <HAL_GPIO_DeInit+0x1f8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <HAL_GPIO_DeInit+0xc2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	; (8004318 <HAL_GPIO_DeInit+0x1fc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d019      	beq.n	80041da <HAL_GPIO_DeInit+0xbe>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a5c      	ldr	r2, [pc, #368]	; (800431c <HAL_GPIO_DeInit+0x200>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_GPIO_DeInit+0xba>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a5b      	ldr	r2, [pc, #364]	; (8004320 <HAL_GPIO_DeInit+0x204>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00d      	beq.n	80041d2 <HAL_GPIO_DeInit+0xb6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_GPIO_DeInit+0x208>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <HAL_GPIO_DeInit+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a59      	ldr	r2, [pc, #356]	; (8004328 <HAL_GPIO_DeInit+0x20c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <HAL_GPIO_DeInit+0xae>
 80041c6:	2309      	movs	r3, #9
 80041c8:	e012      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041ca:	230a      	movs	r3, #10
 80041cc:	e010      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041ce:	2308      	movs	r3, #8
 80041d0:	e00e      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041d2:	2307      	movs	r3, #7
 80041d4:	e00c      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041d6:	2306      	movs	r3, #6
 80041d8:	e00a      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041da:	2305      	movs	r3, #5
 80041dc:	e008      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041de:	2304      	movs	r3, #4
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041e2:	2303      	movs	r3, #3
 80041e4:	e004      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_GPIO_DeInit+0xd4>
 80041ee:	2300      	movs	r3, #0
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	f002 0203 	and.w	r2, r2, #3
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	4093      	lsls	r3, r2
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d132      	bne.n	8004266 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004210:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_GPIO_DeInit+0x1e4>)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	43da      	mvns	r2, r3
 8004220:	4837      	ldr	r0, [pc, #220]	; (8004300 <HAL_GPIO_DeInit+0x1e4>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	400a      	ands	r2, r1
 8004228:	3302      	adds	r3, #2
 800422a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_GPIO_DeInit+0x210>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	493d      	ldr	r1, [pc, #244]	; (800432c <HAL_GPIO_DeInit+0x210>)
 8004238:	4013      	ands	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_GPIO_DeInit+0x210>)
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	43db      	mvns	r3, r3
 8004244:	4939      	ldr	r1, [pc, #228]	; (800432c <HAL_GPIO_DeInit+0x210>)
 8004246:	4013      	ands	r3, r2
 8004248:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_GPIO_DeInit+0x210>)
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43db      	mvns	r3, r3
 8004252:	4936      	ldr	r1, [pc, #216]	; (800432c <HAL_GPIO_DeInit+0x210>)
 8004254:	4013      	ands	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_GPIO_DeInit+0x210>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	4932      	ldr	r1, [pc, #200]	; (800432c <HAL_GPIO_DeInit+0x210>)
 8004262:	4013      	ands	r3, r2
 8004264:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2103      	movs	r1, #3
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	08da      	lsrs	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3208      	adds	r2, #8
 8004284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	08d2      	lsrs	r2, r2, #3
 800429c:	4019      	ands	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2103      	movs	r1, #3
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	2101      	movs	r1, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2103      	movs	r1, #3
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	f67f af22 	bls.w	8004138 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40013800 	.word	0x40013800
 8004304:	40020000 	.word	0x40020000
 8004308:	40020400 	.word	0x40020400
 800430c:	40020800 	.word	0x40020800
 8004310:	40020c00 	.word	0x40020c00
 8004314:	40021000 	.word	0x40021000
 8004318:	40021400 	.word	0x40021400
 800431c:	40021800 	.word	0x40021800
 8004320:	40021c00 	.word	0x40021c00
 8004324:	40022000 	.word	0x40022000
 8004328:	40022400 	.word	0x40022400
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800434c:	e003      	b.n	8004356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0bf      	b.n	80044f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f002 fe5e 	bl	800704c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80043a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6999      	ldr	r1, [r3, #24]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_LTDC_Init+0x19c>)
 80043d8:	400b      	ands	r3, r1
 80043da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68d9      	ldr	r1, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_LTDC_Init+0x19c>)
 8004406:	400b      	ands	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68d9      	ldr	r1, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b33      	ldr	r3, [pc, #204]	; (8004500 <HAL_LTDC_Init+0x19c>)
 8004434:	400b      	ands	r3, r1
 8004436:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6959      	ldr	r1, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_LTDC_Init+0x19c>)
 8004462:	400b      	ands	r3, r1
 8004464:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6959      	ldr	r1, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0206 	orr.w	r2, r2, #6
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	f000f800 	.word	0xf000f800

08004504 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_LTDC_ConfigLayer+0x1a>
 800451a:	2302      	movs	r3, #2
 800451c:	e02c      	b.n	8004578 <HAL_LTDC_ConfigLayer+0x74>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2134      	movs	r1, #52	; 0x34
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800454c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f811 	bl	8004580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bdb0      	pop	{r4, r5, r7, pc}

08004580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	4413      	add	r3, r2
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	01db      	lsls	r3, r3, #7
 80045ac:	4413      	add	r3, r2
 80045ae:	3384      	adds	r3, #132	; 0x84
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	4611      	mov	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	01d2      	lsls	r2, r2, #7
 80045bc:	440a      	add	r2, r1
 80045be:	3284      	adds	r2, #132	; 0x84
 80045c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d6:	4413      	add	r3, r2
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	440b      	add	r3, r1
 80045e6:	3384      	adds	r3, #132	; 0x84
 80045e8:	4619      	mov	r1, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045fe:	4413      	add	r3, r2
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	01db      	lsls	r3, r3, #7
 800460e:	4413      	add	r3, r2
 8004610:	3384      	adds	r3, #132	; 0x84
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	4611      	mov	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	01d2      	lsls	r2, r2, #7
 800461e:	440a      	add	r2, r1
 8004620:	3284      	adds	r2, #132	; 0x84
 8004622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004636:	4413      	add	r3, r2
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	440b      	add	r3, r1
 8004646:	3384      	adds	r3, #132	; 0x84
 8004648:	4619      	mov	r1, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	01db      	lsls	r3, r3, #7
 800465a:	4413      	add	r3, r2
 800465c:	3384      	adds	r3, #132	; 0x84
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4611      	mov	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	01d2      	lsls	r2, r2, #7
 800466a:	440a      	add	r2, r1
 800466c:	3284      	adds	r2, #132	; 0x84
 800466e:	f023 0307 	bic.w	r3, r3, #7
 8004672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	; 0x84
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	01db      	lsls	r3, r3, #7
 80046b0:	4413      	add	r3, r2
 80046b2:	3384      	adds	r3, #132	; 0x84
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	01db      	lsls	r3, r3, #7
 80046c0:	4413      	add	r3, r2
 80046c2:	3384      	adds	r3, #132	; 0x84
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046d0:	461a      	mov	r2, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	440b      	add	r3, r1
 80046e6:	3384      	adds	r3, #132	; 0x84
 80046e8:	4619      	mov	r1, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4413      	add	r3, r2
 8004720:	3384      	adds	r3, #132	; 0x84
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4413      	add	r3, r2
 8004736:	3384      	adds	r3, #132	; 0x84
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	01db      	lsls	r3, r3, #7
 8004744:	440b      	add	r3, r1
 8004746:	3384      	adds	r3, #132	; 0x84
 8004748:	4619      	mov	r1, r3
 800474a:	4b58      	ldr	r3, [pc, #352]	; (80048ac <LTDC_SetConfig+0x32c>)
 800474c:	4013      	ands	r3, r2
 800474e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	6809      	ldr	r1, [r1, #0]
 800475c:	4608      	mov	r0, r1
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	01c9      	lsls	r1, r1, #7
 8004762:	4401      	add	r1, r0
 8004764:	3184      	adds	r1, #132	; 0x84
 8004766:	4313      	orrs	r3, r2
 8004768:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	01db      	lsls	r3, r3, #7
 8004774:	4413      	add	r3, r2
 8004776:	3384      	adds	r3, #132	; 0x84
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	01db      	lsls	r3, r3, #7
 8004784:	4413      	add	r3, r2
 8004786:	3384      	adds	r3, #132	; 0x84
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	4413      	add	r3, r2
 800479a:	3384      	adds	r3, #132	; 0x84
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80047ac:	2304      	movs	r3, #4
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e01b      	b.n	80047ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d102      	bne.n	80047c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80047ba:	2303      	movs	r3, #3
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e014      	b.n	80047ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d00b      	beq.n	80047e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d007      	beq.n	80047e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d003      	beq.n	80047e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047dc:	2b07      	cmp	r3, #7
 80047de:	d102      	bne.n	80047e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80047e0:	2302      	movs	r3, #2
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e001      	b.n	80047ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	01db      	lsls	r3, r3, #7
 80047f4:	4413      	add	r3, r2
 80047f6:	3384      	adds	r3, #132	; 0x84
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	4611      	mov	r1, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	01d2      	lsls	r2, r2, #7
 8004804:	440a      	add	r2, r1
 8004806:	3284      	adds	r2, #132	; 0x84
 8004808:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	3303      	adds	r3, #3
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	6809      	ldr	r1, [r1, #0]
 8004830:	4608      	mov	r0, r1
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	01c9      	lsls	r1, r1, #7
 8004836:	4401      	add	r1, r0
 8004838:	3184      	adds	r1, #132	; 0x84
 800483a:	4313      	orrs	r3, r2
 800483c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	01db      	lsls	r3, r3, #7
 8004848:	4413      	add	r3, r2
 800484a:	3384      	adds	r3, #132	; 0x84
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	01db      	lsls	r3, r3, #7
 8004858:	440b      	add	r3, r1
 800485a:	3384      	adds	r3, #132	; 0x84
 800485c:	4619      	mov	r1, r3
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <LTDC_SetConfig+0x330>)
 8004860:	4013      	ands	r3, r2
 8004862:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	01db      	lsls	r3, r3, #7
 800486e:	4413      	add	r3, r2
 8004870:	3384      	adds	r3, #132	; 0x84
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	01db      	lsls	r3, r3, #7
 8004884:	4413      	add	r3, r2
 8004886:	3384      	adds	r3, #132	; 0x84
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4611      	mov	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	01d2      	lsls	r2, r2, #7
 8004894:	440a      	add	r2, r1
 8004896:	3284      	adds	r2, #132	; 0x84
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3724      	adds	r7, #36	; 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	fffff8f8 	.word	0xfffff8f8
 80048b0:	fffff800 	.word	0xfffff800

080048b4 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80048c6:	2200      	movs	r2, #0
 80048c8:	e001      	b.n	80048ce <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80048ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80048da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048de:	e000      	b.n	80048e2 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80048e0:	2200      	movs	r2, #0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80048ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048f2:	e000      	b.n	80048f6 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80048f4:	2200      	movs	r2, #0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	4413      	add	r3, r2
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	441a      	add	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4413      	add	r3, r2
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	441a      	add	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	441a      	add	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	4413      	add	r3, r2
 8004940:	1e5a      	subs	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_PWREx_EnableOverDrive+0x98>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a22      	ldr	r2, [pc, #136]	; (80049ec <HAL_PWREx_EnableOverDrive+0x98>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_PWREx_EnableOverDrive+0x98>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004982:	f7fd f8cd 	bl	8001b20 <HAL_GetTick>
 8004986:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004988:	e009      	b.n	800499e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800498a:	f7fd f8c9 	bl	8001b20 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004998:	d901      	bls.n	800499e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e022      	b.n	80049e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d1ee      	bne.n	800498a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b8:	f7fd f8b2 	bl	8001b20 <HAL_GetTick>
 80049bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049be:	e009      	b.n	80049d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049c0:	f7fd f8ae 	bl	8001b20 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	d901      	bls.n	80049d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e007      	b.n	80049e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e0:	d1ee      	bne.n	80049c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000

080049f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e25e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8087 	beq.w	8004b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a18:	4b96      	ldr	r3, [pc, #600]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a24:	4b93      	ldr	r3, [pc, #588]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d112      	bne.n	8004a56 <HAL_RCC_OscConfig+0x62>
 8004a30:	4b90      	ldr	r3, [pc, #576]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x130>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d168      	bne.n	8004b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e238      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x7a>
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a83      	ldr	r2, [pc, #524]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e02e      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x9c>
 8004a76:	4b7f      	ldr	r3, [pc, #508]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b7c      	ldr	r3, [pc, #496]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a7b      	ldr	r2, [pc, #492]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xc0>
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a75      	ldr	r2, [pc, #468]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b73      	ldr	r3, [pc, #460]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a72      	ldr	r2, [pc, #456]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a6b      	ldr	r2, [pc, #428]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd f824 	bl	8001b20 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd f820 	bl	8001b20 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1ec      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xe8>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd f810 	bl	8001b20 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd f80c 	bl	8001b20 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1d8      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x110>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d069      	beq.n	8004c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b4d      	ldr	r3, [pc, #308]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d11c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x190>
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x17a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e1ac      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	493d      	ldr	r1, [pc, #244]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	e040      	b.n	8004c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d023      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8c:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fc ffc2 	bl	8001b20 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fc ffbe 	bl	8001b20 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e18a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4929      	ldr	r1, [pc, #164]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	e018      	b.n	8004c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd4:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fc ff9e 	bl	8001b20 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fc ff9a 	bl	8001b20 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e166      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d038      	beq.n	8004c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d019      	beq.n	8004c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1e:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fc ff7b 	bl	8001b20 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fc ff77 	bl	8001b20 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e143      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x23a>
 8004c4c:	e01a      	b.n	8004c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fc ff61 	bl	8001b20 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fc ff5d 	bl	8001b20 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d903      	bls.n	8004c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e129      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
 8004c74:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	4b95      	ldr	r3, [pc, #596]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a4 	beq.w	8004dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b8f      	ldr	r3, [pc, #572]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b8c      	ldr	r3, [pc, #560]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4a8b      	ldr	r2, [pc, #556]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8004caa:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cba:	4b86      	ldr	r3, [pc, #536]	; (8004ed4 <HAL_RCC_OscConfig+0x4e0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cc6:	4b83      	ldr	r3, [pc, #524]	; (8004ed4 <HAL_RCC_OscConfig+0x4e0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a82      	ldr	r2, [pc, #520]	; (8004ed4 <HAL_RCC_OscConfig+0x4e0>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fc ff25 	bl	8001b20 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fc ff21 	bl	8001b20 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	; 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0ed      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cec:	4b79      	ldr	r3, [pc, #484]	; (8004ed4 <HAL_RCC_OscConfig+0x4e0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x31a>
 8004d00:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a72      	ldr	r2, [pc, #456]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0c:	e02d      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x33c>
 8004d16:	4b6e      	ldr	r3, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4a6d      	ldr	r2, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70
 8004d22:	4b6b      	ldr	r3, [pc, #428]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a6a      	ldr	r2, [pc, #424]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x35e>
 8004d38:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a64      	ldr	r2, [pc, #400]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
 8004d44:	4b62      	ldr	r3, [pc, #392]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a61      	ldr	r2, [pc, #388]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a5b      	ldr	r2, [pc, #364]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fc fed5 	bl	8001b20 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fc fed1 	bl	8001b20 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e09b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x386>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fc febf 	bl	8001b20 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc febb 	bl	8001b20 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e085      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b44      	ldr	r3, [pc, #272]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a3f      	ldr	r2, [pc, #252]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d071      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de2:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d069      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d14b      	bne.n	8004e8e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a35      	ldr	r2, [pc, #212]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fc fe8d 	bl	8001b20 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fc fe89 	bl	8001b20 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e055      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	019b      	lsls	r3, r3, #6
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	3b01      	subs	r3, #1
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	071b      	lsls	r3, r3, #28
 8004e54:	491e      	ldr	r1, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fc fe5b 	bl	8001b20 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fc fe57 	bl	8001b20 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e023      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x47a>
 8004e8c:	e01b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fc fe41 	bl	8001b20 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fc fe3d 	bl	8001b20 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_OscConfig+0x4dc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x4ae>
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0ce      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b69      	ldr	r3, [pc, #420]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d910      	bls.n	8004f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	4964      	ldr	r1, [pc, #400]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0b6      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d020      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f38:	4b58      	ldr	r3, [pc, #352]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a57      	ldr	r2, [pc, #348]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f50:	4b52      	ldr	r3, [pc, #328]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4a51      	ldr	r2, [pc, #324]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	494c      	ldr	r1, [pc, #304]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d040      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d115      	bne.n	8004fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e07d      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	4b40      	ldr	r3, [pc, #256]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e071      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b3c      	ldr	r3, [pc, #240]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e069      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fba:	4b38      	ldr	r3, [pc, #224]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4935      	ldr	r1, [pc, #212]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fc fda8 	bl	8001b20 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fc fda4 	bl	8001b20 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e051      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 020c 	and.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1eb      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b26      	ldr	r3, [pc, #152]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d210      	bcs.n	800502c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	4921      	ldr	r1, [pc, #132]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e030      	b.n	800508e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4915      	ldr	r1, [pc, #84]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	490d      	ldr	r1, [pc, #52]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800506a:	f000 f81d 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 800506e:	4601      	mov	r1, r0
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
 800507e:	fa21 f303 	lsr.w	r3, r1, r3
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <HAL_RCC_ClockConfig+0x1cc>)
 8005084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005086:	2000      	movs	r0, #0
 8005088:	f7fc fd06 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023c00 	.word	0x40023c00
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800a9c4 	.word	0x0800a9c4
 80050a4:	2000003c 	.word	0x2000003c

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	2300      	movs	r3, #0
 80050b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050be:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d007      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x32>
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d008      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x38>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 808d 	bne.w	80051ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80050d6:	60bb      	str	r3, [r7, #8]
       break;
 80050d8:	e08c      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050da:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80050dc:	60bb      	str	r3, [r7, #8]
      break;
 80050de:	e089      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050ea:	4b45      	ldr	r3, [pc, #276]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d023      	beq.n	800513e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f6:	4b42      	ldr	r3, [pc, #264]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	ea03 0501 	and.w	r5, r3, r1
 800510c:	ea04 0602 	and.w	r6, r4, r2
 8005110:	4a3d      	ldr	r2, [pc, #244]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 8005112:	fb02 f106 	mul.w	r1, r2, r6
 8005116:	2200      	movs	r2, #0
 8005118:	fb02 f205 	mul.w	r2, r2, r5
 800511c:	440a      	add	r2, r1
 800511e:	493a      	ldr	r1, [pc, #232]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 8005120:	fba5 0101 	umull	r0, r1, r5, r1
 8005124:	1853      	adds	r3, r2, r1
 8005126:	4619      	mov	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	461a      	mov	r2, r3
 8005130:	4623      	mov	r3, r4
 8005132:	f7fb f8d5 	bl	80002e0 <__aeabi_uldivmod>
 8005136:	4603      	mov	r3, r0
 8005138:	460c      	mov	r4, r1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e049      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513e:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	099b      	lsrs	r3, r3, #6
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	f240 11ff 	movw	r1, #511	; 0x1ff
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	ea03 0501 	and.w	r5, r3, r1
 8005154:	ea04 0602 	and.w	r6, r4, r2
 8005158:	4629      	mov	r1, r5
 800515a:	4632      	mov	r2, r6
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	0154      	lsls	r4, r2, #5
 8005166:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800516a:	014b      	lsls	r3, r1, #5
 800516c:	4619      	mov	r1, r3
 800516e:	4622      	mov	r2, r4
 8005170:	1b49      	subs	r1, r1, r5
 8005172:	eb62 0206 	sbc.w	r2, r2, r6
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	0194      	lsls	r4, r2, #6
 8005180:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005184:	018b      	lsls	r3, r1, #6
 8005186:	1a5b      	subs	r3, r3, r1
 8005188:	eb64 0402 	sbc.w	r4, r4, r2
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	00e2      	lsls	r2, r4, #3
 8005196:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800519a:	00d9      	lsls	r1, r3, #3
 800519c:	460b      	mov	r3, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	195b      	adds	r3, r3, r5
 80051a2:	eb44 0406 	adc.w	r4, r4, r6
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	02a2      	lsls	r2, r4, #10
 80051b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051b4:	0299      	lsls	r1, r3, #10
 80051b6:	460b      	mov	r3, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	4621      	mov	r1, r4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	461a      	mov	r2, r3
 80051c6:	4623      	mov	r3, r4
 80051c8:	f7fb f88a 	bl	80002e0 <__aeabi_uldivmod>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_GetSysClockFreq+0x158>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	3301      	adds	r3, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80051f0:	60bb      	str	r3, [r7, #8]
      break;
 80051f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f4:	68bb      	ldr	r3, [r7, #8]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400
 8005208:	017d7840 	.word	0x017d7840

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005234:	4b69      	ldr	r3, [pc, #420]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800523e:	6093      	str	r3, [r2, #8]
 8005240:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	4964      	ldr	r1, [pc, #400]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005256:	2301      	movs	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005266:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	4959      	ldr	r1, [pc, #356]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005284:	d101      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005286:	2301      	movs	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d017      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052a2:	4b4e      	ldr	r3, [pc, #312]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	494a      	ldr	r1, [pc, #296]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c0:	d101      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808b 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4a39      	ldr	r2, [pc, #228]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6413      	str	r3, [r2, #64]	; 0x40
 80052fc:	4b37      	ldr	r3, [pc, #220]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a34      	ldr	r2, [pc, #208]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800530e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005314:	f7fc fc04 	bl	8001b20 <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531c:	f7fc fc00 	bl	8001b20 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e38d      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800532e:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800533a:	4b28      	ldr	r3, [pc, #160]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d035      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d02e      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005358:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005362:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d114      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fc fbc8 	bl	8001b20 <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005392:	e00a      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fc fbc4 	bl	8001b20 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e34f      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ee      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c2:	d111      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053d2:	400b      	ands	r3, r1
 80053d4:	4901      	ldr	r1, [pc, #4]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
 80053da:	e00b      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40007000 	.word	0x40007000
 80053e4:	0ffffcff 	.word	0x0ffffcff
 80053e8:	4bb3      	ldr	r3, [pc, #716]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4ab2      	ldr	r2, [pc, #712]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	4bb0      	ldr	r3, [pc, #704]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005400:	49ad      	ldr	r1, [pc, #692]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005402:	4313      	orrs	r3, r2
 8005404:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d010      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005412:	4ba9      	ldr	r3, [pc, #676]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005418:	4aa7      	ldr	r2, [pc, #668]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800541a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005422:	4ba5      	ldr	r3, [pc, #660]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005424:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	49a2      	ldr	r1, [pc, #648]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005440:	4b9d      	ldr	r3, [pc, #628]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544e:	499a      	ldr	r1, [pc, #616]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005462:	4b95      	ldr	r3, [pc, #596]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005470:	4991      	ldr	r1, [pc, #580]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005484:	4b8c      	ldr	r3, [pc, #560]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005492:	4989      	ldr	r1, [pc, #548]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a6:	4b84      	ldr	r3, [pc, #528]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	4980      	ldr	r1, [pc, #512]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c8:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4978      	ldr	r1, [pc, #480]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ea:	4b73      	ldr	r3, [pc, #460]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f023 020c 	bic.w	r2, r3, #12
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	496f      	ldr	r1, [pc, #444]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800550c:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551a:	4967      	ldr	r1, [pc, #412]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800552e:	4b62      	ldr	r3, [pc, #392]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	495e      	ldr	r1, [pc, #376]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005550:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	4956      	ldr	r1, [pc, #344]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005572:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	494d      	ldr	r1, [pc, #308]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005594:	4b48      	ldr	r3, [pc, #288]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	4945      	ldr	r1, [pc, #276]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055b6:	4b40      	ldr	r3, [pc, #256]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c4:	493c      	ldr	r1, [pc, #240]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055d8:	4b37      	ldr	r3, [pc, #220]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e6:	4934      	ldr	r1, [pc, #208]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055fa:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005608:	492b      	ldr	r1, [pc, #172]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800563a:	4b1f      	ldr	r3, [pc, #124]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	491b      	ldr	r1, [pc, #108]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566c:	4912      	ldr	r1, [pc, #72]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005690:	4909      	ldr	r1, [pc, #36]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00f      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b4:	e002      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800
 80056bc:	4985      	ldr	r1, [pc, #532]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056d0:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e0:	497c      	ldr	r1, [pc, #496]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d005      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f6:	f040 80d6 	bne.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056fa:	4b76      	ldr	r3, [pc, #472]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a75      	ldr	r2, [pc, #468]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005706:	f7fc fa0b 	bl	8001b20 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800570e:	f7fc fa07 	bl	8001b20 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b64      	cmp	r3, #100	; 0x64
 800571a:	d901      	bls.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e194      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005720:	4b6c      	ldr	r3, [pc, #432]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d021      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11d      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005740:	4b64      	ldr	r3, [pc, #400]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800574e:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	019a      	lsls	r2, r3, #6
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	431a      	orrs	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	061b      	lsls	r3, r3, #24
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	071b      	lsls	r3, r3, #28
 8005774:	4957      	ldr	r1, [pc, #348]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005790:	d00a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02e      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a6:	d129      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057a8:	4b4a      	ldr	r3, [pc, #296]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057b6:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057bc:	0f1b      	lsrs	r3, r3, #28
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	019a      	lsls	r2, r3, #6
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	071b      	lsls	r3, r3, #28
 80057dc:	493d      	ldr	r1, [pc, #244]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ea:	f023 021f 	bic.w	r2, r3, #31
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4937      	ldr	r1, [pc, #220]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01d      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005808:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580e:	0e1b      	lsrs	r3, r3, #24
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	0f1b      	lsrs	r3, r3, #28
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	019a      	lsls	r2, r3, #6
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	431a      	orrs	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	431a      	orrs	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	071b      	lsls	r3, r3, #28
 800583c:	4925      	ldr	r1, [pc, #148]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d011      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	019a      	lsls	r2, r3, #6
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	071b      	lsls	r3, r3, #28
 800586c:	4919      	ldr	r1, [pc, #100]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005874:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800587a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800587e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005880:	f7fc f94e 	bl	8001b20 <HAL_GetTick>
 8005884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005888:	f7fc f94a 	bl	8001b20 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e0d7      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800589a:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	f040 80cd 	bne.w	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ba:	f7fc f931 	bl	8001b20 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058c2:	f7fc f92d 	bl	8001b20 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b64      	cmp	r3, #100	; 0x64
 80058ce:	d903      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e0ba      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80058d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058d8:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e4:	d0ed      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02e      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12a      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800590e:	4b51      	ldr	r3, [pc, #324]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800591c:	4b4d      	ldr	r3, [pc, #308]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	0f1b      	lsrs	r3, r3, #28
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	019a      	lsls	r2, r3, #6
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	431a      	orrs	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	4944      	ldr	r1, [pc, #272]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800594a:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800594c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005950:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	493d      	ldr	r1, [pc, #244]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d022      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d11d      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800597a:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	0e1b      	lsrs	r3, r3, #24
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	0f1b      	lsrs	r3, r3, #28
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	019a      	lsls	r2, r3, #6
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	041b      	lsls	r3, r3, #16
 80059a2:	431a      	orrs	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	061b      	lsls	r3, r3, #24
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	071b      	lsls	r3, r3, #28
 80059ae:	4929      	ldr	r1, [pc, #164]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d028      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059c2:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	0e1b      	lsrs	r3, r3, #24
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059d0:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	019a      	lsls	r2, r3, #6
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	431a      	orrs	r2, r3
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	4917      	ldr	r1, [pc, #92]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4911      	ldr	r1, [pc, #68]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7fc f87e 	bl	8001b20 <HAL_GetTick>
 8005a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a28:	f7fc f87a 	bl	8001b20 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e007      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a46:	d1ef      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40023800 	.word	0x40023800

08005a58 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e025      	b.n	8005ab8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fbcd 	bl	8007220 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fb13 	bl	80060c4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	f000 fb7d 	bl	80061a8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d101      	bne.n	8005adc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e018      	b.n	8005b0e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fbdb 	bl	80062a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d104      	bne.n	8005b04 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2205      	movs	r2, #5
 8005afe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005b02:	e003      	b.n	8005b0c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d101      	bne.n	8005b30 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e00e      	b.n	8005b4e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fbd3 	bl	80062ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e01d      	b.n	8005ba4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 fa85 	bl	800708c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f000 f97b 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_TIM_Base_Start_IT+0x50>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b06      	cmp	r3, #6
 8005bd4:	d00b      	beq.n	8005bee <HAL_TIM_Base_Start_IT+0x42>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bdc:	d007      	beq.n	8005bee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d122      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d11b      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0202 	mvn.w	r2, #2
 8005c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f905 	bl	8005e52 <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8f7 	bl	8005e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f908 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d122      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d11b      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0204 	mvn.w	r2, #4
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8db 	bl	8005e52 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8cd 	bl	8005e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8de 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0208 	mvn.w	r2, #8
 8005cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8b1 	bl	8005e52 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8a3 	bl	8005e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f8b4 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0210 	mvn.w	r2, #16
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f887 	bl	8005e52 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f879 	bl	8005e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f88a 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d10e      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0201 	mvn.w	r2, #1
 8005d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb26 	bl	80063d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d10e      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f976 	bl	800609c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d10e      	bne.n	8005dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b80      	cmp	r3, #128	; 0x80
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f969 	bl	80060b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d10e      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d107      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f838 	bl	8005e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0220 	mvn.w	r2, #32
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f929 	bl	8006088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3d      	ldr	r2, [pc, #244]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x40>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a3a      	ldr	r2, [pc, #232]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d027      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <TIM_Base_SetConfig+0x118>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d023      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <TIM_Base_SetConfig+0x11c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <TIM_Base_SetConfig+0x120>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d017      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a28      	ldr	r2, [pc, #160]	; (8005fb8 <TIM_Base_SetConfig+0x128>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <TIM_Base_SetConfig+0x12c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00f      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <TIM_Base_SetConfig+0x130>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <TIM_Base_SetConfig+0x134>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <TIM_Base_SetConfig+0x138>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <TIM_Base_SetConfig+0x13c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d108      	bne.n	8005f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <TIM_Base_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0xf8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d103      	bne.n	8005f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	615a      	str	r2, [r3, #20]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	40001800 	.word	0x40001800
 8005fc8:	40001c00 	.word	0x40001c00
 8005fcc:	40002000 	.word	0x40002000

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e045      	b.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006046:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d027      	beq.n	800612e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <FMC_SDRAM_Init+0xe0>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060f4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80060fa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006100:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006106:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800610c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006112:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006118:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800611e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e032      	b.n	8006194 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800613a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006144:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800614a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <FMC_SDRAM_Init+0xe0>)
 800615c:	4013      	ands	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006168:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800616e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006174:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800617a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006180:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	ffff8000 	.word	0xffff8000

080061a8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d02e      	beq.n	8006220 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061ce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	3b01      	subs	r3, #1
 80061dc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80061e8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80061f2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80061fc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	3b01      	subs	r3, #1
 8006204:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006206:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	3b01      	subs	r3, #1
 800620e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006210:	4313      	orrs	r3, r2
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	609a      	str	r2, [r3, #8]
 800621e:	e039      	b.n	8006294 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <FMC_SDRAM_Timing_Init+0xfc>)
 800622a:	4013      	ands	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	3b01      	subs	r3, #1
 8006234:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	3b01      	subs	r3, #1
 800623c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800623e:	4313      	orrs	r3, r2
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006252:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	3b01      	subs	r3, #1
 8006260:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006262:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	3b01      	subs	r3, #1
 800626a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800626c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	3b01      	subs	r3, #1
 8006274:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006276:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	3b01      	subs	r3, #1
 800627e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006280:	4313      	orrs	r3, r2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	ff0f0fff 	.word	0xff0f0fff

080062a8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80062c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80062ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <SCB_EnableICache>:
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006318:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <SCB_EnableICache+0x3c>)
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006328:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <SCB_EnableICache+0x3c>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	4a06      	ldr	r2, [pc, #24]	; (800634c <SCB_EnableICache+0x3c>)
 8006332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006336:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800633c:	f3bf 8f6f 	isb	sy
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <SCB_EnableDCache>:
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <SCB_EnableDCache+0x7c>)
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800635e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <SCB_EnableDCache+0x7c>)
 8006364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006368:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0b5b      	lsrs	r3, r3, #13
 800636e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006372:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006386:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800638c:	490f      	ldr	r1, [pc, #60]	; (80063cc <SCB_EnableDCache+0x7c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	1e5a      	subs	r2, r3, #1
 8006398:	60ba      	str	r2, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1ef      	bne.n	800637e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1e5a      	subs	r2, r3, #1
 80063a2:	60fa      	str	r2, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <SCB_EnableDCache+0x24>
 80063a8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <SCB_EnableDCache+0x7c>)
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <SCB_EnableDCache+0x7c>)
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b6:	6153      	str	r3, [r2, #20]
 80063b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063bc:	f3bf 8f6f 	isb	sy
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <HAL_TIM_PeriodElapsedCallback>:
long int JTemp;
char desc[100];


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d12f      	bne.n	8006442 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		flag=1;
 80063e2:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
		count++;
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	4a19      	ldr	r2, [pc, #100]	; (8006454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80063f0:	6013      	str	r3, [r2, #0]

		  if (count%2 == 0){
 80063f2:	4b18      	ldr	r3, [pc, #96]	; (8006454 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d121      	bne.n	8006442 <HAL_TIM_PeriodElapsedCallback+0x72>
			  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 80063fe:	4816      	ldr	r0, [pc, #88]	; (8006458 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006400:	f7fb fcc0 	bl	8001d84 <HAL_ADC_GetValue>
 8006404:	4602      	mov	r2, r0
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006408:	601a      	str	r2, [r3, #0]
			  	  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8006412:	fb02 f203 	mul.w	r2, r2, r3
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006418:	fba3 1302 	umull	r1, r3, r3, r2
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	0852      	lsrs	r2, r2, #1
 8006420:	4413      	add	r3, r2
 8006422:	0ada      	lsrs	r2, r3, #11
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	461a      	mov	r2, r3
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8006430:	4413      	add	r3, r2
 8006432:	4a0d      	ldr	r2, [pc, #52]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	3319      	adds	r3, #25
 800643c:	461a      	mov	r2, r3
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006440:	601a      	str	r2, [r3, #0]
		  }
	}
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40001000 	.word	0x40001000
 8006450:	20000264 	.word	0x20000264
 8006454:	20000268 	.word	0x20000268
 8006458:	20000498 	.word	0x20000498
 800645c:	200003d0 	.word	0x200003d0
 8006460:	00100101 	.word	0x00100101
 8006464:	ffffe250 	.word	0xffffe250
 8006468:	51eb851f 	.word	0x51eb851f
 800646c:	200004e0 	.word	0x200004e0

08006470 <imprime_tabuleiro>:

void imprime_tabuleiro(){
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	ed2d 8b02 	vpush	{d8}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0

	  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800647a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800647e:	f7fa fd3d 	bl	8000efc <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10, 400, 400);
 8006482:	f7fa fcc3 	bl	8000e0c <BSP_LCD_GetXSize>
 8006486:	4602      	mov	r2, r0
 8006488:	4b45      	ldr	r3, [pc, #276]	; (80065a0 <imprime_tabuleiro+0x130>)
 800648a:	fba3 2302 	umull	r2, r3, r3, r2
 800648e:	08db      	lsrs	r3, r3, #3
 8006490:	b29c      	uxth	r4, r3
 8006492:	f7fa fcc7 	bl	8000e24 <BSP_LCD_GetYSize>
 8006496:	4602      	mov	r2, r0
 8006498:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <imprime_tabuleiro+0x130>)
 800649a:	fba3 2302 	umull	r2, r3, r3, r2
 800649e:	08db      	lsrs	r3, r3, #3
 80064a0:	b299      	uxth	r1, r3
 80064a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80064a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7fa ff22 	bl	80012f4 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80064b0:	483c      	ldr	r0, [pc, #240]	; (80065a4 <imprime_tabuleiro+0x134>)
 80064b2:	f7fa fd23 	bl	8000efc <BSP_LCD_SetTextColor>
	  int i=0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
	  for(i = 0; i<=8; i++){
 80064ba:	2300      	movs	r3, #0
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	e024      	b.n	800650a <imprime_tabuleiro+0x9a>
		  BSP_LCD_DrawVLine(BSP_LCD_GetXSize()/10 + (BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 80064c0:	f7fa fca4 	bl	8000e0c <BSP_LCD_GetXSize>
 80064c4:	4602      	mov	r2, r0
 80064c6:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <imprime_tabuleiro+0x130>)
 80064c8:	fba3 2302 	umull	r2, r3, r3, r2
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	b29c      	uxth	r4, r3
 80064d0:	f7fa fc9c 	bl	8000e0c <BSP_LCD_GetXSize>
 80064d4:	4603      	mov	r3, r0
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	b29a      	uxth	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	fb12 f303 	smulbb	r3, r2, r3
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4423      	add	r3, r4
 80064e6:	b29c      	uxth	r4, r3
 80064e8:	f7fa fc9c 	bl	8000e24 <BSP_LCD_GetYSize>
 80064ec:	4602      	mov	r2, r0
 80064ee:	4b2c      	ldr	r3, [pc, #176]	; (80065a0 <imprime_tabuleiro+0x130>)
 80064f0:	fba3 2302 	umull	r2, r3, r3, r2
 80064f4:	08db      	lsrs	r3, r3, #3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80064fc:	4619      	mov	r1, r3
 80064fe:	4620      	mov	r0, r4
 8006500:	f7fa feb6 	bl	8001270 <BSP_LCD_DrawVLine>
	  for(i = 0; i<=8; i++){
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3301      	adds	r3, #1
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b08      	cmp	r3, #8
 800650e:	ddd7      	ble.n	80064c0 <imprime_tabuleiro+0x50>
	  }
	  int j;
	  for(j = 0; j<=8; j++){
 8006510:	2300      	movs	r3, #0
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	e033      	b.n	800657e <imprime_tabuleiro+0x10e>
		  BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10 + (BSP_LCD_GetYSize()/9.6)*j, 400);
 8006516:	f7fa fc79 	bl	8000e0c <BSP_LCD_GetXSize>
 800651a:	4602      	mov	r2, r0
 800651c:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <imprime_tabuleiro+0x130>)
 800651e:	fba3 2302 	umull	r2, r3, r3, r2
 8006522:	08db      	lsrs	r3, r3, #3
 8006524:	b29c      	uxth	r4, r3
 8006526:	f7fa fc7d 	bl	8000e24 <BSP_LCD_GetYSize>
 800652a:	4602      	mov	r2, r0
 800652c:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <imprime_tabuleiro+0x130>)
 800652e:	fba3 2302 	umull	r2, r3, r3, r2
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800653c:	f7fa fc72 	bl	8000e24 <BSP_LCD_GetYSize>
 8006540:	ee07 0a90 	vmov	s15, r0
 8006544:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006548:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8006598 <imprime_tabuleiro+0x128>
 800654c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800655a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800655e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006562:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006566:	ee17 3a90 	vmov	r3, s15
 800656a:	b29b      	uxth	r3, r3
 800656c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006570:	4619      	mov	r1, r3
 8006572:	4620      	mov	r0, r4
 8006574:	f7fa fe3e 	bl	80011f4 <BSP_LCD_DrawHLine>
	  for(j = 0; j<=8; j++){
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b08      	cmp	r3, #8
 8006582:	ddc8      	ble.n	8006516 <imprime_tabuleiro+0xa6>
	  }
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006584:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006588:	f7fa fcb8 	bl	8000efc <BSP_LCD_SetTextColor>

}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	ecbd 8b02 	vpop	{d8}
 8006596:	bd90      	pop	{r4, r7, pc}
 8006598:	33333333 	.word	0x33333333
 800659c:	40233333 	.word	0x40233333
 80065a0:	cccccccd 	.word	0xcccccccd
 80065a4:	ffffa500 	.word	0xffffa500

080065a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80065ac:	f7ff feb0 	bl	8006310 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80065b0:	f7ff fece 	bl	8006350 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065b4:	f7fb fa62 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065b8:	f000 f85c 	bl	8006674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065bc:	f000 fbac 	bl	8006d18 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80065c0:	f000 f946 	bl	8006850 <MX_DMA2D_Init>
  MX_FMC_Init();
 80065c4:	f000 fb5a 	bl	8006c7c <MX_FMC_Init>
  MX_LTDC_Init();
 80065c8:	f000 fa6e 	bl	8006aa8 <MX_LTDC_Init>
  MX_ADC1_Init();
 80065cc:	f000 f8ec 	bl	80067a8 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 80065d0:	f000 f976 	bl	80068c0 <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 80065d4:	f000 fb1a 	bl	8006c0c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80065d8:	481e      	ldr	r0, [pc, #120]	; (8006654 <main+0xac>)
 80065da:	f7ff fae7 	bl	8005bac <HAL_TIM_Base_Start_IT>
  LCD_Config();
 80065de:	f000 fc07 	bl	8006df0 <LCD_Config>
  BSP_LED_Init(LED_GREEN);
 80065e2:	2001      	movs	r0, #1
 80065e4:	f7fa fa52 	bl	8000a8c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7fa fa4f 	bl	8000a8c <BSP_LED_Init>
//start do adc
  HAL_ADC_Start(&hadc1);
 80065ee:	481a      	ldr	r0, [pc, #104]	; (8006658 <main+0xb0>)
 80065f0:	f7fb fb08 	bl	8001c04 <HAL_ADC_Start>
  imprime_tabuleiro();
 80065f4:	f7ff ff3c 	bl	8006470 <imprime_tabuleiro>
  while (1)
  {


  	  //Mostrar a temperatura
	  sprintf(desc, "Temperatura: %ld C", JTemp);
 80065f8:	4b18      	ldr	r3, [pc, #96]	; (800665c <main+0xb4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	4918      	ldr	r1, [pc, #96]	; (8006660 <main+0xb8>)
 8006600:	4818      	ldr	r0, [pc, #96]	; (8006664 <main+0xbc>)
 8006602:	f000 ff0d 	bl	8007420 <siprintf>
	  BSP_LCD_SetFont(&Font12);
 8006606:	4818      	ldr	r0, [pc, #96]	; (8006668 <main+0xc0>)
 8006608:	f7fa fcaa 	bl	8000f60 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 90, (uint8_t *)desc, RIGHT_MODE);
 800660c:	f7fa fc0a 	bl	8000e24 <BSP_LCD_GetYSize>
 8006610:	4603      	mov	r3, r0
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b5a      	subs	r3, #90	; 0x5a
 8006618:	b299      	uxth	r1, r3
 800661a:	2302      	movs	r3, #2
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <main+0xbc>)
 800661e:	2000      	movs	r0, #0
 8006620:	f7fa fd24 	bl	800106c <BSP_LCD_DisplayStringAt>

	  //Mostrar o tempo
	  sprintf(desc, "Tempo: %d segundos", count);
 8006624:	4b11      	ldr	r3, [pc, #68]	; (800666c <main+0xc4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	4911      	ldr	r1, [pc, #68]	; (8006670 <main+0xc8>)
 800662c:	480d      	ldr	r0, [pc, #52]	; (8006664 <main+0xbc>)
 800662e:	f000 fef7 	bl	8007420 <siprintf>
	  BSP_LCD_SetFont(&Font12);
 8006632:	480d      	ldr	r0, [pc, #52]	; (8006668 <main+0xc0>)
 8006634:	f7fa fc94 	bl	8000f60 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 70, (uint8_t *)desc, RIGHT_MODE);
 8006638:	f7fa fbf4 	bl	8000e24 <BSP_LCD_GetYSize>
 800663c:	4603      	mov	r3, r0
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b46      	subs	r3, #70	; 0x46
 8006644:	b299      	uxth	r1, r3
 8006646:	2302      	movs	r3, #2
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <main+0xbc>)
 800664a:	2000      	movs	r0, #0
 800664c:	f7fa fd0e 	bl	800106c <BSP_LCD_DisplayStringAt>
	  sprintf(desc, "Temperatura: %ld C", JTemp);
 8006650:	e7d2      	b.n	80065f8 <main+0x50>
 8006652:	bf00      	nop
 8006654:	200004e4 	.word	0x200004e4
 8006658:	20000498 	.word	0x20000498
 800665c:	200004e0 	.word	0x200004e0
 8006660:	08007c44 	.word	0x08007c44
 8006664:	20000524 	.word	0x20000524
 8006668:	20000020 	.word	0x20000020
 800666c:	20000268 	.word	0x20000268
 8006670:	08007c58 	.word	0x08007c58

08006674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b0b8      	sub	sp, #224	; 0xe0
 8006678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800667a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800667e:	2234      	movs	r2, #52	; 0x34
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fec4 	bl	8007410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006688:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	2290      	movs	r2, #144	; 0x90
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 feb5 	bl	8007410 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <SystemClock_Config+0x12c>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a3d      	ldr	r2, [pc, #244]	; (80067a0 <SystemClock_Config+0x12c>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b3b      	ldr	r3, [pc, #236]	; (80067a0 <SystemClock_Config+0x12c>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066be:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <SystemClock_Config+0x130>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a38      	ldr	r2, [pc, #224]	; (80067a4 <SystemClock_Config+0x130>)
 80066c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <SystemClock_Config+0x130>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066e4:	2302      	movs	r3, #2
 80066e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80066f2:	2319      	movs	r3, #25
 80066f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 80066f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80066fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006700:	2302      	movs	r3, #2
 8006702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006706:	2302      	movs	r3, #2
 8006708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800670c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe f96f 	bl	80049f4 <HAL_RCC_OscConfig>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800671c:	f000 fbc8 	bl	8006eb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006720:	f7fe f918 	bl	8004954 <HAL_PWREx_EnableOverDrive>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800672a:	f000 fbc1 	bl	8006eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800672e:	230f      	movs	r3, #15
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006734:	2302      	movs	r3, #2
 8006736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8006750:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006754:	2106      	movs	r1, #6
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fbbe 	bl	8004ed8 <HAL_RCC_ClockConfig>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8006762:	f000 fba5 	bl	8006eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006766:	2308      	movs	r3, #8
 8006768:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800676a:	23c0      	movs	r3, #192	; 0xc0
 800676c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800676e:	2302      	movs	r3, #2
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006772:	2302      	movs	r3, #2
 8006774:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8006776:	2300      	movs	r3, #0
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800677a:	2301      	movs	r3, #1
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006782:	f107 0308 	add.w	r3, r7, #8
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fd40 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8006792:	f000 fb8d 	bl	8006eb0 <Error_Handler>
  }
}
 8006796:	bf00      	nop
 8006798:	37e0      	adds	r7, #224	; 0xe0
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40007000 	.word	0x40007000

080067a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80067ae:	463b      	mov	r3, r7
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <MX_ADC1_Init+0x98>)
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <MX_ADC1_Init+0x9c>)
 80067be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <MX_ADC1_Init+0x98>)
 80067c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <MX_ADC1_Init+0x98>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80067ce:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <MX_ADC1_Init+0x98>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80067d4:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <MX_ADC1_Init+0x98>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80067da:	4b19      	ldr	r3, [pc, #100]	; (8006840 <MX_ADC1_Init+0x98>)
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <MX_ADC1_Init+0x98>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <MX_ADC1_Init+0x98>)
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <MX_ADC1_Init+0xa0>)
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80067ee:	4b14      	ldr	r3, [pc, #80]	; (8006840 <MX_ADC1_Init+0x98>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <MX_ADC1_Init+0x98>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80067fa:	4b11      	ldr	r3, [pc, #68]	; (8006840 <MX_ADC1_Init+0x98>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006802:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <MX_ADC1_Init+0x98>)
 8006804:	2200      	movs	r2, #0
 8006806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006808:	480d      	ldr	r0, [pc, #52]	; (8006840 <MX_ADC1_Init+0x98>)
 800680a:	f7fb f9b7 	bl	8001b7c <HAL_ADC_Init>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006814:	f000 fb4c 	bl	8006eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <MX_ADC1_Init+0xa4>)
 800681a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800681c:	2301      	movs	r3, #1
 800681e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006820:	2303      	movs	r3, #3
 8006822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006824:	463b      	mov	r3, r7
 8006826:	4619      	mov	r1, r3
 8006828:	4805      	ldr	r0, [pc, #20]	; (8006840 <MX_ADC1_Init+0x98>)
 800682a:	f7fb fab9 	bl	8001da0 <HAL_ADC_ConfigChannel>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006834:	f000 fb3c 	bl	8006eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000498 	.word	0x20000498
 8006844:	40012000 	.word	0x40012000
 8006848:	0f000001 	.word	0x0f000001
 800684c:	10000012 	.word	0x10000012

08006850 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006856:	4a19      	ldr	r2, [pc, #100]	; (80068bc <MX_DMA2D_Init+0x6c>)
 8006858:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <MX_DMA2D_Init+0x68>)
 800685c:	2200      	movs	r2, #0
 800685e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006860:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006862:	2200      	movs	r2, #0
 8006864:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006868:	2200      	movs	r2, #0
 800686a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <MX_DMA2D_Init+0x68>)
 800686e:	2200      	movs	r2, #0
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006874:	2200      	movs	r2, #0
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <MX_DMA2D_Init+0x68>)
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006880:	2200      	movs	r2, #0
 8006882:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006886:	2200      	movs	r2, #0
 8006888:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <MX_DMA2D_Init+0x68>)
 800688c:	2200      	movs	r2, #0
 800688e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006890:	4809      	ldr	r0, [pc, #36]	; (80068b8 <MX_DMA2D_Init+0x68>)
 8006892:	f7fb ff81 	bl	8002798 <HAL_DMA2D_Init>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800689c:	f000 fb08 	bl	8006eb0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80068a0:	2101      	movs	r1, #1
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <MX_DMA2D_Init+0x68>)
 80068a4:	f7fc f8e6 	bl	8002a74 <HAL_DMA2D_ConfigLayer>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80068ae:	f000 faff 	bl	8006eb0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000588 	.word	0x20000588
 80068bc:	4002b000 	.word	0x4002b000

080068c0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b0aa      	sub	sp, #168	; 0xa8
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80068c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80068d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068d6:	2224      	movs	r2, #36	; 0x24
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fd98 	bl	8007410 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80068e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	611a      	str	r2, [r3, #16]
 80068f0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80068f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068f6:	2234      	movs	r2, #52	; 0x34
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fd88 	bl	8007410 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8006900:	463b      	mov	r3, r7
 8006902:	222c      	movs	r2, #44	; 0x2c
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fd82 	bl	8007410 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800690c:	4b64      	ldr	r3, [pc, #400]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800690e:	4a65      	ldr	r2, [pc, #404]	; (8006aa4 <MX_DSIHOST_DSI_Init+0x1e4>)
 8006910:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8006912:	4b63      	ldr	r3, [pc, #396]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8006918:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800691a:	2204      	movs	r2, #4
 800691c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800691e:	4b60      	ldr	r3, [pc, #384]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006920:	2200      	movs	r2, #0
 8006922:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8006924:	2314      	movs	r3, #20
 8006926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800692a:	2301      	movs	r3, #1
 800692c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8006930:	2300      	movs	r3, #0
 8006932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8006936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800693a:	4619      	mov	r1, r3
 800693c:	4858      	ldr	r0, [pc, #352]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800693e:	f7fc fa1b 	bl	8002d78 <HAL_DSI_Init>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8006948:	f000 fab2 	bl	8006eb0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800694c:	2301      	movs	r3, #1
 800694e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800697e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006982:	4619      	mov	r1, r3
 8006984:	4846      	ldr	r0, [pc, #280]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006986:	f7fd f833 	bl	80039f0 <HAL_DSI_ConfigHostTimeouts>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8006990:	f000 fa8e 	bl	8006eb0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8006994:	231c      	movs	r3, #28
 8006996:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8006998:	2321      	movs	r3, #33	; 0x21
 800699a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800699c:	230f      	movs	r3, #15
 800699e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80069a0:	2319      	movs	r3, #25
 80069a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80069ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80069b0:	4619      	mov	r1, r3
 80069b2:	483b      	ldr	r0, [pc, #236]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 80069b4:	f7fc ffb2 	bl	800391c <HAL_DSI_ConfigPhyTimer>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80069be:	f000 fa77 	bl	8006eb0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80069c2:	2104      	movs	r1, #4
 80069c4:	4836      	ldr	r0, [pc, #216]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 80069c6:	f7fc ff81 	bl	80038cc <HAL_DSI_ConfigFlowControl>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80069d0:	f000 fa6e 	bl	8006eb0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80069d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80069d8:	4831      	ldr	r0, [pc, #196]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 80069da:	f7fd f9c7 	bl	8003d6c <HAL_DSI_SetLowPowerRXFilter>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80069e4:	f000 fa64 	bl	8006eb0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80069e8:	2100      	movs	r1, #0
 80069ea:	482d      	ldr	r0, [pc, #180]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 80069ec:	f7fc fb52 	bl	8003094 <HAL_DSI_ConfigErrorMonitor>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80069f6:	f000 fa5b 	bl	8006eb0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8006a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a32:	4619      	mov	r1, r3
 8006a34:	481a      	ldr	r0, [pc, #104]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a36:	f7fc feeb 	bl	8003810 <HAL_DSI_ConfigCommand>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8006a40:	f000 fa36 	bl	8006eb0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8006a48:	2305      	movs	r3, #5
 8006a4a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8006a4c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006a50:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8006a52:	2310      	movs	r3, #16
 8006a54:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8006a6a:	2340      	movs	r3, #64	; 0x40
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8006a72:	463b      	mov	r3, r7
 8006a74:	4619      	mov	r1, r3
 8006a76:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a78:	f7fc fdf0 	bl	800365c <HAL_DSI_ConfigAdaptedCommandMode>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8006a82:	f000 fa15 	bl	8006eb0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8006a86:	2100      	movs	r1, #0
 8006a88:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a8a:	f7fc fbbf 	bl	800320c <HAL_DSI_SetGenericVCID>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8006a94:	f000 fa0c 	bl	8006eb0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8006a98:	bf00      	nop
 8006a9a:	37a8      	adds	r7, #168	; 0xa8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	200003d4 	.word	0x200003d4
 8006aa4:	40016c00 	.word	0x40016c00

08006aa8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b09a      	sub	sp, #104	; 0x68
 8006aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ab2:	2234      	movs	r2, #52	; 0x34
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fcaa 	bl	8007410 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8006abc:	463b      	mov	r3, r7
 8006abe:	2234      	movs	r2, #52	; 0x34
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fca4 	bl	8007410 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006ac8:	4b4e      	ldr	r3, [pc, #312]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006aca:	4a4f      	ldr	r2, [pc, #316]	; (8006c08 <MX_LTDC_Init+0x160>)
 8006acc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006ace:	4b4d      	ldr	r3, [pc, #308]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006ad4:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006ada:	4b4a      	ldr	r3, [pc, #296]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006ae0:	4b48      	ldr	r3, [pc, #288]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8006ae6:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006ae8:	2207      	movs	r2, #7
 8006aea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8006aec:	4b45      	ldr	r3, [pc, #276]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006aee:	2203      	movs	r2, #3
 8006af0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8006af2:	4b44      	ldr	r3, [pc, #272]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006af4:	220e      	movs	r2, #14
 8006af6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8006af8:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006afa:	2205      	movs	r2, #5
 8006afc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8006afe:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b00:	f240 228e 	movw	r2, #654	; 0x28e
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8006b06:	4b3f      	ldr	r3, [pc, #252]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b08:	f240 12e5 	movw	r2, #485	; 0x1e5
 8006b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8006b0e:	4b3d      	ldr	r3, [pc, #244]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b10:	f44f 7225 	mov.w	r2, #660	; 0x294
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8006b16:	4b3b      	ldr	r3, [pc, #236]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b18:	f240 12e7 	movw	r2, #487	; 0x1e7
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006b26:	4b37      	ldr	r3, [pc, #220]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006b2e:	4b35      	ldr	r3, [pc, #212]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006b36:	4833      	ldr	r0, [pc, #204]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b38:	f7fd fc14 	bl	8004364 <HAL_LTDC_Init>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8006b42:	f000 f9b5 	bl	8006eb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006b56:	2300      	movs	r3, #0
 8006b58:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b66:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006b68:	2305      	movs	r3, #5
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006b8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4619      	mov	r1, r3
 8006b92:	481c      	ldr	r0, [pc, #112]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006b94:	f7fd fcb6 	bl	8004504 <HAL_LTDC_ConfigLayer>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8006b9e:	f000 f987 	bl	8006eb0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006bc4:	2305      	movs	r3, #5
 8006bc6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8006be6:	463b      	mov	r3, r7
 8006be8:	2201      	movs	r2, #1
 8006bea:	4619      	mov	r1, r3
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <MX_LTDC_Init+0x15c>)
 8006bee:	f7fd fc89 	bl	8004504 <HAL_LTDC_ConfigLayer>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8006bf8:	f000 f95a 	bl	8006eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006bfc:	bf00      	nop
 8006bfe:	3768      	adds	r7, #104	; 0x68
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200003f0 	.word	0x200003f0
 8006c08:	40016800 	.word	0x40016800

08006c0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006c1c:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c1e:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <MX_TIM6_Init+0x6c>)
 8006c20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8006c22:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c24:	f242 720f 	movw	r2, #9999	; 0x270f
 8006c28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8006c30:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c32:	f242 720f 	movw	r2, #9999	; 0x270f
 8006c36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c38:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006c3e:	480d      	ldr	r0, [pc, #52]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c40:	f7fe ff89 	bl	8005b56 <HAL_TIM_Base_Init>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8006c4a:	f000 f931 	bl	8006eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4806      	ldr	r0, [pc, #24]	; (8006c74 <MX_TIM6_Init+0x68>)
 8006c5c:	f7ff f9b8 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8006c66:	f000 f923 	bl	8006eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200004e4 	.word	0x200004e4
 8006c78:	40001000 	.word	0x40001000

08006c7c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	60da      	str	r2, [r3, #12]
 8006c8e:	611a      	str	r2, [r3, #16]
 8006c90:	615a      	str	r2, [r3, #20]
 8006c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <MX_FMC_Init+0x94>)
 8006c96:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <MX_FMC_Init+0x98>)
 8006c98:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <MX_FMC_Init+0x94>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <MX_FMC_Init+0x94>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <MX_FMC_Init+0x94>)
 8006ca8:	2208      	movs	r2, #8
 8006caa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006cac:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cae:	2220      	movs	r2, #32
 8006cb0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cb2:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006cbe:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006cca:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <MX_FMC_Init+0x94>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8006cda:	2310      	movs	r3, #16
 8006cdc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8006cde:	2310      	movs	r3, #16
 8006ce0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8006cea:	2310      	movs	r3, #16
 8006cec:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8006cee:	2310      	movs	r3, #16
 8006cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4806      	ldr	r0, [pc, #24]	; (8006d10 <MX_FMC_Init+0x94>)
 8006cf8:	f7fe feae 	bl	8005a58 <HAL_SDRAM_Init>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8006d02:	f000 f8d5 	bl	8006eb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006d06:	bf00      	nop
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200005e0 	.word	0x200005e0
 8006d14:	a0000140 	.word	0xa0000140

08006d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b089      	sub	sp, #36	; 0x24
 8006d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4a32      	ldr	r2, [pc, #200]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b30      	ldr	r3, [pc, #192]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d36:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d40:	6313      	str	r3, [r2, #48]	; 0x30
 8006d42:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d4e:	4b27      	ldr	r3, [pc, #156]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4a26      	ldr	r2, [pc, #152]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a20      	ldr	r2, [pc, #128]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d84:	f043 0320 	orr.w	r3, r3, #32
 8006d88:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d96:	4b15      	ldr	r3, [pc, #84]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	4a14      	ldr	r2, [pc, #80]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	6313      	str	r3, [r2, #48]	; 0x30
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006db4:	f043 0310 	orr.w	r3, r3, #16
 8006db8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <MX_GPIO_Init+0xd4>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]

}
 8006dde:	bf00      	nop
 8006de0:	3724      	adds	r7, #36	; 0x24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800

08006df0 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8006dfa:	f7f9 fe82 	bl	8000b02 <BSP_LCD_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1fc      	bne.n	8006e02 <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8006e08:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f7fa f815 	bl	8000e3c <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	f7fa f8bd 	bl	8000f94 <BSP_LCD_Clear>

  /* Set LCD Example description */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8006e1a:	481e      	ldr	r0, [pc, #120]	; (8006e94 <LCD_Config+0xa4>)
 8006e1c:	f7fa f86e 	bl	8000efc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8006e20:	481d      	ldr	r0, [pc, #116]	; (8006e98 <LCD_Config+0xa8>)
 8006e22:	f7fa f89d 	bl	8000f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"Copyright (c) STMicroelectronics 2019", CENTER_MODE);
 8006e26:	f7f9 fffd 	bl	8000e24 <BSP_LCD_GetYSize>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b14      	subs	r3, #20
 8006e30:	b299      	uxth	r1, r3
 8006e32:	2301      	movs	r3, #1
 8006e34:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <LCD_Config+0xac>)
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7fa f918 	bl	800106c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8006e3c:	4818      	ldr	r0, [pc, #96]	; (8006ea0 <LCD_Config+0xb0>)
 8006e3e:	f7fa f85d 	bl	8000efc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 50);
 8006e42:	f7f9 ffe3 	bl	8000e0c <BSP_LCD_GetXSize>
 8006e46:	4603      	mov	r3, r0
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	2332      	movs	r3, #50	; 0x32
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f7fa fa50 	bl	80012f4 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	f7fa f850 	bl	8000efc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8006e5c:	4810      	ldr	r0, [pc, #64]	; (8006ea0 <LCD_Config+0xb0>)
 8006e5e:	f7fa f865 	bl	8000f2c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8006e62:	4810      	ldr	r0, [pc, #64]	; (8006ea4 <LCD_Config+0xb4>)
 8006e64:	f7fa f87c 	bl	8000f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ea8 <LCD_Config+0xb8>)
 8006e6c:	210a      	movs	r1, #10
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f7fa f8fc 	bl	800106c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8006e74:	480d      	ldr	r0, [pc, #52]	; (8006eac <LCD_Config+0xbc>)
 8006e76:	f7fa f873 	bl	8000f60 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006e7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006e7e:	f7fa f83d 	bl	8000efc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	f7fa f851 	bl	8000f2c <BSP_LCD_SetBackColor>
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	ff000080 	.word	0xff000080
 8006e98:	20000020 	.word	0x20000020
 8006e9c:	08007c6c 	.word	0x08007c6c
 8006ea0:	ffffa500 	.word	0xffffa500
 8006ea4:	20000010 	.word	0x20000010
 8006ea8:	08007c94 	.word	0x08007c94
 8006eac:	20000018 	.word	0x20000018

08006eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <HAL_MspInit+0x44>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	4a0e      	ldr	r2, [pc, #56]	; (8006f04 <HAL_MspInit+0x44>)
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <HAL_MspInit+0x44>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <HAL_MspInit+0x44>)
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee2:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <HAL_MspInit+0x44>)
 8006ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8006eea:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_MspInit+0x44>)
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800

08006f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <HAL_ADC_MspInit+0x38>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10b      	bne.n	8006f32 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <HAL_ADC_MspInit+0x3c>)
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <HAL_ADC_MspInit+0x3c>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f24:	6453      	str	r3, [r2, #68]	; 0x44
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_ADC_MspInit+0x3c>)
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40012000 	.word	0x40012000
 8006f44:	40023800 	.word	0x40023800

08006f48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_DMA2D_MspInit+0x38>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10b      	bne.n	8006f72 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_DMA2D_MspInit+0x3c>)
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <HAL_DMA2D_MspInit+0x3c>)
 8006f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f64:	6313      	str	r3, [r2, #48]	; 0x30
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HAL_DMA2D_MspInit+0x3c>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	4002b000 	.word	0x4002b000
 8006f84:	40023800 	.word	0x40023800

08006f88 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a17      	ldr	r2, [pc, #92]	; (8007004 <HAL_DSI_MspInit+0x7c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d127      	bne.n	8006ffa <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8006faa:	4b17      	ldr	r3, [pc, #92]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	4a16      	ldr	r2, [pc, #88]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a10      	ldr	r2, [pc, #64]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <HAL_DSI_MspInit+0x80>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fda:	2304      	movs	r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8006fea:	230d      	movs	r3, #13
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <HAL_DSI_MspInit+0x84>)
 8006ff6:	f7fc fee7 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8006ffa:	bf00      	nop
 8006ffc:	3728      	adds	r7, #40	; 0x28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40016c00 	.word	0x40016c00
 8007008:	40023800 	.word	0x40023800
 800700c:	40022400 	.word	0x40022400

08007010 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <HAL_DSI_MspDeInit+0x30>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d109      	bne.n	8007036 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_DSI_MspDeInit+0x34>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	4a07      	ldr	r2, [pc, #28]	; (8007044 <HAL_DSI_MspDeInit+0x34>)
 8007028:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800702c:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800702e:	2104      	movs	r1, #4
 8007030:	4805      	ldr	r0, [pc, #20]	; (8007048 <HAL_DSI_MspDeInit+0x38>)
 8007032:	f7fd f873 	bl	800411c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40016c00 	.word	0x40016c00
 8007044:	40023800 	.word	0x40023800
 8007048:	40022400 	.word	0x40022400

0800704c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a0a      	ldr	r2, [pc, #40]	; (8007084 <HAL_LTDC_MspInit+0x38>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d10b      	bne.n	8007076 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800705e:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <HAL_LTDC_MspInit+0x3c>)
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <HAL_LTDC_MspInit+0x3c>)
 8007064:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007068:	6453      	str	r3, [r2, #68]	; 0x44
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <HAL_LTDC_MspInit+0x3c>)
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40016800 	.word	0x40016800
 8007088:	40023800 	.word	0x40023800

0800708c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <HAL_TIM_Base_MspInit+0x44>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d113      	bne.n	80070c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <HAL_TIM_Base_MspInit+0x48>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <HAL_TIM_Base_MspInit+0x48>)
 80070a4:	f043 0310 	orr.w	r3, r3, #16
 80070a8:	6413      	str	r3, [r2, #64]	; 0x40
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <HAL_TIM_Base_MspInit+0x48>)
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80070b6:	2200      	movs	r2, #0
 80070b8:	2100      	movs	r1, #0
 80070ba:	2036      	movs	r0, #54	; 0x36
 80070bc:	f7fb f979 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070c0:	2036      	movs	r0, #54	; 0x36
 80070c2:	f7fb f992 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40001000 	.word	0x40001000
 80070d4:	40023800 	.word	0x40023800

080070d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80070ec:	4b43      	ldr	r3, [pc, #268]	; (80071fc <HAL_FMC_MspInit+0x124>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d17e      	bne.n	80071f2 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 80070f4:	4b41      	ldr	r3, [pc, #260]	; (80071fc <HAL_FMC_MspInit+0x124>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80070fa:	4b41      	ldr	r3, [pc, #260]	; (8007200 <HAL_FMC_MspInit+0x128>)
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	4a40      	ldr	r2, [pc, #256]	; (8007200 <HAL_FMC_MspInit+0x128>)
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	6393      	str	r3, [r2, #56]	; 0x38
 8007106:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <HAL_FMC_MspInit+0x128>)
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007112:	2360      	movs	r3, #96	; 0x60
 8007114:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007116:	2302      	movs	r3, #2
 8007118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711e:	2303      	movs	r3, #3
 8007120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007122:	230c      	movs	r3, #12
 8007124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4836      	ldr	r0, [pc, #216]	; (8007204 <HAL_FMC_MspInit+0x12c>)
 800712c:	f7fc fe4c 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8007130:	f248 1337 	movw	r3, #33079	; 0x8137
 8007134:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007136:	2302      	movs	r3, #2
 8007138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713e:	2303      	movs	r3, #3
 8007140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007142:	230c      	movs	r3, #12
 8007144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	4619      	mov	r1, r3
 800714a:	482f      	ldr	r0, [pc, #188]	; (8007208 <HAL_FMC_MspInit+0x130>)
 800714c:	f7fc fe3c 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8007150:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007154:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007156:	2302      	movs	r3, #2
 8007158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715e:	2303      	movs	r3, #3
 8007160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007162:	230c      	movs	r3, #12
 8007164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4828      	ldr	r0, [pc, #160]	; (800720c <HAL_FMC_MspInit+0x134>)
 800716c:	f7fc fe2c 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 8007170:	f240 63cf 	movw	r3, #1743	; 0x6cf
 8007174:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007176:	2302      	movs	r3, #2
 8007178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800717e:	2303      	movs	r3, #3
 8007180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007182:	230c      	movs	r3, #12
 8007184:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4821      	ldr	r0, [pc, #132]	; (8007210 <HAL_FMC_MspInit+0x138>)
 800718c:	f7fc fe1c 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007190:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007194:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007196:	2302      	movs	r3, #2
 8007198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719e:	2303      	movs	r3, #3
 80071a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071a2:	230c      	movs	r3, #12
 80071a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	481a      	ldr	r0, [pc, #104]	; (8007214 <HAL_FMC_MspInit+0x13c>)
 80071ac:	f7fc fe0c 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 80071b0:	f64f 7320 	movw	r3, #65312	; 0xff20
 80071b4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b6:	2302      	movs	r3, #2
 80071b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071be:	2303      	movs	r3, #3
 80071c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071c2:	230c      	movs	r3, #12
 80071c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4813      	ldr	r0, [pc, #76]	; (8007218 <HAL_FMC_MspInit+0x140>)
 80071cc:	f7fc fdfc 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 80071d0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80071d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d6:	2302      	movs	r3, #2
 80071d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071de:	2303      	movs	r3, #3
 80071e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071e2:	230c      	movs	r3, #12
 80071e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	480c      	ldr	r0, [pc, #48]	; (800721c <HAL_FMC_MspInit+0x144>)
 80071ec:	f7fc fdec 	bl	8003dc8 <HAL_GPIO_Init>
 80071f0:	e000      	b.n	80071f4 <HAL_FMC_MspInit+0x11c>
    return;
 80071f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000026c 	.word	0x2000026c
 8007200:	40023800 	.word	0x40023800
 8007204:	40020400 	.word	0x40020400
 8007208:	40021800 	.word	0x40021800
 800720c:	40020c00 	.word	0x40020c00
 8007210:	40022000 	.word	0x40022000
 8007214:	40021400 	.word	0x40021400
 8007218:	40021c00 	.word	0x40021c00
 800721c:	40021000 	.word	0x40021000

08007220 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007228:	f7ff ff56 	bl	80070d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007238:	bf00      	nop
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007242:	b480      	push	{r7}
 8007244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007246:	e7fe      	b.n	8007246 <HardFault_Handler+0x4>

08007248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800724c:	e7fe      	b.n	800724c <MemManage_Handler+0x4>

0800724e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800724e:	b480      	push	{r7}
 8007250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007252:	e7fe      	b.n	8007252 <BusFault_Handler+0x4>

08007254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007258:	e7fe      	b.n	8007258 <UsageFault_Handler+0x4>

0800725a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800725a:	b480      	push	{r7}
 800725c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800725e:	bf00      	nop
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007276:	b480      	push	{r7}
 8007278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007288:	f7fa fc36 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800728c:	bf00      	nop
 800728e:	bd80      	pop	{r7, pc}

08007290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007294:	4802      	ldr	r0, [pc, #8]	; (80072a0 <TIM6_DAC_IRQHandler+0x10>)
 8007296:	f7fe fcb3 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200004e4 	.word	0x200004e4

080072a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80072ac:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <_sbrk+0x50>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <_sbrk+0x16>
		heap_end = &end;
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <_sbrk+0x50>)
 80072b6:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <_sbrk+0x54>)
 80072b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80072ba:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <_sbrk+0x50>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <_sbrk+0x50>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4413      	add	r3, r2
 80072c8:	466a      	mov	r2, sp
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d907      	bls.n	80072de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80072ce:	f000 f875 	bl	80073bc <__errno>
 80072d2:	4602      	mov	r2, r0
 80072d4:	230c      	movs	r3, #12
 80072d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	e006      	b.n	80072ec <_sbrk+0x48>
	}

	heap_end += incr;
 80072de:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <_sbrk+0x50>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a03      	ldr	r2, [pc, #12]	; (80072f4 <_sbrk+0x50>)
 80072e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000270 	.word	0x20000270
 80072f8:	20000618 	.word	0x20000618

080072fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007300:	4b15      	ldr	r3, [pc, #84]	; (8007358 <SystemInit+0x5c>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	4a14      	ldr	r2, [pc, #80]	; (8007358 <SystemInit+0x5c>)
 8007308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800730c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <SystemInit+0x60>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a11      	ldr	r2, [pc, #68]	; (800735c <SystemInit+0x60>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800731c:	4b0f      	ldr	r3, [pc, #60]	; (800735c <SystemInit+0x60>)
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007322:	4b0e      	ldr	r3, [pc, #56]	; (800735c <SystemInit+0x60>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	490d      	ldr	r1, [pc, #52]	; (800735c <SystemInit+0x60>)
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <SystemInit+0x64>)
 800732a:	4013      	ands	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <SystemInit+0x60>)
 8007330:	4a0c      	ldr	r2, [pc, #48]	; (8007364 <SystemInit+0x68>)
 8007332:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007334:	4b09      	ldr	r3, [pc, #36]	; (800735c <SystemInit+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a08      	ldr	r2, [pc, #32]	; (800735c <SystemInit+0x60>)
 800733a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <SystemInit+0x60>)
 8007342:	2200      	movs	r2, #0
 8007344:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007346:	4b04      	ldr	r3, [pc, #16]	; (8007358 <SystemInit+0x5c>)
 8007348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800734c:	609a      	str	r2, [r3, #8]
#endif
}
 800734e:	bf00      	nop
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	e000ed00 	.word	0xe000ed00
 800735c:	40023800 	.word	0x40023800
 8007360:	fef6ffff 	.word	0xfef6ffff
 8007364:	24003010 	.word	0x24003010

08007368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800736c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800736e:	e003      	b.n	8007378 <LoopCopyDataInit>

08007370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007376:	3104      	adds	r1, #4

08007378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007378:	480b      	ldr	r0, [pc, #44]	; (80073a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800737a:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800737c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800737e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007380:	d3f6      	bcc.n	8007370 <CopyDataInit>
  ldr  r2, =_sbss
 8007382:	4a0b      	ldr	r2, [pc, #44]	; (80073b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007384:	e002      	b.n	800738c <LoopFillZerobss>

08007386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007388:	f842 3b04 	str.w	r3, [r2], #4

0800738c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800738e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007390:	d3f9      	bcc.n	8007386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007392:	f7ff ffb3 	bl	80072fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007396:	f000 f817 	bl	80073c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800739a:	f7ff f905 	bl	80065a8 <main>
  bx  lr    
 800739e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80073a0:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 80073a4:	0800aa18 	.word	0x0800aa18
  ldr  r0, =_sdata
 80073a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80073ac:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80073b0:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80073b4:	20000618 	.word	0x20000618

080073b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80073b8:	e7fe      	b.n	80073b8 <ADC_IRQHandler>
	...

080073bc <__errno>:
 80073bc:	4b01      	ldr	r3, [pc, #4]	; (80073c4 <__errno+0x8>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000040 	.word	0x20000040

080073c8 <__libc_init_array>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	4e0d      	ldr	r6, [pc, #52]	; (8007400 <__libc_init_array+0x38>)
 80073cc:	4c0d      	ldr	r4, [pc, #52]	; (8007404 <__libc_init_array+0x3c>)
 80073ce:	1ba4      	subs	r4, r4, r6
 80073d0:	10a4      	asrs	r4, r4, #2
 80073d2:	2500      	movs	r5, #0
 80073d4:	42a5      	cmp	r5, r4
 80073d6:	d109      	bne.n	80073ec <__libc_init_array+0x24>
 80073d8:	4e0b      	ldr	r6, [pc, #44]	; (8007408 <__libc_init_array+0x40>)
 80073da:	4c0c      	ldr	r4, [pc, #48]	; (800740c <__libc_init_array+0x44>)
 80073dc:	f000 fc26 	bl	8007c2c <_init>
 80073e0:	1ba4      	subs	r4, r4, r6
 80073e2:	10a4      	asrs	r4, r4, #2
 80073e4:	2500      	movs	r5, #0
 80073e6:	42a5      	cmp	r5, r4
 80073e8:	d105      	bne.n	80073f6 <__libc_init_array+0x2e>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f0:	4798      	blx	r3
 80073f2:	3501      	adds	r5, #1
 80073f4:	e7ee      	b.n	80073d4 <__libc_init_array+0xc>
 80073f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073fa:	4798      	blx	r3
 80073fc:	3501      	adds	r5, #1
 80073fe:	e7f2      	b.n	80073e6 <__libc_init_array+0x1e>
 8007400:	0800aa10 	.word	0x0800aa10
 8007404:	0800aa10 	.word	0x0800aa10
 8007408:	0800aa10 	.word	0x0800aa10
 800740c:	0800aa14 	.word	0x0800aa14

08007410 <memset>:
 8007410:	4402      	add	r2, r0
 8007412:	4603      	mov	r3, r0
 8007414:	4293      	cmp	r3, r2
 8007416:	d100      	bne.n	800741a <memset+0xa>
 8007418:	4770      	bx	lr
 800741a:	f803 1b01 	strb.w	r1, [r3], #1
 800741e:	e7f9      	b.n	8007414 <memset+0x4>

08007420 <siprintf>:
 8007420:	b40e      	push	{r1, r2, r3}
 8007422:	b500      	push	{lr}
 8007424:	b09c      	sub	sp, #112	; 0x70
 8007426:	ab1d      	add	r3, sp, #116	; 0x74
 8007428:	9002      	str	r0, [sp, #8]
 800742a:	9006      	str	r0, [sp, #24]
 800742c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007430:	4809      	ldr	r0, [pc, #36]	; (8007458 <siprintf+0x38>)
 8007432:	9107      	str	r1, [sp, #28]
 8007434:	9104      	str	r1, [sp, #16]
 8007436:	4909      	ldr	r1, [pc, #36]	; (800745c <siprintf+0x3c>)
 8007438:	f853 2b04 	ldr.w	r2, [r3], #4
 800743c:	9105      	str	r1, [sp, #20]
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	a902      	add	r1, sp, #8
 8007444:	f000 f866 	bl	8007514 <_svfiprintf_r>
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	b01c      	add	sp, #112	; 0x70
 8007450:	f85d eb04 	ldr.w	lr, [sp], #4
 8007454:	b003      	add	sp, #12
 8007456:	4770      	bx	lr
 8007458:	20000040 	.word	0x20000040
 800745c:	ffff0208 	.word	0xffff0208

08007460 <__ssputs_r>:
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	688e      	ldr	r6, [r1, #8]
 8007466:	429e      	cmp	r6, r3
 8007468:	4682      	mov	sl, r0
 800746a:	460c      	mov	r4, r1
 800746c:	4690      	mov	r8, r2
 800746e:	4699      	mov	r9, r3
 8007470:	d837      	bhi.n	80074e2 <__ssputs_r+0x82>
 8007472:	898a      	ldrh	r2, [r1, #12]
 8007474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007478:	d031      	beq.n	80074de <__ssputs_r+0x7e>
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	6909      	ldr	r1, [r1, #16]
 800747e:	1a6f      	subs	r7, r5, r1
 8007480:	6965      	ldr	r5, [r4, #20]
 8007482:	2302      	movs	r3, #2
 8007484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007488:	fb95 f5f3 	sdiv	r5, r5, r3
 800748c:	f109 0301 	add.w	r3, r9, #1
 8007490:	443b      	add	r3, r7
 8007492:	429d      	cmp	r5, r3
 8007494:	bf38      	it	cc
 8007496:	461d      	movcc	r5, r3
 8007498:	0553      	lsls	r3, r2, #21
 800749a:	d530      	bpl.n	80074fe <__ssputs_r+0x9e>
 800749c:	4629      	mov	r1, r5
 800749e:	f000 fb2b 	bl	8007af8 <_malloc_r>
 80074a2:	4606      	mov	r6, r0
 80074a4:	b950      	cbnz	r0, 80074bc <__ssputs_r+0x5c>
 80074a6:	230c      	movs	r3, #12
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	463a      	mov	r2, r7
 80074be:	6921      	ldr	r1, [r4, #16]
 80074c0:	f000 faa8 	bl	8007a14 <memcpy>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6126      	str	r6, [r4, #16]
 80074d2:	6165      	str	r5, [r4, #20]
 80074d4:	443e      	add	r6, r7
 80074d6:	1bed      	subs	r5, r5, r7
 80074d8:	6026      	str	r6, [r4, #0]
 80074da:	60a5      	str	r5, [r4, #8]
 80074dc:	464e      	mov	r6, r9
 80074de:	454e      	cmp	r6, r9
 80074e0:	d900      	bls.n	80074e4 <__ssputs_r+0x84>
 80074e2:	464e      	mov	r6, r9
 80074e4:	4632      	mov	r2, r6
 80074e6:	4641      	mov	r1, r8
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	f000 fa9e 	bl	8007a2a <memmove>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	441e      	add	r6, r3
 80074f8:	6026      	str	r6, [r4, #0]
 80074fa:	2000      	movs	r0, #0
 80074fc:	e7dc      	b.n	80074b8 <__ssputs_r+0x58>
 80074fe:	462a      	mov	r2, r5
 8007500:	f000 fb54 	bl	8007bac <_realloc_r>
 8007504:	4606      	mov	r6, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d1e2      	bne.n	80074d0 <__ssputs_r+0x70>
 800750a:	6921      	ldr	r1, [r4, #16]
 800750c:	4650      	mov	r0, sl
 800750e:	f000 faa5 	bl	8007a5c <_free_r>
 8007512:	e7c8      	b.n	80074a6 <__ssputs_r+0x46>

08007514 <_svfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	461d      	mov	r5, r3
 800751a:	898b      	ldrh	r3, [r1, #12]
 800751c:	061f      	lsls	r7, r3, #24
 800751e:	b09d      	sub	sp, #116	; 0x74
 8007520:	4680      	mov	r8, r0
 8007522:	460c      	mov	r4, r1
 8007524:	4616      	mov	r6, r2
 8007526:	d50f      	bpl.n	8007548 <_svfiprintf_r+0x34>
 8007528:	690b      	ldr	r3, [r1, #16]
 800752a:	b96b      	cbnz	r3, 8007548 <_svfiprintf_r+0x34>
 800752c:	2140      	movs	r1, #64	; 0x40
 800752e:	f000 fae3 	bl	8007af8 <_malloc_r>
 8007532:	6020      	str	r0, [r4, #0]
 8007534:	6120      	str	r0, [r4, #16]
 8007536:	b928      	cbnz	r0, 8007544 <_svfiprintf_r+0x30>
 8007538:	230c      	movs	r3, #12
 800753a:	f8c8 3000 	str.w	r3, [r8]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	e0c8      	b.n	80076d6 <_svfiprintf_r+0x1c2>
 8007544:	2340      	movs	r3, #64	; 0x40
 8007546:	6163      	str	r3, [r4, #20]
 8007548:	2300      	movs	r3, #0
 800754a:	9309      	str	r3, [sp, #36]	; 0x24
 800754c:	2320      	movs	r3, #32
 800754e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007552:	2330      	movs	r3, #48	; 0x30
 8007554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007558:	9503      	str	r5, [sp, #12]
 800755a:	f04f 0b01 	mov.w	fp, #1
 800755e:	4637      	mov	r7, r6
 8007560:	463d      	mov	r5, r7
 8007562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007566:	b10b      	cbz	r3, 800756c <_svfiprintf_r+0x58>
 8007568:	2b25      	cmp	r3, #37	; 0x25
 800756a:	d13e      	bne.n	80075ea <_svfiprintf_r+0xd6>
 800756c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007570:	d00b      	beq.n	800758a <_svfiprintf_r+0x76>
 8007572:	4653      	mov	r3, sl
 8007574:	4632      	mov	r2, r6
 8007576:	4621      	mov	r1, r4
 8007578:	4640      	mov	r0, r8
 800757a:	f7ff ff71 	bl	8007460 <__ssputs_r>
 800757e:	3001      	adds	r0, #1
 8007580:	f000 80a4 	beq.w	80076cc <_svfiprintf_r+0x1b8>
 8007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007586:	4453      	add	r3, sl
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	783b      	ldrb	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 809d 	beq.w	80076cc <_svfiprintf_r+0x1b8>
 8007592:	2300      	movs	r3, #0
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a4:	931a      	str	r3, [sp, #104]	; 0x68
 80075a6:	462f      	mov	r7, r5
 80075a8:	2205      	movs	r2, #5
 80075aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075ae:	4850      	ldr	r0, [pc, #320]	; (80076f0 <_svfiprintf_r+0x1dc>)
 80075b0:	f7f8 fe46 	bl	8000240 <memchr>
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	b9d0      	cbnz	r0, 80075ee <_svfiprintf_r+0xda>
 80075b8:	06d9      	lsls	r1, r3, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2220      	movmi	r2, #32
 80075be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075c2:	071a      	lsls	r2, r3, #28
 80075c4:	bf44      	itt	mi
 80075c6:	222b      	movmi	r2, #43	; 0x2b
 80075c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075cc:	782a      	ldrb	r2, [r5, #0]
 80075ce:	2a2a      	cmp	r2, #42	; 0x2a
 80075d0:	d015      	beq.n	80075fe <_svfiprintf_r+0xea>
 80075d2:	9a07      	ldr	r2, [sp, #28]
 80075d4:	462f      	mov	r7, r5
 80075d6:	2000      	movs	r0, #0
 80075d8:	250a      	movs	r5, #10
 80075da:	4639      	mov	r1, r7
 80075dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e0:	3b30      	subs	r3, #48	; 0x30
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d94d      	bls.n	8007682 <_svfiprintf_r+0x16e>
 80075e6:	b1b8      	cbz	r0, 8007618 <_svfiprintf_r+0x104>
 80075e8:	e00f      	b.n	800760a <_svfiprintf_r+0xf6>
 80075ea:	462f      	mov	r7, r5
 80075ec:	e7b8      	b.n	8007560 <_svfiprintf_r+0x4c>
 80075ee:	4a40      	ldr	r2, [pc, #256]	; (80076f0 <_svfiprintf_r+0x1dc>)
 80075f0:	1a80      	subs	r0, r0, r2
 80075f2:	fa0b f000 	lsl.w	r0, fp, r0
 80075f6:	4318      	orrs	r0, r3
 80075f8:	9004      	str	r0, [sp, #16]
 80075fa:	463d      	mov	r5, r7
 80075fc:	e7d3      	b.n	80075a6 <_svfiprintf_r+0x92>
 80075fe:	9a03      	ldr	r2, [sp, #12]
 8007600:	1d11      	adds	r1, r2, #4
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	9103      	str	r1, [sp, #12]
 8007606:	2a00      	cmp	r2, #0
 8007608:	db01      	blt.n	800760e <_svfiprintf_r+0xfa>
 800760a:	9207      	str	r2, [sp, #28]
 800760c:	e004      	b.n	8007618 <_svfiprintf_r+0x104>
 800760e:	4252      	negs	r2, r2
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	783b      	ldrb	r3, [r7, #0]
 800761a:	2b2e      	cmp	r3, #46	; 0x2e
 800761c:	d10c      	bne.n	8007638 <_svfiprintf_r+0x124>
 800761e:	787b      	ldrb	r3, [r7, #1]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d133      	bne.n	800768c <_svfiprintf_r+0x178>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9203      	str	r2, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfb8      	it	lt
 8007630:	f04f 33ff 	movlt.w	r3, #4294967295
 8007634:	3702      	adds	r7, #2
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	4d2e      	ldr	r5, [pc, #184]	; (80076f4 <_svfiprintf_r+0x1e0>)
 800763a:	7839      	ldrb	r1, [r7, #0]
 800763c:	2203      	movs	r2, #3
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 fdfe 	bl	8000240 <memchr>
 8007644:	b138      	cbz	r0, 8007656 <_svfiprintf_r+0x142>
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	1b40      	subs	r0, r0, r5
 800764a:	fa03 f000 	lsl.w	r0, r3, r0
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	4303      	orrs	r3, r0
 8007652:	3701      	adds	r7, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	7839      	ldrb	r1, [r7, #0]
 8007658:	4827      	ldr	r0, [pc, #156]	; (80076f8 <_svfiprintf_r+0x1e4>)
 800765a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765e:	2206      	movs	r2, #6
 8007660:	1c7e      	adds	r6, r7, #1
 8007662:	f7f8 fded 	bl	8000240 <memchr>
 8007666:	2800      	cmp	r0, #0
 8007668:	d038      	beq.n	80076dc <_svfiprintf_r+0x1c8>
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <_svfiprintf_r+0x1e8>)
 800766c:	bb13      	cbnz	r3, 80076b4 <_svfiprintf_r+0x1a0>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	3308      	adds	r3, #8
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767c:	444b      	add	r3, r9
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	e76d      	b.n	800755e <_svfiprintf_r+0x4a>
 8007682:	fb05 3202 	mla	r2, r5, r2, r3
 8007686:	2001      	movs	r0, #1
 8007688:	460f      	mov	r7, r1
 800768a:	e7a6      	b.n	80075da <_svfiprintf_r+0xc6>
 800768c:	2300      	movs	r3, #0
 800768e:	3701      	adds	r7, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	4619      	mov	r1, r3
 8007694:	250a      	movs	r5, #10
 8007696:	4638      	mov	r0, r7
 8007698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769c:	3a30      	subs	r2, #48	; 0x30
 800769e:	2a09      	cmp	r2, #9
 80076a0:	d903      	bls.n	80076aa <_svfiprintf_r+0x196>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0c8      	beq.n	8007638 <_svfiprintf_r+0x124>
 80076a6:	9105      	str	r1, [sp, #20]
 80076a8:	e7c6      	b.n	8007638 <_svfiprintf_r+0x124>
 80076aa:	fb05 2101 	mla	r1, r5, r1, r2
 80076ae:	2301      	movs	r3, #1
 80076b0:	4607      	mov	r7, r0
 80076b2:	e7f0      	b.n	8007696 <_svfiprintf_r+0x182>
 80076b4:	ab03      	add	r3, sp, #12
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4622      	mov	r2, r4
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <_svfiprintf_r+0x1ec>)
 80076bc:	a904      	add	r1, sp, #16
 80076be:	4640      	mov	r0, r8
 80076c0:	f3af 8000 	nop.w
 80076c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076c8:	4681      	mov	r9, r0
 80076ca:	d1d6      	bne.n	800767a <_svfiprintf_r+0x166>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af35 	bmi.w	800753e <_svfiprintf_r+0x2a>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	b01d      	add	sp, #116	; 0x74
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4622      	mov	r2, r4
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_svfiprintf_r+0x1ec>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	4640      	mov	r0, r8
 80076e8:	f000 f882 	bl	80077f0 <_printf_i>
 80076ec:	e7ea      	b.n	80076c4 <_svfiprintf_r+0x1b0>
 80076ee:	bf00      	nop
 80076f0:	0800a9d4 	.word	0x0800a9d4
 80076f4:	0800a9da 	.word	0x0800a9da
 80076f8:	0800a9de 	.word	0x0800a9de
 80076fc:	00000000 	.word	0x00000000
 8007700:	08007461 	.word	0x08007461

08007704 <_printf_common>:
 8007704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	4691      	mov	r9, r2
 800770a:	461f      	mov	r7, r3
 800770c:	688a      	ldr	r2, [r1, #8]
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007714:	4293      	cmp	r3, r2
 8007716:	bfb8      	it	lt
 8007718:	4613      	movlt	r3, r2
 800771a:	f8c9 3000 	str.w	r3, [r9]
 800771e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007722:	4606      	mov	r6, r0
 8007724:	460c      	mov	r4, r1
 8007726:	b112      	cbz	r2, 800772e <_printf_common+0x2a>
 8007728:	3301      	adds	r3, #1
 800772a:	f8c9 3000 	str.w	r3, [r9]
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	0699      	lsls	r1, r3, #26
 8007732:	bf42      	ittt	mi
 8007734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007738:	3302      	addmi	r3, #2
 800773a:	f8c9 3000 	strmi.w	r3, [r9]
 800773e:	6825      	ldr	r5, [r4, #0]
 8007740:	f015 0506 	ands.w	r5, r5, #6
 8007744:	d107      	bne.n	8007756 <_printf_common+0x52>
 8007746:	f104 0a19 	add.w	sl, r4, #25
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	f8d9 2000 	ldr.w	r2, [r9]
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	42ab      	cmp	r3, r5
 8007754:	dc28      	bgt.n	80077a8 <_printf_common+0xa4>
 8007756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	3300      	adds	r3, #0
 800775e:	bf18      	it	ne
 8007760:	2301      	movne	r3, #1
 8007762:	0692      	lsls	r2, r2, #26
 8007764:	d42d      	bmi.n	80077c2 <_printf_common+0xbe>
 8007766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800776a:	4639      	mov	r1, r7
 800776c:	4630      	mov	r0, r6
 800776e:	47c0      	blx	r8
 8007770:	3001      	adds	r0, #1
 8007772:	d020      	beq.n	80077b6 <_printf_common+0xb2>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	68e5      	ldr	r5, [r4, #12]
 8007778:	f8d9 2000 	ldr.w	r2, [r9]
 800777c:	f003 0306 	and.w	r3, r3, #6
 8007780:	2b04      	cmp	r3, #4
 8007782:	bf08      	it	eq
 8007784:	1aad      	subeq	r5, r5, r2
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	bf0c      	ite	eq
 800778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007790:	2500      	movne	r5, #0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfc4      	itt	gt
 8007796:	1a9b      	subgt	r3, r3, r2
 8007798:	18ed      	addgt	r5, r5, r3
 800779a:	f04f 0900 	mov.w	r9, #0
 800779e:	341a      	adds	r4, #26
 80077a0:	454d      	cmp	r5, r9
 80077a2:	d11a      	bne.n	80077da <_printf_common+0xd6>
 80077a4:	2000      	movs	r0, #0
 80077a6:	e008      	b.n	80077ba <_printf_common+0xb6>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4652      	mov	r2, sl
 80077ac:	4639      	mov	r1, r7
 80077ae:	4630      	mov	r0, r6
 80077b0:	47c0      	blx	r8
 80077b2:	3001      	adds	r0, #1
 80077b4:	d103      	bne.n	80077be <_printf_common+0xba>
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077be:	3501      	adds	r5, #1
 80077c0:	e7c3      	b.n	800774a <_printf_common+0x46>
 80077c2:	18e1      	adds	r1, r4, r3
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	2030      	movs	r0, #48	; 0x30
 80077c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077cc:	4422      	add	r2, r4
 80077ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d6:	3302      	adds	r3, #2
 80077d8:	e7c5      	b.n	8007766 <_printf_common+0x62>
 80077da:	2301      	movs	r3, #1
 80077dc:	4622      	mov	r2, r4
 80077de:	4639      	mov	r1, r7
 80077e0:	4630      	mov	r0, r6
 80077e2:	47c0      	blx	r8
 80077e4:	3001      	adds	r0, #1
 80077e6:	d0e6      	beq.n	80077b6 <_printf_common+0xb2>
 80077e8:	f109 0901 	add.w	r9, r9, #1
 80077ec:	e7d8      	b.n	80077a0 <_printf_common+0x9c>
	...

080077f0 <_printf_i>:
 80077f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077f8:	460c      	mov	r4, r1
 80077fa:	7e09      	ldrb	r1, [r1, #24]
 80077fc:	b085      	sub	sp, #20
 80077fe:	296e      	cmp	r1, #110	; 0x6e
 8007800:	4617      	mov	r7, r2
 8007802:	4606      	mov	r6, r0
 8007804:	4698      	mov	r8, r3
 8007806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007808:	f000 80b3 	beq.w	8007972 <_printf_i+0x182>
 800780c:	d822      	bhi.n	8007854 <_printf_i+0x64>
 800780e:	2963      	cmp	r1, #99	; 0x63
 8007810:	d036      	beq.n	8007880 <_printf_i+0x90>
 8007812:	d80a      	bhi.n	800782a <_printf_i+0x3a>
 8007814:	2900      	cmp	r1, #0
 8007816:	f000 80b9 	beq.w	800798c <_printf_i+0x19c>
 800781a:	2958      	cmp	r1, #88	; 0x58
 800781c:	f000 8083 	beq.w	8007926 <_printf_i+0x136>
 8007820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007824:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007828:	e032      	b.n	8007890 <_printf_i+0xa0>
 800782a:	2964      	cmp	r1, #100	; 0x64
 800782c:	d001      	beq.n	8007832 <_printf_i+0x42>
 800782e:	2969      	cmp	r1, #105	; 0x69
 8007830:	d1f6      	bne.n	8007820 <_printf_i+0x30>
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	0605      	lsls	r5, r0, #24
 8007838:	f103 0104 	add.w	r1, r3, #4
 800783c:	d52a      	bpl.n	8007894 <_printf_i+0xa4>
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6011      	str	r1, [r2, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da03      	bge.n	800784e <_printf_i+0x5e>
 8007846:	222d      	movs	r2, #45	; 0x2d
 8007848:	425b      	negs	r3, r3
 800784a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800784e:	486f      	ldr	r0, [pc, #444]	; (8007a0c <_printf_i+0x21c>)
 8007850:	220a      	movs	r2, #10
 8007852:	e039      	b.n	80078c8 <_printf_i+0xd8>
 8007854:	2973      	cmp	r1, #115	; 0x73
 8007856:	f000 809d 	beq.w	8007994 <_printf_i+0x1a4>
 800785a:	d808      	bhi.n	800786e <_printf_i+0x7e>
 800785c:	296f      	cmp	r1, #111	; 0x6f
 800785e:	d020      	beq.n	80078a2 <_printf_i+0xb2>
 8007860:	2970      	cmp	r1, #112	; 0x70
 8007862:	d1dd      	bne.n	8007820 <_printf_i+0x30>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	f043 0320 	orr.w	r3, r3, #32
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	e003      	b.n	8007876 <_printf_i+0x86>
 800786e:	2975      	cmp	r1, #117	; 0x75
 8007870:	d017      	beq.n	80078a2 <_printf_i+0xb2>
 8007872:	2978      	cmp	r1, #120	; 0x78
 8007874:	d1d4      	bne.n	8007820 <_printf_i+0x30>
 8007876:	2378      	movs	r3, #120	; 0x78
 8007878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800787c:	4864      	ldr	r0, [pc, #400]	; (8007a10 <_printf_i+0x220>)
 800787e:	e055      	b.n	800792c <_printf_i+0x13c>
 8007880:	6813      	ldr	r3, [r2, #0]
 8007882:	1d19      	adds	r1, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6011      	str	r1, [r2, #0]
 8007888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800788c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007890:	2301      	movs	r3, #1
 8007892:	e08c      	b.n	80079ae <_printf_i+0x1be>
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6011      	str	r1, [r2, #0]
 8007898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800789c:	bf18      	it	ne
 800789e:	b21b      	sxthne	r3, r3
 80078a0:	e7cf      	b.n	8007842 <_printf_i+0x52>
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	1d18      	adds	r0, r3, #4
 80078a8:	6010      	str	r0, [r2, #0]
 80078aa:	0628      	lsls	r0, r5, #24
 80078ac:	d501      	bpl.n	80078b2 <_printf_i+0xc2>
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	e002      	b.n	80078b8 <_printf_i+0xc8>
 80078b2:	0668      	lsls	r0, r5, #25
 80078b4:	d5fb      	bpl.n	80078ae <_printf_i+0xbe>
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	4854      	ldr	r0, [pc, #336]	; (8007a0c <_printf_i+0x21c>)
 80078ba:	296f      	cmp	r1, #111	; 0x6f
 80078bc:	bf14      	ite	ne
 80078be:	220a      	movne	r2, #10
 80078c0:	2208      	moveq	r2, #8
 80078c2:	2100      	movs	r1, #0
 80078c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078c8:	6865      	ldr	r5, [r4, #4]
 80078ca:	60a5      	str	r5, [r4, #8]
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	f2c0 8095 	blt.w	80079fc <_printf_i+0x20c>
 80078d2:	6821      	ldr	r1, [r4, #0]
 80078d4:	f021 0104 	bic.w	r1, r1, #4
 80078d8:	6021      	str	r1, [r4, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d13d      	bne.n	800795a <_printf_i+0x16a>
 80078de:	2d00      	cmp	r5, #0
 80078e0:	f040 808e 	bne.w	8007a00 <_printf_i+0x210>
 80078e4:	4665      	mov	r5, ip
 80078e6:	2a08      	cmp	r2, #8
 80078e8:	d10b      	bne.n	8007902 <_printf_i+0x112>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	07db      	lsls	r3, r3, #31
 80078ee:	d508      	bpl.n	8007902 <_printf_i+0x112>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	6862      	ldr	r2, [r4, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	bfde      	ittt	le
 80078f8:	2330      	movle	r3, #48	; 0x30
 80078fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007902:	ebac 0305 	sub.w	r3, ip, r5
 8007906:	6123      	str	r3, [r4, #16]
 8007908:	f8cd 8000 	str.w	r8, [sp]
 800790c:	463b      	mov	r3, r7
 800790e:	aa03      	add	r2, sp, #12
 8007910:	4621      	mov	r1, r4
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff fef6 	bl	8007704 <_printf_common>
 8007918:	3001      	adds	r0, #1
 800791a:	d14d      	bne.n	80079b8 <_printf_i+0x1c8>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	b005      	add	sp, #20
 8007922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007926:	4839      	ldr	r0, [pc, #228]	; (8007a0c <_printf_i+0x21c>)
 8007928:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	1d1d      	adds	r5, r3, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6015      	str	r5, [r2, #0]
 8007936:	060a      	lsls	r2, r1, #24
 8007938:	d50b      	bpl.n	8007952 <_printf_i+0x162>
 800793a:	07ca      	lsls	r2, r1, #31
 800793c:	bf44      	itt	mi
 800793e:	f041 0120 	orrmi.w	r1, r1, #32
 8007942:	6021      	strmi	r1, [r4, #0]
 8007944:	b91b      	cbnz	r3, 800794e <_printf_i+0x15e>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	f022 0220 	bic.w	r2, r2, #32
 800794c:	6022      	str	r2, [r4, #0]
 800794e:	2210      	movs	r2, #16
 8007950:	e7b7      	b.n	80078c2 <_printf_i+0xd2>
 8007952:	064d      	lsls	r5, r1, #25
 8007954:	bf48      	it	mi
 8007956:	b29b      	uxthmi	r3, r3
 8007958:	e7ef      	b.n	800793a <_printf_i+0x14a>
 800795a:	4665      	mov	r5, ip
 800795c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007960:	fb02 3311 	mls	r3, r2, r1, r3
 8007964:	5cc3      	ldrb	r3, [r0, r3]
 8007966:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800796a:	460b      	mov	r3, r1
 800796c:	2900      	cmp	r1, #0
 800796e:	d1f5      	bne.n	800795c <_printf_i+0x16c>
 8007970:	e7b9      	b.n	80078e6 <_printf_i+0xf6>
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	6825      	ldr	r5, [r4, #0]
 8007976:	6961      	ldr	r1, [r4, #20]
 8007978:	1d18      	adds	r0, r3, #4
 800797a:	6010      	str	r0, [r2, #0]
 800797c:	0628      	lsls	r0, r5, #24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	d501      	bpl.n	8007986 <_printf_i+0x196>
 8007982:	6019      	str	r1, [r3, #0]
 8007984:	e002      	b.n	800798c <_printf_i+0x19c>
 8007986:	066a      	lsls	r2, r5, #25
 8007988:	d5fb      	bpl.n	8007982 <_printf_i+0x192>
 800798a:	8019      	strh	r1, [r3, #0]
 800798c:	2300      	movs	r3, #0
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	4665      	mov	r5, ip
 8007992:	e7b9      	b.n	8007908 <_printf_i+0x118>
 8007994:	6813      	ldr	r3, [r2, #0]
 8007996:	1d19      	adds	r1, r3, #4
 8007998:	6011      	str	r1, [r2, #0]
 800799a:	681d      	ldr	r5, [r3, #0]
 800799c:	6862      	ldr	r2, [r4, #4]
 800799e:	2100      	movs	r1, #0
 80079a0:	4628      	mov	r0, r5
 80079a2:	f7f8 fc4d 	bl	8000240 <memchr>
 80079a6:	b108      	cbz	r0, 80079ac <_printf_i+0x1bc>
 80079a8:	1b40      	subs	r0, r0, r5
 80079aa:	6060      	str	r0, [r4, #4]
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	6123      	str	r3, [r4, #16]
 80079b0:	2300      	movs	r3, #0
 80079b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b6:	e7a7      	b.n	8007908 <_printf_i+0x118>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4639      	mov	r1, r7
 80079be:	4630      	mov	r0, r6
 80079c0:	47c0      	blx	r8
 80079c2:	3001      	adds	r0, #1
 80079c4:	d0aa      	beq.n	800791c <_printf_i+0x12c>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	079b      	lsls	r3, r3, #30
 80079ca:	d413      	bmi.n	80079f4 <_printf_i+0x204>
 80079cc:	68e0      	ldr	r0, [r4, #12]
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	4298      	cmp	r0, r3
 80079d2:	bfb8      	it	lt
 80079d4:	4618      	movlt	r0, r3
 80079d6:	e7a3      	b.n	8007920 <_printf_i+0x130>
 80079d8:	2301      	movs	r3, #1
 80079da:	464a      	mov	r2, r9
 80079dc:	4639      	mov	r1, r7
 80079de:	4630      	mov	r0, r6
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d09a      	beq.n	800791c <_printf_i+0x12c>
 80079e6:	3501      	adds	r5, #1
 80079e8:	68e3      	ldr	r3, [r4, #12]
 80079ea:	9a03      	ldr	r2, [sp, #12]
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	42ab      	cmp	r3, r5
 80079f0:	dcf2      	bgt.n	80079d8 <_printf_i+0x1e8>
 80079f2:	e7eb      	b.n	80079cc <_printf_i+0x1dc>
 80079f4:	2500      	movs	r5, #0
 80079f6:	f104 0919 	add.w	r9, r4, #25
 80079fa:	e7f5      	b.n	80079e8 <_printf_i+0x1f8>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1ac      	bne.n	800795a <_printf_i+0x16a>
 8007a00:	7803      	ldrb	r3, [r0, #0]
 8007a02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0a:	e76c      	b.n	80078e6 <_printf_i+0xf6>
 8007a0c:	0800a9e5 	.word	0x0800a9e5
 8007a10:	0800a9f6 	.word	0x0800a9f6

08007a14 <memcpy>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	1e43      	subs	r3, r0, #1
 8007a18:	440a      	add	r2, r1
 8007a1a:	4291      	cmp	r1, r2
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	bd10      	pop	{r4, pc}
 8007a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a28:	e7f7      	b.n	8007a1a <memcpy+0x6>

08007a2a <memmove>:
 8007a2a:	4288      	cmp	r0, r1
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	eb01 0302 	add.w	r3, r1, r2
 8007a32:	d807      	bhi.n	8007a44 <memmove+0x1a>
 8007a34:	1e42      	subs	r2, r0, #1
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d00a      	beq.n	8007a50 <memmove+0x26>
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a42:	e7f8      	b.n	8007a36 <memmove+0xc>
 8007a44:	4283      	cmp	r3, r0
 8007a46:	d9f5      	bls.n	8007a34 <memmove+0xa>
 8007a48:	1881      	adds	r1, r0, r2
 8007a4a:	1ad2      	subs	r2, r2, r3
 8007a4c:	42d3      	cmn	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memmove+0x28>
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a5a:	e7f7      	b.n	8007a4c <memmove+0x22>

08007a5c <_free_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4605      	mov	r5, r0
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d045      	beq.n	8007af0 <_free_r+0x94>
 8007a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a68:	1f0c      	subs	r4, r1, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfb8      	it	lt
 8007a6e:	18e4      	addlt	r4, r4, r3
 8007a70:	f000 f8d2 	bl	8007c18 <__malloc_lock>
 8007a74:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <_free_r+0x98>)
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	4610      	mov	r0, r2
 8007a7a:	b933      	cbnz	r3, 8007a8a <_free_r+0x2e>
 8007a7c:	6063      	str	r3, [r4, #4]
 8007a7e:	6014      	str	r4, [r2, #0]
 8007a80:	4628      	mov	r0, r5
 8007a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a86:	f000 b8c8 	b.w	8007c1a <__malloc_unlock>
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	d90c      	bls.n	8007aa8 <_free_r+0x4c>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	1862      	adds	r2, r4, r1
 8007a92:	4293      	cmp	r3, r2
 8007a94:	bf04      	itt	eq
 8007a96:	681a      	ldreq	r2, [r3, #0]
 8007a98:	685b      	ldreq	r3, [r3, #4]
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	bf04      	itt	eq
 8007a9e:	1852      	addeq	r2, r2, r1
 8007aa0:	6022      	streq	r2, [r4, #0]
 8007aa2:	6004      	str	r4, [r0, #0]
 8007aa4:	e7ec      	b.n	8007a80 <_free_r+0x24>
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	b10a      	cbz	r2, 8007ab0 <_free_r+0x54>
 8007aac:	42a2      	cmp	r2, r4
 8007aae:	d9fa      	bls.n	8007aa6 <_free_r+0x4a>
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	1858      	adds	r0, r3, r1
 8007ab4:	42a0      	cmp	r0, r4
 8007ab6:	d10b      	bne.n	8007ad0 <_free_r+0x74>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	4401      	add	r1, r0
 8007abc:	1858      	adds	r0, r3, r1
 8007abe:	4282      	cmp	r2, r0
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	d1dd      	bne.n	8007a80 <_free_r+0x24>
 8007ac4:	6810      	ldr	r0, [r2, #0]
 8007ac6:	6852      	ldr	r2, [r2, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	4401      	add	r1, r0
 8007acc:	6019      	str	r1, [r3, #0]
 8007ace:	e7d7      	b.n	8007a80 <_free_r+0x24>
 8007ad0:	d902      	bls.n	8007ad8 <_free_r+0x7c>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	e7d3      	b.n	8007a80 <_free_r+0x24>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	1821      	adds	r1, r4, r0
 8007adc:	428a      	cmp	r2, r1
 8007ade:	bf04      	itt	eq
 8007ae0:	6811      	ldreq	r1, [r2, #0]
 8007ae2:	6852      	ldreq	r2, [r2, #4]
 8007ae4:	6062      	str	r2, [r4, #4]
 8007ae6:	bf04      	itt	eq
 8007ae8:	1809      	addeq	r1, r1, r0
 8007aea:	6021      	streq	r1, [r4, #0]
 8007aec:	605c      	str	r4, [r3, #4]
 8007aee:	e7c7      	b.n	8007a80 <_free_r+0x24>
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	20000274 	.word	0x20000274

08007af8 <_malloc_r>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	1ccd      	adds	r5, r1, #3
 8007afc:	f025 0503 	bic.w	r5, r5, #3
 8007b00:	3508      	adds	r5, #8
 8007b02:	2d0c      	cmp	r5, #12
 8007b04:	bf38      	it	cc
 8007b06:	250c      	movcc	r5, #12
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	db01      	blt.n	8007b12 <_malloc_r+0x1a>
 8007b0e:	42a9      	cmp	r1, r5
 8007b10:	d903      	bls.n	8007b1a <_malloc_r+0x22>
 8007b12:	230c      	movs	r3, #12
 8007b14:	6033      	str	r3, [r6, #0]
 8007b16:	2000      	movs	r0, #0
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	f000 f87d 	bl	8007c18 <__malloc_lock>
 8007b1e:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <_malloc_r+0xac>)
 8007b20:	6814      	ldr	r4, [r2, #0]
 8007b22:	4621      	mov	r1, r4
 8007b24:	b991      	cbnz	r1, 8007b4c <_malloc_r+0x54>
 8007b26:	4c20      	ldr	r4, [pc, #128]	; (8007ba8 <_malloc_r+0xb0>)
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	b91b      	cbnz	r3, 8007b34 <_malloc_r+0x3c>
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 f863 	bl	8007bf8 <_sbrk_r>
 8007b32:	6020      	str	r0, [r4, #0]
 8007b34:	4629      	mov	r1, r5
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 f85e 	bl	8007bf8 <_sbrk_r>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d124      	bne.n	8007b8a <_malloc_r+0x92>
 8007b40:	230c      	movs	r3, #12
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f868 	bl	8007c1a <__malloc_unlock>
 8007b4a:	e7e4      	b.n	8007b16 <_malloc_r+0x1e>
 8007b4c:	680b      	ldr	r3, [r1, #0]
 8007b4e:	1b5b      	subs	r3, r3, r5
 8007b50:	d418      	bmi.n	8007b84 <_malloc_r+0x8c>
 8007b52:	2b0b      	cmp	r3, #11
 8007b54:	d90f      	bls.n	8007b76 <_malloc_r+0x7e>
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	50cd      	str	r5, [r1, r3]
 8007b5a:	18cc      	adds	r4, r1, r3
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f85c 	bl	8007c1a <__malloc_unlock>
 8007b62:	f104 000b 	add.w	r0, r4, #11
 8007b66:	1d23      	adds	r3, r4, #4
 8007b68:	f020 0007 	bic.w	r0, r0, #7
 8007b6c:	1ac3      	subs	r3, r0, r3
 8007b6e:	d0d3      	beq.n	8007b18 <_malloc_r+0x20>
 8007b70:	425a      	negs	r2, r3
 8007b72:	50e2      	str	r2, [r4, r3]
 8007b74:	e7d0      	b.n	8007b18 <_malloc_r+0x20>
 8007b76:	428c      	cmp	r4, r1
 8007b78:	684b      	ldr	r3, [r1, #4]
 8007b7a:	bf16      	itet	ne
 8007b7c:	6063      	strne	r3, [r4, #4]
 8007b7e:	6013      	streq	r3, [r2, #0]
 8007b80:	460c      	movne	r4, r1
 8007b82:	e7eb      	b.n	8007b5c <_malloc_r+0x64>
 8007b84:	460c      	mov	r4, r1
 8007b86:	6849      	ldr	r1, [r1, #4]
 8007b88:	e7cc      	b.n	8007b24 <_malloc_r+0x2c>
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d005      	beq.n	8007ba0 <_malloc_r+0xa8>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 f82e 	bl	8007bf8 <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d0cf      	beq.n	8007b40 <_malloc_r+0x48>
 8007ba0:	6025      	str	r5, [r4, #0]
 8007ba2:	e7db      	b.n	8007b5c <_malloc_r+0x64>
 8007ba4:	20000274 	.word	0x20000274
 8007ba8:	20000278 	.word	0x20000278

08007bac <_realloc_r>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	4607      	mov	r7, r0
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	460e      	mov	r6, r1
 8007bb4:	b921      	cbnz	r1, 8007bc0 <_realloc_r+0x14>
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bbc:	f7ff bf9c 	b.w	8007af8 <_malloc_r>
 8007bc0:	b922      	cbnz	r2, 8007bcc <_realloc_r+0x20>
 8007bc2:	f7ff ff4b 	bl	8007a5c <_free_r>
 8007bc6:	4625      	mov	r5, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	f000 f826 	bl	8007c1c <_malloc_usable_size_r>
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d20f      	bcs.n	8007bf4 <_realloc_r+0x48>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7ff ff8e 	bl	8007af8 <_malloc_r>
 8007bdc:	4605      	mov	r5, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0f2      	beq.n	8007bc8 <_realloc_r+0x1c>
 8007be2:	4631      	mov	r1, r6
 8007be4:	4622      	mov	r2, r4
 8007be6:	f7ff ff15 	bl	8007a14 <memcpy>
 8007bea:	4631      	mov	r1, r6
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff ff35 	bl	8007a5c <_free_r>
 8007bf2:	e7e9      	b.n	8007bc8 <_realloc_r+0x1c>
 8007bf4:	4635      	mov	r5, r6
 8007bf6:	e7e7      	b.n	8007bc8 <_realloc_r+0x1c>

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4c06      	ldr	r4, [pc, #24]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4605      	mov	r5, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	f7ff fb4e 	bl	80072a4 <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000614 	.word	0x20000614

08007c18 <__malloc_lock>:
 8007c18:	4770      	bx	lr

08007c1a <__malloc_unlock>:
 8007c1a:	4770      	bx	lr

08007c1c <_malloc_usable_size_r>:
 8007c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c20:	1f18      	subs	r0, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfbc      	itt	lt
 8007c26:	580b      	ldrlt	r3, [r1, r0]
 8007c28:	18c0      	addlt	r0, r0, r3
 8007c2a:	4770      	bx	lr

08007c2c <_init>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr

08007c38 <_fini>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr
